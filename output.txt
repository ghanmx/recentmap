

// .\package.json
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "build:dev": "tsc -b && vite build --mode development",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "preview": "vite preview",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit",
    "analyze": "vite build --mode analyze"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@mapbox/polyline": "^1.2.1",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@stackbit/cms-git": "^1.0.23",
    "@stripe/react-stripe-js": "^2.8.1",
    "@stripe/stripe-js": "^4.9.0",
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/supabase-js": "^2.46.1",
    "@tanstack/react-query": "^5.59.16",
    "@types/leaflet": "^1.9.14",
    "class-variance-authority": "^0.7.0",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "embla-carousel-react": "^8.3.0",
    "eslint-plugin-unused-imports": "^4.1.4",
    "framer-motion": "^11.11.11",
    "input-otp": "^1.2.4",
    "leaflet": "^1.9.4",
    "lodash": "^4.17.21",
    "lovable-tagger": "^1.0.14",
    "lucide-react": "^0.451.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-draggable": "^4.4.6",
    "react-hook-form": "^7.53.0",
    "react-leaflet": "^4.2.1",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.27.0",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@stackbit/types": "^2.1.6",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "prettier": "^3.0.0",
    "prettier-plugin-tailwindcss": "^0.4.1",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:@typescript-eslint/recommended",
      "prettier"
    ],
    "plugins": [
      "react-hooks",
      "unused-imports"
    ],
    "rules": {
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "warn",
        {
          "vars": "all",
          "varsIgnorePattern": "^_",
          "args": "after-used",
          "argsIgnorePattern": "^_"
        }
      ],
      "@typescript-eslint/no-unused-vars": "off",
      "react-refresh/only-export-components": [
        "warn",
        {
          "allowConstantExport": true
        }
      ]
    }
  },
  "prettier": {
    "singleQuote": true,
    "semi": false,
    "tailwindConfig": "./tailwind.config.ts"
  }
}


// .\tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}



// C:\Users\israe\Documents\GitHub\recentmap\components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


// C:\Users\israe\Documents\GitHub\recentmap\eslint.config.js
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";
import unusedImports from "eslint-plugin-unused-imports";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommended,
    ],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: {
        ...globals.browser,
        React: true,
      },
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
      "unused-imports": unusedImports,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "warn",
        { 
          vars: "all", 
          varsIgnorePattern: "^_", 
          args: "after-used", 
          argsIgnorePattern: "^_" 
        },
      ],
    },
  }
);


// C:\Users\israe\Documents\GitHub\recentmap\package.json
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "build:dev": "tsc -b && vite build --mode development",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "preview": "vite preview",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit",
    "analyze": "vite build --mode analyze"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@mapbox/polyline": "^1.2.1",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@stackbit/cms-git": "^1.0.23",
    "@stripe/react-stripe-js": "^2.8.1",
    "@stripe/stripe-js": "^4.9.0",
    "@supabase/auth-helpers-react": "^0.5.0",
    "@supabase/auth-ui-react": "^0.4.7",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/supabase-js": "^2.46.1",
    "@tanstack/react-query": "^5.59.16",
    "@types/leaflet": "^1.9.14",
    "class-variance-authority": "^0.7.0",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.4.5",
    "embla-carousel-react": "^8.3.0",
    "eslint-plugin-unused-imports": "^4.1.4",
    "framer-motion": "^11.11.11",
    "input-otp": "^1.2.4",
    "leaflet": "^1.9.4",
    "lodash": "^4.17.21",
    "lovable-tagger": "^1.0.14",
    "lucide-react": "^0.451.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-draggable": "^4.4.6",
    "react-hook-form": "^7.53.0",
    "react-leaflet": "^4.2.1",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.27.0",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@stackbit/types": "^2.1.6",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "prettier": "^3.0.0",
    "prettier-plugin-tailwindcss": "^0.4.1",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:react/recommended",
      "plugin:@typescript-eslint/recommended",
      "prettier"
    ],
    "plugins": [
      "react-hooks",
      "unused-imports"
    ],
    "rules": {
      "unused-imports/no-unused-imports": "error",
      "unused-imports/no-unused-vars": [
        "warn",
        {
          "vars": "all",
          "varsIgnorePattern": "^_",
          "args": "after-used",
          "argsIgnorePattern": "^_"
        }
      ],
      "@typescript-eslint/no-unused-vars": "off",
      "react-refresh/only-export-components": [
        "warn",
        {
          "allowConstantExport": true
        }
      ]
    }
  },
  "prettier": {
    "singleQuote": true,
    "semi": false,
    "tailwindConfig": "./tailwind.config.ts"
  }
}


// C:\Users\israe\Documents\GitHub\recentmap\postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



// C:\Users\israe\Documents\GitHub\recentmap\stackbit.config.ts
import { defineStackbitConfig } from '@stackbit/types';
import { GitContentSource } from '@stackbit/cms-git';

export default defineStackbitConfig({
  stackbitVersion: '~0.6.0',
  ssgName: 'custom',
  nodeVersion: '18',
  devCommand: 'npm run dev -- --port {PORT} --host 127.0.0.1',
  buildCommand: 'npm run build',
  installCommand: 'npm install',
  dataDir: 'content',
  pagesDir: 'src/pages',
  publishDir: 'public',
  contentSources: [
    new GitContentSource({
      rootPath: __dirname,
      contentDirs: ['content'],
      models: [
        { name: 'page', type: 'page', urlPath: '/{slug}' },
        { name: 'post', type: 'page', urlPath: '/blog/{slug}' },
        { name: 'config', type: 'data' }
      ],
    })
  ],
  modelExtensions: [
    { name: 'page', type: 'page', urlPath: '/{slug}' },
    { name: 'post', type: 'page', urlPath: '/blog/{slug}' },
    { name: 'config', type: 'data' }
  ],
});


// C:\Users\israe\Documents\GitHub\recentmap\tailwind.config.ts
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#2563eb",
          light: "#3b82f6",
          dark: "#1d4ed8",
          foreground: "#ffffff",
        },
        secondary: {
          DEFAULT: "#10b981",
          light: "#34d399",
          dark: "#059669",
          foreground: "#ffffff",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      gradients: {
        'primary': 'from-primary via-primary-light to-primary-dark',
        'card': 'from-white/95 via-blue-50/30 to-white',
      },
      fontFamily: {
        sans: ["Inter", "sans-serif"],
        heading: ["Montserrat", "sans-serif"],
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      animation: {
        'spin-slow': 'spin 3s linear infinite',
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-in': 'slideIn 0.3s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideIn: {
          '0%': { transform: 'translateX(-100%)' },
          '100%': { transform: 'translateX(0)' },
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;


// C:\Users\israe\Documents\GitHub\recentmap\tsconfig.app.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "src",
    "stackbit.config.ts"
  ]
}


// C:\Users\israe\Documents\GitHub\recentmap\tsconfig.json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}



// C:\Users\israe\Documents\GitHub\recentmap\tsconfig.node.json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



// C:\Users\israe\Documents\GitHub\recentmap\vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from 'lovable-tagger';

// https://vitejs.dev/config/
export default defineConfig(() => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    componentTagger(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



// C:\Users\israe\Documents\GitHub\recentmap\.netlify\state.json
{
	"siteId": "68e2c53a-1c3b-43cd-9f88-be9661720146"
}


// C:\Users\israe\Documents\GitHub\recentmap\dist\assets\index-DSwnUCTd.js


// C:\Users\israe\Documents\GitHub\recentmap\netlify\functions\hello-world\hello-world.js
// Docs on event and context https://docs.netlify.com/functions/build/#code-your-function-2
const handler = async (event) => {
  try {
    const subject = event.queryStringParameters.name || 'World'
    return {
      statusCode: 200,
      body: JSON.stringify({ message: `Hello ${subject}` }),
      // // more keys you can return:
      // headers: { "headerName": "headerValue", ... },
      // isBase64Encoded: true,
    }
  } catch (error) {
    return { statusCode: 500, body: error.toString() }
  }
}

module.exports = { handler }



// C:\Users\israe\Documents\GitHub\recentmap\src\App.tsx
import { TowingProvider } from './contexts/TowingContext';
import { SidebarProvider } from './contexts/SidebarContext';
import { BrowserRouter } from 'react-router-dom';
import { Toaster } from './components/ui/toaster';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { StripeProvider } from './providers/StripeProvider';
import Index from './pages/Index';

const queryClient = new QueryClient();

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <TowingProvider>
        <SidebarProvider>
          <StripeProvider>
            <BrowserRouter>
              <Index />
              <Toaster />
            </BrowserRouter>
          </StripeProvider>
        </SidebarProvider>
      </TowingProvider>
    </QueryClientProvider>
  );
}

export default App;


// C:\Users\israe\Documents\GitHub\recentmap\src\main.tsx
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);



// C:\Users\israe\Documents\GitHub\recentmap\src\vite-env.d.ts
/// <reference types="vite/client" />



// C:\Users\israe\Documents\GitHub\recentmap\src\components\CostEstimation.tsx
import { useState, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useTowing } from "@/contexts/TowingContext";
import { towTruckTypes } from "@/utils/towTruckPricing";
import PaymentWindow from "./payment/PaymentWindow";
import { CostHeader } from "./cost/CostHeader";
import { CostMetrics } from "./cost/CostMetrics";
import { CostBreakdown } from "./cost/CostBreakdown";
import { useToast } from "@/hooks/use-toast";
import { TollLocation } from "@/data/tollData";
import { Button } from "./ui/button";
import { Dialog, DialogContent, DialogTrigger, DialogTitle, DialogDescription } from "./ui/dialog";
import { TermsAndConditions } from "./legal/TermsAndConditions";
import { ScrollArea } from "./ui/scroll-area";
import { Info } from "lucide-react";

export const CostEstimation = () => {
  const { 
    totalDistance, 
    detectedTolls, 
    totalTollCost, 
    truckType, 
    requiresManeuver,
    updateManeuverRequired,
    selectedVehicleModel,
  } = useTowing();
  
  const [showBreakdown, setShowBreakdown] = useState(false);
  const [requiresInvoice, setRequiresInvoice] = useState(false);
  const [showPaymentWindow, setShowPaymentWindow] = useState(false);
  const { toast } = useToast();

  const selectedTruck = towTruckTypes[truckType || 'A'];
  const baseCost = totalDistance * selectedTruck.perKm;
  const flagDropFee = selectedTruck.flagDropFee;
  const maneuverCost = requiresManeuver ? selectedTruck.maneuverCharge : 0;
  const subtotal = baseCost + flagDropFee + maneuverCost + totalTollCost;
  const tax = requiresInvoice ? subtotal * 0.16 : 0;
  const finalCost = subtotal + tax;

  const handleBreakdownToggle = useCallback((value: boolean) => {
    setShowBreakdown(value);
    if (value) {
      toast({
        title: "Desglose de costos",
        description: "Ahora puedes ver el detalle de los costos del servicio",
      });
    }
  }, [toast]);

  const processedTolls = detectedTolls.map((toll: TollLocation) => ({
    name: toll.name,
    cost: toll.cost,
    direction: toll.direction || 'outbound'
  }));

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-4 w-full max-w-2xl mx-auto"
    >
      <div className="bg-gradient-to-br from-white/95 via-blue-50/30 to-white backdrop-blur-sm rounded-lg shadow-lg p-4 space-y-4 border border-blue-100/50 hover:shadow-xl transition-all duration-300">
        <div className="flex justify-between items-center">
          <Dialog>
            <DialogTrigger asChild>
              <Button 
                variant="outline" 
                size="sm"
                className="flex items-center gap-2 text-primary hover:text-primary/80"
              >
                <Info className="w-4 h-4" />
                Términos y Condiciones
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl h-[80vh]">
              <DialogTitle>Términos y Condiciones del Servicio</DialogTitle>
              <DialogDescription>
                Por favor, lea cuidadosamente los términos y condiciones antes de proceder.
              </DialogDescription>
              <ScrollArea className="h-full pr-4">
                <TermsAndConditions />
              </ScrollArea>
            </DialogContent>
          </Dialog>
        </div>

        <CostHeader 
          showBreakdown={showBreakdown}
          setShowBreakdown={handleBreakdownToggle}
          finalCost={finalCost}
          truckType={truckType}
          selectedTruck={selectedTruck}
        />

        <AnimatePresence>
          {showBreakdown && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="space-y-4"
            >
              <CostMetrics
                totalDistance={totalDistance}
                requiresInvoice={requiresInvoice}
                setRequiresInvoice={setRequiresInvoice}
                requiresManeuver={requiresManeuver}
                onManeuverChange={updateManeuverRequired}
                selectedTruck={selectedTruck}
              />

              <CostBreakdown
                baseCost={baseCost}
                flagDropFee={flagDropFee}
                tax={tax}
                totalDistance={totalDistance}
                totalTollCost={totalTollCost}
                finalCost={finalCost}
                detectedTolls={processedTolls}
                requiresInvoice={requiresInvoice}
                setShowPaymentWindow={setShowPaymentWindow}
                maneuverCost={maneuverCost}
                requiresManeuver={requiresManeuver}
                selectedTruck={selectedTruck}
                subtotal={subtotal}
                selectedVehicleModel={selectedVehicleModel}
              />
            </motion.div>
          )}
        </AnimatePresence>

        <PaymentWindow
          isOpen={showPaymentWindow}
          onClose={() => setShowPaymentWindow(false)}
          amount={finalCost}
          onPaymentSubmit={(result) => {
            if (result.success) {
              setShowPaymentWindow(false);
              toast({
                title: "Pago procesado",
                description: `Pago de ${finalCost.toFixed(2)} MXN procesado exitosamente para ${selectedTruck.name}`,
                className: "bg-green-50 border-green-200",
              });
            }
          }}
        />
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\Sidebar.tsx
import { useState } from "react";
import { Menu, ChevronLeft, ChevronRight } from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { VehicleForm } from "./VehicleForm";
import { RouteDisplay } from "./map/RouteDisplay";
import { CostEstimation } from "./CostEstimation";
import { useSidebar } from "@/contexts/SidebarContext";
import { ScrollArea } from "@/components/ui/scroll-area";

const NavContent = ({
  pickupLocation,
  dropLocation,
  pickupAddress,
  dropAddress,
  onPickupSelect,
  onDropSelect,
  onSelectingPickup,
  onSelectingDrop
}: {
  pickupLocation?: { lat: number; lng: number } | null;
  dropLocation?: { lat: number; lng: number } | null;
  pickupAddress?: string;
  dropAddress?: string;
  onPickupSelect: (location: { lat: number; lng: number; address: string }) => void;
  onDropSelect: (location: { lat: number; lng: number; address: string }) => void;
  onSelectingPickup: (selecting: boolean) => void;
  onSelectingDrop: (selecting: boolean) => void;
}) => (
  <>
    <div className="sticky top-0 z-10 p-4 border-b bg-gradient-to-r from-primary/10 to-primary/5 backdrop-blur-sm">
      <h1 className="text-xl md:text-2xl lg:text-3xl font-heading font-bold text-primary text-center">MRGruas</h1>
    </div>

    <ScrollArea className="h-[calc(100vh-4rem)] p-4 md:p-6">
      <div className="space-y-4 md:space-y-6 flex flex-col items-center pb-20">
        <VehicleForm
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
          pickupAddress={pickupAddress}
          dropAddress={dropAddress}
          serviceType="standard"
          onPickupSelect={onPickupSelect}
          onDropSelect={onDropSelect}
          onSelectingPickup={onSelectingPickup}
          onSelectingDrop={onSelectingDrop}
        />
        <CostEstimation />
        <RouteDisplay
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
        />
      </div>
    </ScrollArea>
  </>
);

const Sidebar = () => {
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const { isOpen: isDesktopSidebarVisible, toggle: toggleDesktopSidebar } = useSidebar();
  const [pickupLocation, setPickupLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [dropLocation, setDropLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [pickupAddress, setPickupAddress] = useState("");
  const [dropAddress, setDropAddress] = useState("");
  const [selectingPickup, setSelectingPickup] = useState(false);
  const [selectingDrop, setSelectingDrop] = useState(false);

  const handlePickupSelect = (location: { lat: number; lng: number; address: string }) => {
    setPickupLocation({ lat: location.lat, lng: location.lng });
    setPickupAddress(location.address);
    setSelectingPickup(false);
  };

  const handleDropSelect = (location: { lat: number; lng: number; address: string }) => {
    setDropLocation({ lat: location.lat, lng: location.lng });
    setDropAddress(location.address);
    setSelectingDrop(false);
  };

  return (
    <>
      <div className="lg:hidden fixed top-4 left-4 z-[1000]">
        <Sheet open={isMobileOpen} onOpenChange={setIsMobileOpen}>
          <SheetTrigger asChild>
            <Button 
              variant="outline" 
              size="icon" 
              className="bg-white/95 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all"
            >
              <Menu className="h-4 w-4" />
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="w-full sm:w-[400px] p-0">
            <NavContent
              pickupLocation={pickupLocation}
              dropLocation={dropLocation}
              pickupAddress={pickupAddress}
              dropAddress={dropAddress}
              onPickupSelect={handlePickupSelect}
              onDropSelect={handleDropSelect}
              onSelectingPickup={setSelectingPickup}
              onSelectingDrop={setSelectingDrop}
            />
          </SheetContent>
        </Sheet>
      </div>

      <Button
        variant="outline"
        size="icon"
        onClick={toggleDesktopSidebar}
        className={cn(
          "fixed bottom-4 left-4 z-[1000] hidden lg:flex",
          "bg-white/95 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all"
        )}
      >
        {isDesktopSidebarVisible ? (
          <ChevronLeft className="h-4 w-4" />
        ) : (
          <ChevronRight className="h-4 w-4" />
        )}
      </Button>

      <aside 
        className={cn(
          "hidden lg:flex flex-col fixed left-0 top-0 h-screen",
          "bg-white/95 backdrop-blur-sm border-r shadow-lg z-[1000]",
          "transition-all duration-300 ease-in-out",
          isDesktopSidebarVisible ? "w-[400px]" : "w-0 overflow-hidden"
        )}
      >
        <NavContent
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
          pickupAddress={pickupAddress}
          dropAddress={dropAddress}
          onPickupSelect={handlePickupSelect}
          onDropSelect={handleDropSelect}
          onSelectingPickup={setSelectingPickup}
          onSelectingDrop={setSelectingDrop}
        />
      </aside>

      <div 
        className={cn(
          "transition-all duration-300 ease-in-out",
          isDesktopSidebarVisible ? "lg:pl-[400px]" : "lg:pl-0"
        )} 
      />
    </>
  );
};

export default Sidebar;
import { Card } from "@/components/ui/card";
import { Ticket, Clock, CreditCard } from "lucide-react";
import { TollLocation } from "@/data/tollData";
import { Separator } from "@/components/ui/separator";

interface TollInfoDisplayProps {
  tolls: TollLocation[];
  totalCost: number;
}

export const TollInfoDisplay = ({ tolls, totalCost }: TollInfoDisplayProps) => {
  if (tolls.length === 0) return null;

  return (
    <Card className="p-3 md:p-4 bg-yellow-50/80 border border-yellow-200 space-y-3">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Ticket className="w-4 h-4 text-yellow-700" />
          <h3 className="text-sm md:text-base lg:text-lg font-semibold text-yellow-700">Peajes en la Ruta</h3>
        </div>
        <div className="text-xs md:text-sm font-semibold text-yellow-700 bg-yellow-100 px-2 md:px-3 py-1 rounded-full">
          Total: ${totalCost.toFixed(2)}
        </div>
      </div>

      <Separator className="bg-yellow-200/50" />

      <div className="space-y-2">
        {tolls.map((toll, index) => (
          <div
            key={index}
            className="bg-white/50 rounded-lg p-2 md:p-3 space-y-2 hover:bg-white/70 transition-colors"
          >
            <div className="flex justify-between items-center">
              <span className="text-xs md:text-sm font-medium text-yellow-800">{toll.name}</span>
              <span className="text-xs md:text-sm font-semibold text-yellow-700 bg-yellow-100 px-2 py-0.5 rounded-full">
                ${toll.cost.toFixed(2)}
              </span>
            </div>
            <div className="flex items-center gap-3 md:gap-4 text-[10px] md:text-xs text-gray-600">
              <div className="flex items-center gap-1">
                <Clock className="w-3 h-3" />
                <span>{toll.operatingHours}</span>
              </div>
              <div className="flex items-center gap-1">
                <CreditCard className="w-3 h-3" />
                <span>{toll.acceptedPayments.join(', ')}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </Card>
  );
};
import { ReactNode } from 'react';
import { TowingProvider } from '../contexts/TowingContext';

interface TowingWrapperProps {
  children: ReactNode;
}

export const TowingWrapper = ({ children }: TowingWrapperProps) => {
  return (
    <TowingProvider>
      {children}
    </TowingProvider>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\TowMap.tsx
import { useRef, useState, useEffect, useCallback } from "react";
import { Map } from "leaflet";
import "leaflet/dist/leaflet.css";
import { showRouteNotification } from "@/utils/notificationUtils";
import { MapContainerComponent } from "./map/MapContainer";
import { MapControlPanel } from "./map/MapControlPanel";
import { useToast } from "@/hooks/use-toast";
import { detectTollsOnRoute } from "@/utils/tollCalculator";
import { useTowing } from "@/contexts/TowingContext";
import { getAddressFromCoordinates } from "@/services/geocodingService";

const MAX_RETRIES = 3;
const RETRY_DELAY = 1000;

const TowMap = () => {
  const [pickupLocation, setPickupLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [dropLocation, setDropLocation] = useState<{ lat: number; lng: number } | null>(null);
  const [pickupAddress, setPickupAddress] = useState("");
  const [dropAddress, setDropAddress] = useState("");
  const [selectingPickup, setSelectingPickup] = useState(false);
  const [selectingDrop, setSelectingDrop] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const mapRef = useRef<Map | null>(null);
  const { toast } = useToast();
  const { updateTollInfo, updateLocationInfo } = useTowing();

  const retryWithDelay = useCallback(async (fn: () => Promise<any>, attempt: number = 0): Promise<any> => {
    try {
      return await fn();
    } catch (error) {
      if (attempt < MAX_RETRIES) {
        toast({
          title: "Reintentando...",
          description: `Intento ${attempt + 1} de ${MAX_RETRIES}`,
          duration: RETRY_DELAY,
        });
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
        return retryWithDelay(fn, attempt + 1);
      }
      throw error;
    }
  }, [toast]);

  useEffect(() => {
    const updateTolls = async () => {
      if (pickupLocation && dropLocation) {
        try {
          setIsLoading(true);
          const tollInfo = await retryWithDelay(async () => {
            return await detectTollsOnRoute(pickupLocation, dropLocation);
          });

          updateTollInfo(tollInfo.tolls, tollInfo.totalTollCost);

          if (tollInfo.tolls.length > 0) {
            toast({
              title: "Peajes Detectados",
              description: `Se detectaron ${tollInfo.tolls.length} peajes en la ruta con un costo total de $${tollInfo.totalTollCost.toFixed(2)}`,
              duration: 5000,
            });
          } else {
            toast({
              title: "Sin Peajes",
              description: "No se detectaron peajes en la ruta seleccionada",
              duration: 3000,
            });
          }
        } catch (error) {
          console.error('Error detecting tolls:', error);
          toast({
            title: "Error al Detectar Peajes",
            description: "No se pudieron detectar los peajes en la ruta. Por favor, intente nuevamente.",
            variant: "destructive",
            duration: 5000,
          });
        } finally {
          setIsLoading(false);
        }
      }
    };

    updateTolls();
  }, [pickupLocation, dropLocation, toast, updateTollInfo, retryWithDelay]);

  // New useEffect hooks for address synchronization
  useEffect(() => {
    const updatePickupAddress = async () => {
      if (pickupLocation) {
        try {
          setIsLoading(true);
          const address = await retryWithDelay(async () => {
            return await getAddressFromCoordinates(pickupLocation.lat, pickupLocation.lng);
          });
          setPickupAddress(address);
          updateLocationInfo({ pickup: { ...pickupLocation, address } });
        } catch (error) {
          console.error('Error getting pickup address:', error);
          toast({
            title: "Error de Dirección",
            description: "No se pudo obtener la dirección de recogida",
            variant: "destructive",
            duration: 3000,
          });
        } finally {
          setIsLoading(false);
        }
      }
    };

    updatePickupAddress();
  }, [pickupLocation, toast, updateLocationInfo, retryWithDelay]);

  useEffect(() => {
    const updateDropAddress = async () => {
      if (dropLocation) {
        try {
          setIsLoading(true);
          const address = await retryWithDelay(async () => {
            return await getAddressFromCoordinates(dropLocation.lat, dropLocation.lng);
          });
          setDropAddress(address);
          updateLocationInfo({ drop: { ...dropLocation, address } });
        } catch (error) {
          console.error('Error getting drop address:', error);
          toast({
            title: "Error de Dirección",
            description: "No se pudo obtener la dirección de entrega",
            variant: "destructive",
            duration: 3000,
          });
        } finally {
          setIsLoading(false);
        }
      }
    };

    updateDropAddress();
  }, [dropLocation, toast, updateLocationInfo, retryWithDelay]);

  const handleLocationSelect = useCallback(async (location: { lat: number; lng: number }) => {
    try {
      if (selectingPickup) {
        setPickupLocation(location);
        setSelectingPickup(false);
      } else if (selectingDrop) {
        setDropLocation(location);
        setSelectingDrop(false);
      }
    } catch (error) {
      console.error('Error handling location selection:', error);
      toast({
        title: "Error de Ubicación",
        description: "No se pudo procesar la ubicación seleccionada",
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
    }
  }, [selectingPickup, selectingDrop, toast]);

  return (
    <div className="relative h-screen w-full">
      <div className="absolute inset-0 z-0">
        <MapContainerComponent
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
          selectingPickup={selectingPickup}
          selectingDrop={selectingDrop}
          onLocationSelect={handleLocationSelect}
          setPickupLocation={setPickupLocation}
          setDropLocation={setDropLocation}
          onRouteCalculated={(distance) => showRouteNotification(distance)}
          isLoading={isLoading}
        />
      </div>

      <div className="absolute inset-x-0 top-24 z-50 pointer-events-none">
        <div className="container mx-auto px-4">
          <MapControlPanel
            selectingPickup={selectingPickup}
            selectingDrop={selectingDrop}
            setSelectingPickup={setSelectingPickup}
            setSelectingDrop={setSelectingDrop}
            pickupLocation={pickupLocation}
            dropLocation={dropLocation}
            pickupAddress={pickupAddress}
            dropAddress={dropAddress}
            isLoading={isLoading}
          />
        </div>
      </div>

      <p className="sr-only">
        Mapa interactivo para seleccionar ubicaciones de recogida y entrega del servicio de grúa
      </p>
    </div>
  );
};

export default TowMap;


// C:\Users\israe\Documents\GitHub\recentmap\src\components\VehicleForm.tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Form } from "@/components/ui/form";
import { VehicleSelector } from "./form/VehicleSelector";
import { TowTruckSelector } from "./form/TowTruckSelector";
import { LocationSelector } from "./form/LocationSelector";
import { UserInfoFields } from "./form/UserInfoFields";
import { VehicleBasicFields } from "./form/VehicleBasicFields";
import { ManeuverField } from "./form/ManeuverField";
import { FormData, formSchema } from "@/types/form";
import { Card } from "./ui/card";
import { useTowing } from "@/contexts/TowingContext";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";
import { motion } from "framer-motion";
import { VehicleFormCopyButton } from "./form/VehicleFormCopyButton";

interface VehicleFormProps {
  pickupLocation?: { lat: number; lng: number } | null;
  dropLocation?: { lat: number; lng: number } | null;
  pickupAddress?: string;
  dropAddress?: string;
  serviceType?: string;
  onPickupSelect?: (location: { lat: number; lng: number; address: string }) => void;
  onDropSelect?: (location: { lat: number; lng: number; address: string }) => void;
  onSelectingPickup?: (selecting: boolean) => void;
  onSelectingDrop?: (selecting: boolean) => void;
}

export const VehicleForm = ({
  pickupLocation,
  dropLocation,
  pickupAddress,
  dropAddress,
  serviceType = "standard",
  onPickupSelect,
  onDropSelect,
  onSelectingPickup,
  onSelectingDrop
}: VehicleFormProps) => {
  const { updateSelectedVehicleModel, updateTruckType } = useTowing();
  const { toast } = useToast();
  const [isPending, setIsPending] = useState(false);

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      userName: "",
      phone: "",
      vehicleMake: "",
      vehicleModel: "",
      vehicleYear: "",
      vehicleColor: "",
      truckType: "A",
      requiresManeuver: false,
      issueDescription: "",
    },
    mode: "onChange"
  });

  const handleVehicleModelChange = (value: string) => {
    updateSelectedVehicleModel(value);
    toast({
      title: "Modelo de Vehículo Actualizado",
      description: `Modelo seleccionado: ${value}`,
    });
  };

  const handleTruckTypeChange = (value: "A" | "B" | "C" | "D") => {
    form.setValue("truckType", value, { shouldDirty: true });
    updateTruckType(value);
    toast({
      title: "Tipo de Grúa Actualizado",
      description: `Tipo de grúa seleccionado: ${value}`,
    });
  };

  const onSubmit = form.handleSubmit(async (data) => {
    setIsPending(true);
    try {
      toast({
        title: "Formulario Enviado",
        description: "Los detalles del vehículo y ubicación han sido guardados",
      });
    } finally {
      setIsPending(false);
    }
  });

  return (
    <Form {...form}>
      <form onSubmit={onSubmit} className="space-y-8 w-full">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Card className="p-6 bg-gradient-to-br from-white/95 to-blue-50/30 shadow-lg hover:shadow-xl transition-all duration-300">
            <LocationSelector
              form={form}
              pickupLocation={pickupLocation}
              dropLocation={dropLocation}
              pickupAddress={pickupAddress}
              dropAddress={dropAddress}
              onPickupSelect={onPickupSelect}
              onDropSelect={onDropSelect}
              onSelectingPickup={onSelectingPickup}
              onSelectingDrop={onSelectingDrop}
            />
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
        >
          <Card className="p-6 bg-gradient-to-br from-white/95 to-blue-50/30 shadow-lg hover:shadow-xl transition-all duration-300">
            <div className="space-y-6">
              <UserInfoFields form={form} />
              <VehicleBasicFields
                form={form}
                onVehicleModelChange={handleVehicleModelChange}
              />
              <ManeuverField form={form} />
            </div>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
        >
          <Card className="p-6 bg-gradient-to-br from-white/95 to-blue-50/30 shadow-lg hover:shadow-xl transition-all duration-300">
            <TowTruckSelector
              form={form}
              selectedModel={form.watch("vehicleModel")}
              onTruckTypeChange={handleTruckTypeChange}
            />
          </Card>
        </motion.div>

        <VehicleFormCopyButton
          form={form}
          pickupAddress={pickupAddress}
          dropAddress={dropAddress}
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
          isPending={isPending}
        />
      </form>
    </Form>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\analytics\ServiceSummary.tsx
import { Card } from "@/components/ui/card";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import { ServiceRequest } from "@/types/service";

const mockData = [
  { name: "Ene", servicios: 4 },
  { name: "Feb", servicios: 6 },
  { name: "Mar", servicios: 8 },
  { name: "Abr", servicios: 5 },
  { name: "May", servicios: 7 },
];

export const ServiceSummary = () => {
  return (
    <Card className="p-6 space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">Resumen de Servicios</h2>
      
      <div className="h-[300px] w-full">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={mockData}>
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="servicios" fill="#4f46e5" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
        <Card className="p-4 bg-blue-50">
          <h3 className="text-lg font-semibold text-blue-900">Total Servicios</h3>
          <p className="text-3xl font-bold text-blue-600">30</p>
        </Card>
        <Card className="p-4 bg-green-50">
          <h3 className="text-lg font-semibold text-green-900">Completados</h3>
          <p className="text-3xl font-bold text-green-600">25</p>
        </Card>
        <Card className="p-4 bg-purple-50">
          <h3 className="text-lg font-semibold text-purple-900">En Proceso</h3>
          <p className="text-3xl font-bold text-purple-600">5</p>
        </Card>
      </div>
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\CostBreakdown.tsx
import { TowTruckType } from "@/utils/towTruckPricing";
import { formatCurrency } from "@/utils/priceCalculator";
import { Card } from "@/components/ui/card";
import { Receipt, Truck, TrendingUp, Flag, ArrowRight, ArrowLeft } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { CostFormulaDisplay } from "./CostFormulaDisplay";
import { CostItemDisplay } from "./CostItemDisplay";
import { TruckInfoHeader } from "./TruckInfoHeader";
import { Separator } from "@/components/ui/separator";

interface CostBreakdownProps {
  baseCost: number;
  flagDropFee: number;
  tax: number;
  totalDistance: number;
  totalTollCost: number;
  finalCost: number;
  detectedTolls: Array<{ name: string; cost: number; direction: 'outbound' | 'return' }>;
  requiresInvoice: boolean;
  setShowPaymentWindow: (show: boolean) => void;
  maneuverCost: number;
  requiresManeuver: boolean;
  selectedTruck: TowTruckType;
  subtotal: number;
  selectedVehicleModel: string;
}

export const CostBreakdown = ({
  baseCost,
  flagDropFee,
  tax,
  totalDistance,
  totalTollCost,
  finalCost,
  detectedTolls,
  requiresInvoice,
  setShowPaymentWindow,
  maneuverCost,
  requiresManeuver,
  selectedTruck,
  subtotal,
  selectedVehicleModel,
}: CostBreakdownProps) => {
  const outboundTolls = detectedTolls.filter(toll => toll.direction === 'outbound');
  const returnTolls = detectedTolls.filter(toll => toll.direction === 'return');

  return (
    <Card className="p-4 space-y-4 bg-white/50">
      <div className="space-y-2">
        <motion.div 
          key={selectedTruck.name}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="space-y-2"
        >
          <TruckInfoHeader 
            selectedTruck={selectedTruck} 
            selectedVehicleModel={selectedVehicleModel}
          />
          <CostFormulaDisplay 
            selectedTruck={selectedTruck}
            requiresManeuver={requiresManeuver}
            requiresInvoice={requiresInvoice}
          />
        </motion.div>
        
        <AnimatePresence mode="wait">
          <div className="space-y-3 border-t pt-3 mt-2">
            <CostItemDisplay
              label={`Banderazo ${selectedTruck.name}`}
              amount={flagDropFee}
              icon={<Flag className="w-4 h-4 text-primary" />}
              description={`Cargo inicial por servicio de grúa ${selectedTruck.name}`}
            />

            <CostItemDisplay
              label={`Servicio base ${selectedTruck.name}`}
              amount={baseCost}
              icon={<TrendingUp className="w-4 h-4 text-primary" />}
              description={`${totalDistance.toFixed(2)} km × ${formatCurrency(selectedTruck.perKm)}/km`}
            />
            
            {requiresManeuver && (
              <CostItemDisplay
                label={`Cargo por maniobra especial (${selectedTruck.name})`}
                amount={selectedTruck.maneuverCharge}
                icon={<Truck className="w-4 h-4 text-orange-500" />}
                description="Cargo adicional por maniobras especiales requeridas"
              />
            )}

            {(outboundTolls.length > 0 || returnTolls.length > 0) && (
              <motion.div
                key={`tolls-${selectedTruck.name}`}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="space-y-3"
              >
                <div className="text-sm text-gray-600 font-medium flex items-center gap-2">
                  <Receipt className="w-4 h-4 text-primary" />
                  Peajes detectados en la ruta:
                </div>

                {outboundTolls.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-sm text-blue-600">
                      <ArrowRight className="w-4 h-4" />
                      <span>Peajes de ida:</span>
                    </div>
                    {outboundTolls.map((toll, index) => (
                      <CostItemDisplay
                        key={`outbound-toll-${index}`}
                        label={toll.name}
                        amount={toll.cost}
                        indent
                      />
                    ))}
                  </div>
                )}

                {returnTolls.length > 0 && (
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-sm text-blue-600">
                      <ArrowLeft className="w-4 h-4" />
                      <span>Peajes de regreso:</span>
                    </div>
                    {returnTolls.map((toll, index) => (
                      <CostItemDisplay
                        key={`return-toll-${index}`}
                        label={toll.name}
                        amount={toll.cost}
                        indent
                      />
                    ))}
                  </div>
                )}

                <div className="pt-2">
                  <CostItemDisplay
                    label="Total peajes (ida y vuelta)"
                    amount={totalTollCost}
                    className="font-medium"
                  />
                </div>
              </motion.div>
            )}

            <motion.div
              key={`subtotal-${selectedTruck.name}`}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="border-t pt-2 mt-2"
            >
              <CostItemDisplay
                label="Subtotal"
                amount={subtotal}
                description={`Suma de todos los cargos para grúa ${selectedTruck.name}`}
              />
              
              {requiresInvoice && (
                <CostItemDisplay
                  label="IVA (16%)"
                  amount={tax}
                  icon={<Receipt className="w-4 h-4 text-green-500" />}
                  description="Impuesto al Valor Agregado"
                />
              )}
            </motion.div>

            <motion.div
              key={`total-${selectedTruck.name}`}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="border-t pt-3 text-lg font-bold flex justify-between items-center"
            >
              <span>Total Final</span>
              <span className={`${selectedTruck.name === 'Tipo D' ? 'text-orange-500' : 'text-primary'}`}>
                {formatCurrency(finalCost)}
              </span>
            </motion.div>
          </div>
        </AnimatePresence>
      </div>

      <Button
        className={`w-full ${
          selectedTruck.name === 'Tipo D' 
            ? 'bg-orange-500 hover:bg-orange-600' 
            : 'bg-primary hover:bg-primary/90'
        }`}
        onClick={() => setShowPaymentWindow(true)}
      >
        Proceder al pago
      </Button>
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\CostFormulaDisplay.tsx
import { Calculator } from "lucide-react";
import { motion } from "framer-motion";
import { formatCurrency } from "@/utils/priceCalculator";
import { TowTruckType } from "@/utils/towTruckPricing";

interface CostFormulaDisplayProps {
  selectedTruck: TowTruckType;
  requiresManeuver: boolean;
  requiresInvoice: boolean;
}

export const CostFormulaDisplay = ({
  selectedTruck,
  requiresManeuver,
  requiresInvoice,
}: CostFormulaDisplayProps) => {
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="text-sm text-gray-600 bg-blue-50/50 p-3 rounded-lg mt-2"
    >
      <div className="flex items-center gap-2 mb-2">
        <Calculator className="w-4 h-4 text-primary" />
        <span className="font-medium">Fórmula de cálculo para {selectedTruck.name}:</span>
      </div>
      <div className="pl-6 space-y-1">
        <p>• Distancia × {formatCurrency(selectedTruck.perKm)}/km (tarifa {selectedTruck.name})</p>
        <p>• Banderazo inicial {selectedTruck.name}: {formatCurrency(selectedTruck.flagDropFee)}</p>
        {requiresManeuver && (
          <p>• Cargo por maniobra {selectedTruck.name}: {formatCurrency(selectedTruck.maneuverCharge)}</p>
        )}
        {requiresInvoice && <p>• IVA: 16% del subtotal</p>}
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\CostHeader.tsx
import { ChevronDown, ChevronUp } from "lucide-react";
import { Button } from "@/components/ui/button";
import { formatCurrency } from "@/utils/priceCalculator";
import { motion } from "framer-motion";
import { TowTruckType } from "@/utils/towTruckPricing";

export interface CostHeaderProps {
  showBreakdown: boolean;
  setShowBreakdown: (show: boolean) => void;
  finalCost: number;
  truckType: "A" | "B" | "C" | "D";
  selectedTruck: TowTruckType;
}

export const CostHeader = ({
  showBreakdown,
  setShowBreakdown,
  finalCost,
  truckType,
  selectedTruck,
}: CostHeaderProps) => {
  return (
    <div className="flex justify-between items-center">
      <div>
        <h2 className="text-xl font-semibold text-gray-800">Costo Estimado</h2>
        <p className="text-sm text-gray-600">{selectedTruck.name} - {selectedTruck.capacity}</p>
      </div>
      <div className="flex items-center gap-4">
        <motion.div
          key={finalCost}
          initial={{ scale: 0.95, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className={`text-2xl font-bold ${truckType === 'D' ? 'text-orange-500' : 'text-primary'}`}
        >
          {formatCurrency(finalCost)}
        </motion.div>
        <Button
          variant="ghost"
          size="icon"
          onClick={() => setShowBreakdown(!showBreakdown)}
          className="hover:bg-primary/10"
        >
          {showBreakdown ? (
            <ChevronUp className="h-4 w-4" />
          ) : (
            <ChevronDown className="h-4 w-4" />
          )}
        </Button>
      </div>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\CostItemDisplay.tsx
import { motion } from "framer-motion";
import { formatCurrency } from "@/utils/priceCalculator";

interface CostItemDisplayProps {
  label: string;
  amount: number;
  icon?: React.ReactNode;
  indent?: boolean;
  description?: string;
  className?: string;
}

export const CostItemDisplay = ({
  label,
  amount,
  icon,
  indent = false,
  description,
  className = "",
}: CostItemDisplayProps) => {
  return (
    <motion.div 
      initial={{ opacity: 0, x: -20 }}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: 20 }}
      className={`flex flex-col gap-1 ${indent ? 'pl-4' : ''} ${className}`}
    >
      <div className="flex justify-between items-center text-sm text-gray-600">
        <div className="flex items-center gap-2">
          {icon}
          <span>{label}</span>
        </div>
        <span className="font-medium">{formatCurrency(amount)}</span>
      </div>
      {description && (
        <p className="text-xs text-gray-500 italic">{description}</p>
      )}
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\CostMetrics.tsx
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { TowTruckType } from "@/utils/towTruckPricing";
import { motion } from "framer-motion";

export interface CostMetricsProps {
  totalDistance: number;
  requiresInvoice: boolean;
  setRequiresInvoice: (requires: boolean) => void;
  requiresManeuver: boolean;
  onManeuverChange: (checked: boolean) => void;
  selectedTruck: TowTruckType;
}

export const CostMetrics = ({
  totalDistance,
  requiresInvoice,
  setRequiresInvoice,
  requiresManeuver,
  onManeuverChange,
  selectedTruck,
}: CostMetricsProps) => {
  return (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="grid grid-cols-1 md:grid-cols-2 gap-4"
    >
      <div className="flex items-center justify-between space-x-2 p-4 bg-white/50 rounded-lg">
        <Label htmlFor="invoice" className="text-sm">
          Requiere factura (IVA 16%)
          <span className="block text-xs text-gray-500">
            Para {selectedTruck.name}
          </span>
        </Label>
        <Switch
          id="invoice"
          checked={requiresInvoice}
          onCheckedChange={setRequiresInvoice}
        />
      </div>

      <div className="flex items-center justify-between space-x-2 p-4 bg-white/50 rounded-lg">
        <Label htmlFor="maneuver" className="text-sm">
          Requiere maniobra especial
          <span className="block text-xs text-gray-500">
            +{selectedTruck.maneuverCharge.toFixed(2)} MXN para {selectedTruck.name}
          </span>
        </Label>
        <Switch
          id="maneuver"
          checked={requiresManeuver}
          onCheckedChange={onManeuverChange}
        />
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\cost\TruckInfoHeader.tsx
import { Truck } from "lucide-react";
import { motion } from "framer-motion";
import { TowTruckType } from "@/utils/towTruckPricing";

interface TruckInfoHeaderProps {
  selectedTruck: TowTruckType;
  selectedVehicleModel: string;
}

export const TruckInfoHeader = ({ selectedTruck, selectedVehicleModel }: TruckInfoHeaderProps) => {
  return (
    <div className="space-y-2">
      <div className="text-lg font-semibold text-gray-800 flex items-center gap-2">
        <Truck className={`w-5 h-5 ${selectedTruck.name === 'Tipo D' ? 'text-orange-500' : 'text-primary'}`} />
        <span>{selectedTruck.name} - Capacidad: {selectedTruck.maxWeight.toLocaleString()} kg</span>
      </div>
      {selectedVehicleModel && (
        <motion.p 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-sm text-gray-600 ml-7"
        >
          Vehículo seleccionado: {selectedVehicleModel}
        </motion.p>
      )}
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\AddressFields.tsx
import { LocationSearch } from "./LocationSearch";
import { Card } from "@/components/ui/card";
import { MapPin, Navigation } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { getAddressFromCoordinates } from "@/services/geocodingService";
import { detectTollsOnRoute } from "@/utils/tollCalculator";
import { motion } from "framer-motion";
import { useToast } from "@/components/ui/use-toast";

interface AddressFieldsProps {
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
  pickupAddress: string;
  dropAddress: string;
  onPickupSelect: (location: { lat: number; lng: number; address: string }) => void;
  onDropSelect: (location: { lat: number; lng: number; address: string }) => void;
  onTollUpdate?: (tollCost: number) => void;
  onSelectingPickup: (selecting: boolean) => void;
  onSelectingDrop: (selecting: boolean) => void;
  className?: string;
}

export const AddressFields = ({
  pickupLocation,
  dropLocation,
  pickupAddress,
  dropAddress,
  onPickupSelect,
  onDropSelect,
  onTollUpdate,
  onSelectingPickup,
  onSelectingDrop,
  className = ""
}: AddressFieldsProps) => {
  const { toast } = useToast();

  const handleLocationSelect = async (location: { lat: number; lng: number; address: string }, type: 'pickup' | 'drop') => {
    try {
      if (type === 'pickup') {
        onPickupSelect(location);
        onSelectingPickup(false);
      } else {
        onDropSelect(location);
        onSelectingDrop(false);
      }

      if (pickupLocation && dropLocation) {
        const tollInfo = await detectTollsOnRoute(
          type === 'pickup' ? { lat: location.lat, lng: location.lng } : pickupLocation,
          type === 'drop' ? { lat: location.lat, lng: location.lng } : dropLocation
        );
        onTollUpdate?.(tollInfo.totalTollCost);

        if (tollInfo.tolls.length > 0) {
          toast({
            title: "Peajes detectados",
            description: `Se han detectado ${tollInfo.tolls.length} peajes en la ruta`,
          });
        }
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "No se pudo procesar la ubicación",
        variant: "destructive"
      });
    }
  };

  return (
    <Card className={`p-6 space-y-6 bg-gradient-to-br from-white/95 to-blue-50/95 border-blue-100 shadow-lg hover:shadow-xl transition-all duration-300 ${className}`}>
      <motion.div
        className="space-y-6"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <div className="relative">
          <div className="flex items-center justify-between gap-2 mb-4">
            <div className="flex items-center gap-2">
              <MapPin className="h-5 w-5 text-green-500" />
              <h3 className="font-semibold text-lg text-gray-800">Punto de Recogida</h3>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onSelectingPickup(true)}
              className="text-sm hover:bg-green-50 hover:text-green-600 transition-colors"
            >
              <MapPin className="h-4 w-4 mr-2 text-green-500" />
              Seleccionar en Mapa
            </Button>
          </div>
          <LocationSearch
            label=""
            placeholder="Ingrese dirección de recogida"
            currentAddress={pickupAddress}
            currentLocation={pickupLocation}
            onLocationSelect={(loc) => handleLocationSelect({ ...loc, address: loc.address }, 'pickup')}
            icon={<MapPin className="h-4 w-4 text-green-500" />}
          />
        </div>

        <Separator className="my-4" />

        <div className="relative">
          <div className="flex items-center justify-between gap-2 mb-4">
            <div className="flex items-center gap-2">
              <Navigation className="h-5 w-5 text-red-500" />
              <h3 className="font-semibold text-lg text-gray-800">Punto de Entrega</h3>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onSelectingDrop(true)}
              className="text-sm hover:bg-red-50 hover:text-red-600 transition-colors"
            >
              <Navigation className="h-4 w-4 mr-2 text-red-500" />
              Seleccionar en Mapa
            </Button>
          </div>
          <LocationSearch
            label=""
            placeholder="Ingrese dirección de entrega"
            currentAddress={dropAddress}
            currentLocation={dropLocation}
            onLocationSelect={(loc) => handleLocationSelect({ ...loc, address: loc.address }, 'drop')}
            icon={<Navigation className="h-4 w-4 text-red-500" />}
          />
        </div>
      </motion.div>
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\DownloadButtons.tsx
import { Button } from "@/components/ui/button";
import { Download, FileText } from "lucide-react";
import { downloadServiceInfo } from "@/utils/downloadUtils";

interface DownloadButtonsProps {
  onDownload: (format: 'csv' | 'txt') => Promise<void>;
}

export const DownloadButtons = ({ onDownload }: DownloadButtonsProps) => {
  return (
    <div className="flex gap-2 flex-1">
      <Button
        type="button"
        variant="outline"
        onClick={() => onDownload('csv')}
        className="flex-1 bg-gradient-to-r from-emerald-50 to-teal-50 border-emerald-200 hover:border-emerald-300 hover:bg-emerald-100 transition-all duration-300"
      >
        <Download className="w-4 h-4 mr-2 text-emerald-600" />
        CSV
      </Button>
      <Button
        type="button"
        variant="outline"
        onClick={() => onDownload('txt')}
        className="flex-1 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200 hover:border-blue-300 hover:bg-blue-100 transition-all duration-300"
      >
        <FileText className="w-4 h-4 mr-2 text-blue-600" />
        TXT
      </Button>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\EnhancedFormActions.tsx
import { Button } from "@/components/ui/button";
import { CreditCard, Copy, CheckCircle2 } from "lucide-react";
import { motion } from "framer-motion";

interface EnhancedFormActionsProps {
  onCopy: () => void;
  isCopied: boolean;
  isPending: boolean;
}

export const EnhancedFormActions = ({ onCopy, isCopied, isPending }: EnhancedFormActionsProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.6 }}
      className="space-y-4"
    >
      <div className="flex gap-2">
        <Button
          variant="outline"
          size="lg"
          onClick={onCopy}
          className="flex-1 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200 hover:border-blue-300 hover:bg-blue-100 transition-all duration-300 group relative overflow-hidden"
        >
          <span className="flex items-center justify-center gap-2">
            {isCopied ? (
              <CheckCircle2 className="h-5 w-5 text-green-500" />
            ) : (
              <Copy className="h-5 w-5 text-blue-500 group-hover:scale-110 transition-transform" />
            )}
            {isCopied ? "¡Copiado!" : "Copiar Información"}
          </span>
          <span className="absolute inset-0 bg-white/10 transform -skew-x-12 group-hover:translate-x-full transition-transform duration-700 ease-out" />
        </Button>
        <Button
          type="submit"
          size="lg"
          disabled={isPending}
          className="flex-1 bg-gradient-to-r from-primary to-primary-dark hover:from-primary-dark hover:to-primary text-white shadow-lg hover:shadow-xl transition-all duration-300 group relative overflow-hidden"
        >
          {isPending ? (
            <span className="flex items-center justify-center gap-3">
              <div className="w-5 h-5 border-3 border-white/30 border-t-white rounded-full animate-spin" />
              Procesando...
            </span>
          ) : (
            <span className="flex items-center justify-center gap-3">
              <CreditCard className="h-5 w-5 group-hover:scale-110 transition-transform" />
              Continuar al Pago
              <span className="absolute inset-0 bg-white/10 transform -skew-x-12 group-hover:translate-x-full transition-transform duration-700 ease-out" />
            </span>
          )}
        </Button>
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\EnhancedFormHeader.tsx
import { motion } from "framer-motion";
import { FileText, Info } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

export const EnhancedFormHeader = () => {
  return (
    <motion.div 
      className="space-y-4"
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-lg">
            <FileText className="w-6 h-6 text-primary" />
          </div>
          <div>
            <h2 className="text-2xl font-semibold text-gray-800">Información del Servicio</h2>
            <p className="text-gray-600 text-sm">Complete los detalles del vehículo y servicio requerido</p>
          </div>
        </div>
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <button className="p-2 hover:bg-gray-100 rounded-full transition-colors">
                <Info className="w-5 h-5 text-gray-500" />
              </button>
            </TooltipTrigger>
            <TooltipContent>
              <p>Todos los campos son requeridos para procesar su solicitud</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\LocationSearch.tsx
import { useState, useCallback } from "react";
import { useToast } from "@/hooks/use-toast";
import { debounce } from "lodash";
import { LocationSearchInput } from "./LocationSearchInput";
import { LocationSuggestions } from "./LocationSuggestions";
import { searchAddresses } from "@/services/geocodingService";
import { Loader2, AlertCircle } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Card } from "@/components/ui/card";
import { motion, AnimatePresence } from "framer-motion";

interface LocationSearchProps {
  label: string;
  onLocationSelect: (location: { lat: number; lng: number; address: string }) => void;
  placeholder?: string;
  currentAddress?: string;
  currentLocation?: { lat: number; lng: number } | null;
  icon?: React.ReactNode;
  type?: 'pickup' | 'drop';
  showCostBreakdown?: boolean;
}

export const LocationSearch = ({
  label,
  onLocationSelect,
  placeholder = "Search address...",
  currentAddress = "",
  currentLocation,
  icon,
  type = 'pickup',
  showCostBreakdown = false
}: LocationSearchProps) => {
  const [searchQuery, setSearchQuery] = useState(currentAddress || "");
  const [suggestions, setSuggestions] = useState<Array<{
    address: string;
    lat: number;
    lon: number;
    distance: number;
    city?: string;
    state?: string;
    zip?: string;
  }>>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isMarking, setIsMarking] = useState(false);
  const { toast } = useToast();

  const debouncedSearch = useCallback(
    debounce(async (query: string) => {
      if (query.length < 3) {
        setSuggestions([]);
        setError(null);
        return;
      }

      setIsSearching(true);
      setError(null);

      try {
        const results = await searchAddresses(query);
        setSuggestions(results.map(result => ({
          ...result,
          city: result.city || '',
          state: result.state || '',
          zip: result.zip || ''
        })));

        if (results.length === 0) {
          setError("No se encontraron direcciones. Intente con una búsqueda diferente.");
          toast({
            title: "Sin resultados",
            description: "Intente con términos de búsqueda diferentes",
            variant: "destructive",
            duration: 3000
          });
        }
      } catch (error) {
        setError("Error al buscar direcciones. Por favor, inténtelo de nuevo.");
        toast({
          title: "Error en la búsqueda",
          description: "No se pudieron obtener sugerencias de direcciones",
          variant: "destructive",
          duration: 5000
        });
      } finally {
        setIsSearching(false);
      }
    }, 300),
    [toast]
  );

  const handleSuggestionSelect = async (suggestion: { address: string; lat: number; lon: number }) => {
    setIsMarking(true);
    try {
      const location = {
        lat: suggestion.lat,
        lng: suggestion.lon,
        address: suggestion.address
      };

      setSearchQuery(suggestion.address);
      setSuggestions([]);
      setError(null);

      onLocationSelect(location);

      toast({
        title: type === 'pickup' ? "Punto de recogida seleccionado" : "Punto de entrega seleccionado",
        description: suggestion.address,
        duration: 5000,
        className: type === 'pickup' ? "bg-green-50 border-green-200" : "bg-blue-50 border-blue-200"
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Error al seleccionar la ubicación",
        variant: "destructive",
        duration: 7000
      });
    } finally {
      setIsMarking(false);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-2 relative"
    >
      <Card className="p-4 bg-white/95 backdrop-blur-sm shadow-md hover:shadow-lg transition-all duration-300">
        <LocationSearchInput
          searchQuery={searchQuery}
          isSearching={isSearching}
          error={error}
          onSearchChange={(value) => {
            setSearchQuery(value);
            if (value.length >= 3) {
              debouncedSearch(value);
            } else {
              setSuggestions([]);
              setError(null);
            }
          }}
          onSearchClick={() => debouncedSearch(searchQuery)}
          placeholder={placeholder}
          icon={icon}
        />

        {isSearching && (
          <div className="absolute right-3 top-3">
            <Loader2 className="h-5 w-5 animate-spin text-primary" />
          </div>
        )}

        <AnimatePresence>
          {error && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mt-2"
            >
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            </motion.div>
          )}
        </AnimatePresence>
      </Card>

      <LocationSuggestions
        suggestions={suggestions.map(suggestion => ({
          ...suggestion,
          formattedAddress: `${suggestion.address}, ${suggestion.city}, ${suggestion.state}, ${suggestion.zip}`
        }))}
        error={error}
        isMarking={isMarking}
        onSuggestionSelect={handleSuggestionSelect}
        type={type}
      />
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\LocationSearchInput.tsx
import { Input } from '@/components/ui/input'
import { Search, Loader2, MapPin } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { motion, AnimatePresence } from 'framer-motion'

export interface SuggestionType {
  id: string
  formattedAddress: string
  name: string
  lat: number
  lon: number
  city?: string
  state?: string
  zip?: string
}

interface LocationSearchInputProps {
  searchQuery: string
  isSearching: boolean
  error: string
  suggestions: SuggestionType[]
  onSearchChange: (value: string) => void
  onSearchClick: () => Promise<void>
  handleSuggestionSelect: (suggestion: SuggestionType) => void
  placeholder?: string
  icon?: React.ReactNode
}

export const LocationSearchInput = ({
  searchQuery,
  isSearching,
  error,
  suggestions,
  onSearchChange,
  onSearchClick,
  handleSuggestionSelect,
  placeholder = "Buscar dirección...",
  icon = <MapPin className="h-4 w-4 text-primary" />
}: LocationSearchInputProps) => {
  return (
    <motion.div
      className="relative"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <div className="relative flex items-center group">
        <div className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 transition-colors group-hover:text-primary/70">
          {icon}
        </div>
        <Input
          value={searchQuery}
          onChange={(e) => onSearchChange(e.target.value)}
          placeholder={placeholder}
          className={`
            pl-10 pr-10 h-12 bg-white/95 backdrop-blur-sm 
            border-gray-200 hover:border-primary/50 focus:border-primary
            focus:ring-2 focus:ring-primary/20 
            placeholder:text-gray-400 transition-all duration-200
            ${error ? 'border-red-300 focus:border-red-400 focus:ring-red-200' : ''}
            ${isSearching ? 'pr-16' : ''}
          `}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              e.preventDefault();
              onSearchClick();
            }
          }}
          disabled={isSearching}
        />
        <AnimatePresence>
          {isSearching ? (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="absolute right-3 top-1/2 -translate-y-1/2"
            >
              <Loader2 className="h-5 w-5 animate-spin text-primary" />
            </motion.div>
          ) : (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              className="absolute right-1 top-1/2 -translate-y-1/2 h-8 hover:bg-primary/10 transition-colors"
              onClick={onSearchClick}
              disabled={isSearching || searchQuery.length < 3}
            >
              <Search className="h-4 w-4 text-primary" />
            </Button>
          )}
        </AnimatePresence>
      </div>
      <AnimatePresence>
        {error && (
          <motion.p
            className="text-sm text-red-500 mt-1 ml-1"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
          >
            {error}
          </motion.p>
        )}
      </AnimatePresence>
      {suggestions.length > 1 && (
        <div className="space-y-2 mt-4">
          <h4>Did you mean:</h4>
          {suggestions.map((suggestion, idx) => (
            <button
              key={idx}
              onClick={() => handleSuggestionSelect(suggestion)}
              className="block text-left p-2 hover:bg-gray-100 rounded"
            >
              {suggestion.formattedAddress}
            </button>
          ))}
        </div>
      )}
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\LocationSelector.tsx
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
} from '@/components/ui/form'
import { UseFormReturn } from 'react-hook-form'
import { FormData } from '@/types/form'
import { LocationSearch } from './LocationSearch'
import { MapPin, Navigation } from 'lucide-react'
import { motion } from 'framer-motion'
import { useToast } from '@/hooks/use-toast'
import { useTowing } from '@/contexts/TowingContext'
import { Card } from '@/components/ui/card'

export interface LocationSelectorProps {
  form: UseFormReturn<FormData>;
  pickupLocation?: { lat: number; lng: number } | null;
  dropLocation?: { lat: number; lng: number } | null;
  pickupAddress?: string;
  dropAddress?: string;
  onPickupSelect?: (location: { lat: number; lng: number; address: string }) => void;
  onDropSelect?: (location: { lat: number; lng: number; address: string }) => void;
  onSelectingPickup?: (selecting: boolean) => void;
  onSelectingDrop?: (selecting: boolean) => void;
}

export const LocationSelector = ({
  form,
  pickupLocation,
  dropLocation,
  pickupAddress,
  dropAddress,
  onPickupSelect,
  onDropSelect,
  onSelectingPickup,
  onSelectingDrop
}: LocationSelectorProps) => {
  const { toast } = useToast();
  const { updateLocation } = useTowing();

  const handleLocationUpdate = (location: { lat: number; lng: number; address: string }, type: 'pickup' | 'drop') => {
    updateLocation(type, location);
    const handler = type === 'pickup' ? onPickupSelect : onDropSelect;
    handler?.(location);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="w-full space-y-6"
    >
      <Card className="p-6 bg-white/95 backdrop-blur-sm border-0 shadow-lg rounded-2xl overflow-hidden">
        <div className="space-y-6">
          <FormField
            control={form.control}
            name="pickupLocation"
            render={() => (
              <FormItem className="relative">
                <div className="absolute left-0 top-1/2 -translate-y-1/2 w-1 h-16 bg-green-500 rounded-r-full" />
                <div className="pl-6">
                  <FormLabel className="text-lg font-semibold flex items-center gap-2 text-gray-800">
                    <MapPin className="h-5 w-5 text-green-500" />
                    Punto de Recogida
                  </FormLabel>
                  <FormControl>
                    <LocationSearch
                      label="Ubicación de Recogida"
                      placeholder="¿Dónde está tu vehículo?"
                      icon={<MapPin className="h-4 w-4 text-green-500" />}
                      currentAddress={pickupAddress}
                      currentLocation={pickupLocation}
                      onLocationSelect={(loc) => handleLocationUpdate(loc, 'pickup')}
                      type="pickup"
                    />
                  </FormControl>
                </div>
              </FormItem>
            )}
          />

          <div className="relative">
            <div className="absolute left-3 top-1/2 -translate-y-1/2 w-[2px] h-12 bg-gray-200" />
          </div>

          <FormField
            control={form.control}
            name="dropoffLocation"
            render={() => (
              <FormItem className="relative">
                <div className="absolute left-0 top-1/2 -translate-y-1/2 w-1 h-16 bg-blue-500 rounded-r-full" />
                <div className="pl-6">
                  <FormLabel className="text-lg font-semibold flex items-center gap-2 text-gray-800">
                    <Navigation className="h-5 w-5 text-blue-500" />
                    Punto de Entrega
                  </FormLabel>
                  <FormControl>
                    <LocationSearch
                      label="Ubicación de Entrega"
                      placeholder="¿A dónde llevamos tu vehículo?"
                      icon={<Navigation className="h-4 w-4 text-blue-500" />}
                      currentAddress={dropAddress}
                      currentLocation={dropLocation}
                      onLocationSelect={(loc) => handleLocationUpdate(loc, 'drop')}
                      type="drop"
                    />
                  </FormControl>
                </div>
              </FormItem>
            )}
          />
        </div>
      </Card>
    </motion.div>
  )
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\LocationSuggestions.tsx
import { motion, AnimatePresence } from "framer-motion";
import { MapPin, Target, Loader2, Navigation } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { AlertCircle } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

interface Suggestion {
  address: string;
  lat: number;
  lon: number;
  distance: number;
}

interface LocationSuggestionsProps {
  suggestions: Suggestion[];
  error: string | null;
  isMarking: boolean;
  onSuggestionSelect: (suggestion: Suggestion) => void;
  type?: 'pickup' | 'drop';
}

export const LocationSuggestions = ({
  suggestions,
  error,
  isMarking,
  onSuggestionSelect,
  type = 'pickup'
}: LocationSuggestionsProps) => {
  return (
    <AnimatePresence>
      {error && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
        >
          <Alert variant="destructive" className="mt-2">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </motion.div>
      )}

      {suggestions.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          className="absolute z-50 w-full mt-1"
        >
          <Card className="p-2 space-y-1 bg-white/95 backdrop-blur-sm shadow-lg border-blue-100/50">
            {suggestions.map((suggestion, index) => (
              <motion.div key={index}>
                <motion.button
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.05 }}
                  className="w-full p-3 text-left hover:bg-primary/5 rounded-lg flex items-center gap-3 
                           transition-all duration-300 group relative"
                  onClick={() => onSuggestionSelect(suggestion)}
                  disabled={isMarking}
                >
                  {isMarking ? (
                    <Target className="h-4 w-4 text-primary animate-pulse flex-shrink-0" />
                  ) : type === 'pickup' ? (
                    <MapPin className="h-4 w-4 text-green-500 group-hover:text-green-600 flex-shrink-0" />
                  ) : (
                    <Navigation className="h-4 w-4 text-blue-500 group-hover:text-blue-600 flex-shrink-0" />
                  )}

                  <div className="flex flex-col flex-1">
                    <span className="text-sm text-gray-700 group-hover:text-gray-900 line-clamp-2">
                      {suggestion.address}
                    </span>
                    <div className="flex items-center gap-2 mt-1">
                      <Badge variant="secondary" className="text-xs">
                        {suggestion.distance.toFixed(1)}km de Nuevo León
                      </Badge>
                    </div>
                  </div>

                  {isMarking && (
                    <motion.div
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      className="absolute inset-0 bg-primary/5 flex items-center justify-center rounded-lg"
                    >
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                    </motion.div>
                  )}
                </motion.button>
                <MapContainer
                  center={[suggestion.lat, suggestion.lon]}
                  zoom={13}
                  scrollWheelZoom={false}
                  className="h-64 mt-2 rounded-lg"
                >
                  <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution='© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                  />
                  <Marker position={[suggestion.lat, suggestion.lon]}>
                    <Popup>{suggestion.address}</Popup>
                  </Marker>
                </MapContainer>
              </motion.div>
            ))}
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\ManeuverField.tsx
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { Card } from "@/components/ui/card";

interface ManeuverFieldProps {
  form: UseFormReturn<FormData>;
  onManeuverChange?: () => void;
}

export const ManeuverField = ({ form, onManeuverChange }: ManeuverFieldProps) => {
  return (
    <Card className="p-4 space-y-4">
      <FormField
        control={form.control}
        name="issueDescription"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-base font-semibold">Descripción del Problema</FormLabel>
            <FormControl>
              <Textarea
                placeholder="Describa el problema o situación especial del vehículo (ej: no enciende, llanta ponchada, etc.)"
                className="min-h-[100px] resize-none"
                {...field}
                onChange={(e) => {
                  field.onChange(e);
                  if (e.target.value.length > 0) {
                    form.setValue("requiresManeuver", true);
                    onManeuverChange?.();
                  }
                }}
              />
            </FormControl>
          </FormItem>
        )}
      />
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\ServiceRequirements.tsx
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { Wrench } from "lucide-react";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { motion } from "framer-motion";

export interface ServiceRequirementsProps {
  form: UseFormReturn<FormData>;
  requiresManeuver?: boolean;
  onManeuverChange?: (checked: boolean) => void;
}

export const ServiceRequirements = ({ 
  form,
  requiresManeuver,
  onManeuverChange 
}: ServiceRequirementsProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="space-y-4"
    >
      <div className="flex items-center gap-2 text-lg font-semibold text-gray-700">
        <Wrench className="w-5 h-5 text-primary animate-spin-slow" />
        <h2>Requerimientos del Servicio</h2>
      </div>

      <FormField
        control={form.control}
        name="issueDescription"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-gray-700 font-medium">Descripción del Problema</FormLabel>
            <FormControl>
              <Textarea
                {...field}
                value={field.value || ''}
                placeholder="Por favor, proporcione información detallada sobre el problema de su vehículo."
                className="bg-white/80 border-gray-300 focus:ring-2 ring-primary/20 min-h-[120px] text-gray-800 resize-none"
              />
            </FormControl>
            <FormMessage className="text-sm text-red-500 mt-1" />
          </FormItem>
        )}
      />
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\TowTruckSelector.tsx
import { useEffect } from "react";
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { towTruckTypes, getTruckTypeForVehicle } from "@/utils/towTruckPricing";
import { Truck, AlertTriangle } from "lucide-react";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { motion } from "framer-motion";
import { useTowing } from "@/contexts/TowingContext";
import { useToast } from "@/hooks/use-toast";

interface TowTruckSelectorProps {
  form: UseFormReturn<FormData>;
  onTruckTypeChange?: (type: "A" | "B" | "C" | "D") => void;
  onTollFeesChange?: (fees: number) => void;
  selectedModel: string;
}

export const TowTruckSelector = ({ 
  form, 
  onTruckTypeChange, 
  onTollFeesChange, 
  selectedModel 
}: TowTruckSelectorProps) => {
  const { updateTruckType } = useTowing();
  const { toast } = useToast();

  useEffect(() => {
    if (selectedModel) {
      const recommendedType = getTruckTypeForVehicle(selectedModel);
      form.setValue('truckType', recommendedType);
      onTruckTypeChange?.(recommendedType);
      updateTruckType(recommendedType);
      
      const truckInfo = towTruckTypes[recommendedType];
      toast({
        title: "Tipo de grúa recomendado",
        description: `Se ha seleccionado ${truckInfo.name} para ${selectedModel} (capacidad: ${truckInfo.maxWeight.toLocaleString()} kg)`,
        duration: 5000,
      });
    }
  }, [selectedModel, form, onTruckTypeChange, updateTruckType]);

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="space-y-4"
    >
      <FormField
        control={form.control}
        name="truckType"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-lg font-semibold flex items-center gap-2">
              <Truck className="w-5 h-5 text-primary" />
              Tipo de Grúa
            </FormLabel>
            <FormControl>
              <RadioGroup
                onValueChange={(value) => {
                  const truckType = value as "A" | "B" | "C" | "D";
                  field.onChange(truckType);
                  onTruckTypeChange?.(truckType);
                  updateTruckType(truckType);
                  
                  const selectedTruckInfo = towTruckTypes[truckType];
                  toast({
                    title: `${selectedTruckInfo.name} seleccionada`,
                    description: `Capacidad máxima: ${selectedTruckInfo.maxWeight.toLocaleString()} kg - Tarifa: ${selectedTruckInfo.perKm.toFixed(2)} MXN/km`,
                  });
                }}
                value={field.value}
                className="flex flex-col space-y-3"
              >
                {Object.entries(towTruckTypes).map(([key, type]) => (
                  <motion.div
                    key={key}
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.2, delay: Number(key.charCodeAt(0) - 65) * 0.1 }}
                    className="flex items-center space-x-3 p-3 rounded-lg hover:bg-primary/5 transition-colors"
                  >
                    <RadioGroupItem value={key} id={key} className="border-primary" />
                    <div className="flex items-center gap-2">
                      <Truck className={`w-5 h-5 ${key === 'D' ? 'text-orange-500' : 'text-primary'}`} />
                      <span className="font-medium">
                        {type.name} (hasta {type.maxWeight.toLocaleString()}kg)
                      </span>
                    </div>
                  </motion.div>
                ))}
              </RadioGroup>
            </FormControl>
          </FormItem>
        )}
      />
      <div className="flex items-center gap-2 p-3 bg-yellow-50/50 rounded-lg text-sm text-yellow-700">
        <AlertTriangle className="w-4 h-4" />
        <p>El tipo de grúa se recomienda según el modelo del vehículo seleccionado</p>
      </div>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\UserInfoFields.tsx
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";

interface UserInfoFieldsProps {
  form: UseFormReturn<FormData>;
}

export const UserInfoFields = ({ form }: UserInfoFieldsProps) => {
  return (
    <div className="space-y-6">
      <FormField
        control={form.control}
        name="userName"
        render={({ field }) => (
          <FormItem>
            <FormLabel>User Name</FormLabel>
            <FormControl>
              <Input {...field} placeholder="Enter your name" />
            </FormControl>
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="phone"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Phone Number</FormLabel>
            <FormControl>
              <Input {...field} type="tel" placeholder="Enter your phone number" />
            </FormControl>
          </FormItem>
        )}
      />
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleBasicFields.tsx
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { VehicleDetails } from "./VehicleDetails";

interface VehicleBasicFieldsProps {
  form: UseFormReturn<FormData>;
  onVehicleModelChange: (value: string) => void;
}

export const VehicleBasicFields = ({ form, onVehicleModelChange }: VehicleBasicFieldsProps) => {
  return (
    <div className="space-y-6">
      <VehicleDetails
        onBrandChange={(brand) => {
          form.setValue("vehicleMake", brand);
        }}
        onModelChange={(model) => {
          form.setValue("vehicleModel", model);
          onVehicleModelChange(model);
        }}
        onYearChange={(year) => {
          form.setValue("vehicleYear", year);
        }}
        onColorChange={(color) => {
          form.setValue("vehicleColor", color);
        }}
      />
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleDetails.tsx
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Input } from "@/components/ui/input";

interface VehicleDetailsProps {
  onBrandChange: (brand: string) => void;
  onModelChange: (model: string) => void;
  onYearChange: (year: string) => void;
  onColorChange: (color: string) => void;
}

export const VehicleDetails = ({
  onBrandChange,
  onModelChange,
  onYearChange,
  onColorChange,
}: VehicleDetailsProps) => {
  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label className="text-sm font-medium">Marca del Vehículo</label>
          <Input
            placeholder="Ej: Toyota"
            onChange={(e) => onBrandChange(e.target.value)}
            className="mt-1"
          />
        </div>
        <div>
          <label className="text-sm font-medium">Modelo</label>
          <Input
            placeholder="Ej: Corolla"
            onChange={(e) => onModelChange(e.target.value)}
            className="mt-1"
          />
        </div>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label className="text-sm font-medium">Año</label>
          <Input
            placeholder="Ej: 2020"
            onChange={(e) => onYearChange(e.target.value)}
            className="mt-1"
          />
        </div>
        <div>
          <label className="text-sm font-medium">Color</label>
          <Input
            placeholder="Ej: Rojo"
            onChange={(e) => onColorChange(e.target.value)}
            className="mt-1"
          />
        </div>
      </div>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleFormActions.tsx
import { Button } from "@/components/ui/button";
import { CopyButton } from "@/components/ui/copy-button";
import { Download, CreditCard } from "lucide-react";

interface VehicleFormActionsProps {
  onDownload: (format: 'csv' | 'txt') => Promise<void>;
  onCopy: () => void;
  onSubmit: () => void;
  isPending: boolean;
  formData: string;
}

export const VehicleFormActions = ({ 
  onDownload, 
  onCopy, 
  onSubmit, 
  isPending,
  formData 
}: VehicleFormActionsProps) => {
  return (
    <div className="flex flex-wrap gap-4">
      <Button
        type="button"
        variant="outline"
        onClick={() => onDownload('csv')}
        className="flex-1 bg-gradient-to-r from-emerald-50 to-teal-50"
      >
        <Download className="w-4 h-4 mr-2" />
        CSV
      </Button>
      <Button
        type="button"
        variant="outline"
        onClick={() => onDownload('txt')}
        className="flex-1 bg-gradient-to-r from-blue-50 to-indigo-50"
      >
        <Download className="w-4 h-4 mr-2" />
        TXT
      </Button>
      <CopyButton
        text={formData}
        onCopy={onCopy}
        className="flex-1 bg-white hover:bg-gray-50"
      />
      <Button
        type="submit"
        disabled={isPending}
        onClick={onSubmit}
        className="flex-1 bg-gradient-to-r from-blue-600 to-indigo-600"
      >
        {isPending ? (
          <span className="flex items-center gap-2">
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
            Procesando...
          </span>
        ) : (
          <span className="flex items-center gap-2">
            <CreditCard className="h-4 w-4" />
            Continuar al Pago
          </span>
        )}
      </Button>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleFormCopyButton.tsx
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { useTowing } from "@/contexts/TowingContext";
import { EnhancedFormActions } from "./EnhancedFormActions";

interface VehicleFormCopyButtonProps {
  form: UseFormReturn<FormData>;
  pickupAddress?: string;
  dropAddress?: string;
  pickupLocation?: { lat: number; lng: number } | null;
  dropLocation?: { lat: number; lng: number } | null;
  isPending: boolean;
}

export const VehicleFormCopyButton = ({
  form,
  pickupAddress,
  dropAddress,
  pickupLocation,
  dropLocation,
  isPending
}: VehicleFormCopyButtonProps) => {
  const [isCopied, setIsCopied] = useState(false);
  const { toast } = useToast();
  const { tollInfo } = useTowing();

  const handleCopyInfo = () => {
    const formData = form.getValues();
    const info = `
📋 DETALLES DEL SERVICIO DE GRÚA
══════════════════════════════

👤 INFORMACIÓN DEL CLIENTE
------------------------
• Nombre: ${formData.userName}
• Teléfono: ${formData.phone}

🚗 DETALLES DEL VEHÍCULO
------------------------
• Marca: ${formData.vehicleMake}
• Modelo: ${formData.vehicleModel}
• Año: ${formData.vehicleYear}
• Color: ${formData.vehicleColor}

📍 UBICACIONES
------------------------
• Punto de Recogida: ${pickupAddress || "No especificado"}
  Coordenadas: ${pickupLocation ? `${pickupLocation.lat}, ${pickupLocation.lng}` : "No especificado"}

• Punto de Entrega: ${dropAddress || "No especificado"}
  Coordenadas: ${dropLocation ? `${dropLocation.lat}, ${dropLocation.lng}` : "No especificado"}

🔧 DETALLES DEL SERVICIO
------------------------
• Tipo de Grúa: ${formData.truckType}
• Descripción del Problema:
${formData.issueDescription || "No especificado"}

💰 INFORMACIÓN DE COSTOS
------------------------
• Peajes en Ruta: ${tollInfo?.totalTollCost ? `$${tollInfo.totalTollCost}` : "No hay peajes"}
• Cantidad de Peajes: ${tollInfo?.tolls?.length || 0}

Generado automáticamente - ${new Date().toLocaleString()}
    `;

    navigator.clipboard.writeText(info).then(() => {
      setIsCopied(true);
      toast({
        title: "Información Copiada",
        description: "Los detalles del servicio han sido copiados al portapapeles",
      });
      setTimeout(() => setIsCopied(false), 2000);
    });
  };

  return (
    <EnhancedFormActions
      onCopy={handleCopyInfo}
      isCopied={isCopied}
      isPending={isPending}
    />
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleFormFields.tsx
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { Card } from "@/components/ui/card";
import { motion } from "framer-motion";
import { UserInfoFields } from "./UserInfoFields";
import { VehicleBasicFields } from "./VehicleBasicFields";
import { ManeuverField } from "./ManeuverField";
import { TowTruckSelector } from "./TowTruckSelector";

interface VehicleFormFieldsProps {
  form: UseFormReturn<FormData>;
  onVehicleModelChange: (value: string) => void;
  onTruckTypeChange: (value: "A" | "B" | "C" | "D") => void;
}

export const VehicleFormFields = ({
  form,
  onVehicleModelChange,
  onTruckTypeChange
}: VehicleFormFieldsProps) => {
  return (
    <>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <Card className="p-6 bg-gradient-to-br from-white/95 to-blue-50/30 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="space-y-6">
            <UserInfoFields form={form} />
            <VehicleBasicFields 
              form={form}
              onVehicleModelChange={onVehicleModelChange}
            />
            <ManeuverField form={form} />
          </div>
        </Card>
      </motion.div>

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
      >
        <Card className="p-6 bg-gradient-to-br from-white/95 to-blue-50/30 shadow-lg hover:shadow-xl transition-all duration-300">
          <TowTruckSelector
            form={form}
            selectedModel={form.watch("vehicleModel")}
            onTruckTypeChange={onTruckTypeChange}
          />
        </Card>
      </motion.div>
    </>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleFormHeader.tsx
import { motion } from "framer-motion";

export const VehicleFormHeader = () => {
  return (
    <motion.div 
      className="mb-6"
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <h2 className="text-2xl font-semibold text-gray-800 mb-2">Información del Servicio</h2>
      <p className="text-gray-600">Complete los detalles del vehículo y servicio requerido</p>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\form\VehicleSelector.tsx
import { FormField, FormItem, FormLabel, FormControl } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Car } from "lucide-react";
import { UseFormReturn } from "react-hook-form";
import { FormData } from "@/types/form";
import { motion } from "framer-motion";

export interface VehicleSelectorProps {
  form: UseFormReturn<FormData>;
  onVehicleModelChange: (value: string) => void;
}

export const VehicleSelector = ({ form, onVehicleModelChange }: VehicleSelectorProps) => {
  const vehicles = [
    { value: "sedan", label: "Sedán" },
    { value: "suv", label: "SUV" },
    { value: "pickup", label: "Pickup" },
    { value: "van", label: "Van" },
    { value: "truck", label: "Camión" },
  ];

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="space-y-4"
    >
      <FormField
        control={form.control}
        name="vehicleModel"
        render={({ field }) => (
          <FormItem>
            <FormLabel className="text-lg font-semibold flex items-center gap-2">
              <Car className="w-5 h-5 text-primary" />
              Tipo de Vehículo
            </FormLabel>
            <FormControl>
              <Select
                onValueChange={(value) => {
                  field.onChange(value);
                  onVehicleModelChange(value);
                }}
                defaultValue={field.value}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Selecciona el tipo de vehículo" />
                </SelectTrigger>
                <SelectContent>
                  {vehicles.map((vehicle) => (
                    <SelectItem key={vehicle.value} value={vehicle.value}>
                      {vehicle.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </FormControl>
          </FormItem>
        )}
      />
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\legal\PrivacyPolicy.tsx
import { Card } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";

export const PrivacyPolicy = () => {
  return (
    <Card className="p-6 max-w-4xl mx-auto bg-white/95 backdrop-blur-sm">
      <ScrollArea className="h-[70vh] pr-4">
        <div className="space-y-6">
          <h2 className="text-2xl font-bold text-primary">Aviso de Privacidad</h2>
          
          <section className="space-y-4">
            <h3 className="text-lg font-semibold">1. Identidad y Domicilio del Responsable</h3>
            <p className="text-gray-600">
              [Nombre de la Empresa], con domicilio en [Dirección completa], es responsable del tratamiento de sus datos personales.
            </p>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">2. Datos Personales Recopilados</h3>
            <p className="text-gray-600">
              Para la prestación de nuestros servicios de grúa, recopilamos los siguientes datos personales:
            </p>
            <ul className="list-disc pl-6 text-gray-600 space-y-2">
              <li>Nombre completo</li>
              <li>Dirección</li>
              <li>Teléfono de contacto</li>
              <li>Correo electrónico</li>
              <li>Información del vehículo (marca, modelo, año)</li>
              <li>Ubicación GPS para el servicio</li>
            </ul>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">3. Finalidad del Tratamiento de los Datos</h3>
            <p className="text-gray-600">Sus datos personales son utilizados para:</p>
            <ul className="list-disc pl-6 text-gray-600 space-y-2">
              <li>Prestación del servicio de grúa solicitado</li>
              <li>Facturación y cobro</li>
              <li>Seguimiento del servicio</li>
              <li>Comunicación sobre el estado del servicio</li>
              <li>Mejora de nuestros servicios</li>
            </ul>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">4. Transferencia de Datos</h3>
            <p className="text-gray-600">
              Sus datos personales pueden ser compartidos con:
            </p>
            <ul className="list-disc pl-6 text-gray-600 space-y-2">
              <li>Operadores de grúas para la prestación del servicio</li>
              <li>Proveedores de servicios de facturación</li>
              <li>Autoridades competentes cuando sea requerido por ley</li>
            </ul>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">5. Derechos ARCO</h3>
            <p className="text-gray-600">
              Usted tiene derecho a conocer qué datos personales tenemos de usted, para qué los utilizamos y las condiciones del uso que les damos (Acceso). Asimismo, es su derecho solicitar la corrección de su información personal en caso de que esté desactualizada, sea inexacta o incompleta (Rectificación); que la eliminemos de nuestros registros o bases de datos cuando considere que la misma no está siendo utilizada conforme a los principios, deberes y obligaciones previstas en la normativa (Cancelación); así como oponerse al uso de sus datos personales para fines específicos (Oposición).
            </p>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">6. Medidas de Seguridad</h3>
            <p className="text-gray-600">
              Implementamos diversas medidas de seguridad técnicas, administrativas y físicas para proteger sus datos personales, incluyendo encriptación de datos, acceso restringido a la información y políticas internas de privacidad.
            </p>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">7. Uso de Cookies</h3>
            <p className="text-gray-600">
              Utilizamos cookies y otras tecnologías de seguimiento para mejorar su experiencia en nuestro sitio web, recordar sus preferencias y entender cómo interactúan los usuarios con nuestro servicio.
            </p>
          </section>

          <section className="space-y-4">
            <h3 className="text-lg font-semibold">8. Cambios al Aviso de Privacidad</h3>
            <p className="text-gray-600">
              Nos reservamos el derecho de efectuar en cualquier momento modificaciones o actualizaciones al presente aviso de privacidad. Cualquier modificación será notificada a través de nuestro sitio web.
            </p>
          </section>
        </div>
      </ScrollArea>
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\legal\TermsAndConditions.tsx
import { Card } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useRef } from "react";

export const TermsAndConditions = () => {
  const scrollRef = useRef(null);

  const scrollToTop = () => {
    if (scrollRef.current) {
      scrollRef.current.scrollTo({ top: 0, behavior: "smooth" });
    }
  };

  const scrollToSection = (sectionId) => {
    const section = document.getElementById(sectionId);
    if (section) {
      section.scrollIntoView({ behavior: "smooth" });
    }
  };

  return (
    <Card className="p-6 max-w-4xl mx-auto bg-white/95 backdrop-blur-sm shadow-lg rounded-lg">
      <ScrollArea ref={scrollRef} className="h-[70vh] pr-4">
        <div className="space-y-6">

          {/* Navigation Links */}
          <nav className="space-y-2 mb-4">
            <p className="font-semibold text-gray-700">Ir a:</p>
            <ul className="list-disc pl-6 text-blue-600 space-y-1">
              <li><button onClick={() => scrollToSection("acceptance")} className="underline">1. Aceptación de los Términos</button></li>
              <li><button onClick={() => scrollToSection("special-maneuvers")} className="underline">2. Maniobras Especiales y Cargos Adicionales</button></li>
              <li><button onClick={() => scrollToSection("cancellation")} className="underline">3. Política de Cancelación y Reembolsos</button></li>
              <li><button onClick={() => scrollToSection("client-responsibilities")} className="underline">4. Responsabilidades del Cliente</button></li>
              <li><button onClick={() => scrollToSection("liability")} className="underline">5. Limitación de Responsabilidad</button></li>
              <li><button onClick={() => scrollToSection("modifications")} className="underline">6. Modificaciones</button></li>
              <li><button onClick={() => scrollToSection("applicable-law")} className="underline">7. Ley Aplicable</button></li>
            </ul>
          </nav>

          <h2 className="text-2xl font-bold text-primary" id="title">Términos y Condiciones del Servicio</h2>

          {/* Section 1 */}
          <section className="space-y-4" aria-labelledby="acceptance" id="acceptance">
            <h3 className="text-lg font-semibold">1. Aceptación de los Términos</h3>
            <p className="text-gray-600">
              Al utilizar nuestros servicios de grúa, usted acepta estos términos y condiciones en su totalidad. Si no está de acuerdo con estos términos, por favor no utilice nuestros servicios.
            </p>
          </section>

          {/* Section 2 */}
          <section className="space-y-4 bg-yellow-50/50 p-4 rounded-lg border border-yellow-200" aria-labelledby="special-maneuvers" id="special-maneuvers">
            <h3 className="text-lg font-semibold text-yellow-800">2. Maniobras Especiales y Cargos Adicionales</h3>
            <div className="space-y-2 text-gray-700">
              <p><strong>2.1.</strong> El cliente tiene la obligación de informar correctamente sobre la necesidad de maniobras especiales al momento de solicitar el servicio.</p>
              <p><strong>2.2.</strong> En caso de que el cliente no haya declarado la necesidad de maniobras especiales al momento de la solicitud:</p>
              <ul className="list-disc pl-6 space-y-2">
                <li>La empresa se reserva el derecho de cobrar el cargo adicional por maniobra en el lugar del servicio.</li>
                <li>El cargo por maniobra especial deberá ser liquidado en su totalidad antes de realizar el servicio.</li>
                <li>El cliente acepta que este cargo adicional es independiente del monto inicial cotizado.</li>
              </ul>
            </div>
          </section>

          {/* Section 3 */}
          <section className="space-y-4 bg-red-50/50 p-4 rounded-lg border border-red-200" aria-labelledby="cancellation" id="cancellation">
            <h3 className="text-lg font-semibold text-red-800">3. Política de Cancelación y Reembolsos</h3>
            <div className="space-y-2 text-gray-700">
              <p><strong>3.1.</strong> Una vez realizado el pago del servicio:</p>
              <ul className="list-disc pl-6 space-y-2">
                <li>No se realizarán reembolsos por cancelación del servicio.</li>
                <li>El monto pagado no es transferible a otros servicios.</li>
                <li>La empresa no está obligada a reprogramar el servicio sin costo adicional.</li>
              </ul>
              <p><strong>3.2.</strong> Esta política aplica tanto al cargo base como a cualquier cargo adicional por maniobras especiales.</p>
            </div>
          </section>

          {/* Section 4 */}
          <section className="space-y-4" aria-labelledby="client-responsibilities" id="client-responsibilities">
            <h3 className="text-lg font-semibold">4. Responsabilidades del Cliente</h3>
            <div className="space-y-2 text-gray-600">
              <p>El cliente se compromete a:</p>
              <ul className="list-disc pl-6 space-y-2">
                <li>Proporcionar información precisa sobre la ubicación y estado del vehículo.</li>
                <li>Informar sobre cualquier condición especial que pueda requerir maniobras adicionales.</li>
                <li>Estar presente durante el servicio o designar un representante autorizado.</li>
                <li>Realizar el pago acordado según los términos establecidos.</li>
              </ul>
            </div>
          </section>

          {/* Section 5 */}
          <section className="space-y-4" aria-labelledby="liability" id="liability">
            <h3 className="text-lg font-semibold">5. Limitación de Responsabilidad</h3>
            <p className="text-gray-600">La empresa no se hace responsable por:</p>
            <ul className="list-disc pl-6 text-gray-600 space-y-2">
              <li>Daños preexistentes en el vehículo.</li>
              <li>Retrasos causados por condiciones fuera de nuestro control.</li>
              <li>Costos adicionales derivados de información incorrecta proporcionada por el cliente.</li>
            </ul>
          </section>

          {/* Section 6 */}
          <section className="space-y-4" aria-labelledby="modifications" id="modifications">
            <h3 className="text-lg font-semibold">6. Modificaciones</h3>
            <p className="text-gray-600">
              Nos reservamos el derecho de modificar estos términos y condiciones en cualquier momento. Los cambios entrarán en vigor inmediatamente después de su publicación.
            </p>
          </section>

          {/* Section 7 */}
          <section className="space-y-4" aria-labelledby="applicable-law" id="applicable-law">
            <h3 className="text-lg font-semibold">7. Ley Aplicable</h3>
            <p className="text-gray-600">
              Estos términos y condiciones se rigen por las leyes de México. Cualquier disputa será resuelta en los tribunales competentes de la jurisdicción correspondiente.
            </p>
          </section>
        </div>
      </ScrollArea>

      {/* Back to Top Button */}
      <button
        onClick={scrollToTop}
        className="fixed bottom-6 right-6 bg-primary text-white p-3 rounded-full shadow-md hover:bg-primary-dark"
        aria-label="Scroll back to top"
      >
        ↑
      </button>
    </Card>
  );
};



// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\BorderControls.tsx
import { useMap } from "react-leaflet";

export const BorderControls = () => {
  const map = useMap();

  return (
    <div className="absolute inset-0 pointer-events-none">
      <button 
        className="absolute top-0 left-0 w-full h-12 opacity-0 cursor-n-resize pointer-events-auto touch-pan-up"
        onClick={() => map?.panBy([0, -50])}
      />
      <button 
        className="absolute bottom-0 left-0 w-full h-12 opacity-0 cursor-s-resize pointer-events-auto touch-pan-down"
        onClick={() => map?.panBy([0, 50])}
      />
      <button 
        className="absolute top-0 left-0 h-full w-12 opacity-0 cursor-w-resize pointer-events-auto touch-pan-left"
        onClick={() => map?.panBy([-50, 0])}
      />
      <button 
        className="absolute top-0 right-0 h-full w-12 opacity-0 cursor-e-resize pointer-events-auto touch-pan-right"
        onClick={() => map?.panBy([50, 0])}
      />
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\DraggableMarker.tsx
import L from "leaflet";
import { Marker, Popup } from "react-leaflet";
import { useEffect, useRef } from "react";

interface DraggableMarkerProps {
  position: L.LatLngExpression;
  onDragEnd: (latlng: L.LatLng) => void;
  icon?: L.Icon;
  label: string;
  draggable?: boolean;
}

export const DraggableMarker = ({ 
  position, 
  onDragEnd, 
  icon, 
  label,
  draggable = true 
}: DraggableMarkerProps) => {
  const markerRef = useRef<L.Marker>(null);

  useEffect(() => {
    if (markerRef.current) {
      markerRef.current.setLatLng(position as L.LatLng);
    }
  }, [position]);

  const handleDragEnd = (e: L.DragEndEvent) => {
    const marker = e.target;
    onDragEnd(marker.getLatLng());
  };

  return (
    <Marker 
      position={position} 
      draggable={draggable}
      icon={icon}
      eventHandlers={{
        dragend: handleDragEnd,
      }}
      ref={markerRef}
    >
      <Popup>
        <div className="font-semibold">{label}</div>
      </Popup>
    </Marker>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\FloatingPanel.tsx
import { ReactNode, useState } from "react";
import { cn } from "@/lib/utils";
import { ChevronUp, ChevronDown, X, GripVertical, Maximize2, Minimize2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import Draggable from "react-draggable";
import { useToast } from "@/hooks/use-toast";

interface FloatingPanelProps {
  children: ReactNode;
  className?: string;
  position?: "left" | "right" | "top" | "bottom";
  title?: string;
}

export const FloatingPanel = ({ 
  children, 
  className, 
  position = "right",
  title = "Panel" 
}: FloatingPanelProps) => {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isVisible, setIsVisible] = useState(true);
  const [isDragging, setIsDragging] = useState(false);
  const [isMaximized, setIsMaximized] = useState(false);
  const { toast } = useToast();

  const handleDragStart = () => {
    setIsDragging(true);
    toast({
      title: "Panel móvil",
      description: "Puedes mover este panel a cualquier parte de la pantalla",
      duration: 2000,
    });
  };

  const handleDragStop = () => {
    setIsDragging(false);
  };

  if (!isVisible) {
    return (
      <Button
        variant="secondary"
        size="sm"
        onClick={() => setIsVisible(true)}
        className={cn(
          "fixed z-[1000] bg-white/95 shadow-lg backdrop-blur-sm",
          "transition-all duration-300 ease-in-out hover:scale-105",
          position === "right" && "right-4 top-20",
          position === "left" && "left-4 top-20",
          position === "top" && "top-4 right-4",
          position === "bottom" && "bottom-4 right-4"
        )}
      >
        <Maximize2 className="w-4 h-4 mr-2" />
        Mostrar {title}
      </Button>
    );
  }

  return (
    <Draggable
      handle=".drag-handle"
      onStart={handleDragStart}
      onStop={handleDragStop}
      bounds="parent"
      disabled={isMaximized}
    >
      <div className={cn(
        "fixed bg-white/95 rounded-lg shadow-xl backdrop-blur-sm transition-all duration-300",
        isMaximized ? "inset-4 !transform-none" : cn(
          position === "right" && "right-6 top-24",
          position === "left" && "left-6 top-24",
          position === "top" && "top-6 inset-x-6",
          position === "bottom" && "bottom-6 inset-x-6",
        ),
        "z-[1000]",
        isDragging && "cursor-grabbing shadow-2xl scale-[1.02]",
        !isMaximized && "hover:shadow-lg hover:shadow-primary/5",
        className
      )}>
        <div className={cn(
          "flex items-center justify-between p-3 border-b",
          "bg-gradient-to-r from-primary/5 to-primary/10",
          "rounded-t-lg"
        )}>
          <div className="flex items-center gap-2">
            {!isMaximized && (
              <div className="drag-handle cursor-grab active:cursor-grabbing p-1.5 hover:bg-primary/10 rounded-md">
                <GripVertical className="h-4 w-4 text-primary/70" />
              </div>
            )}
            <h3 className="font-semibold text-sm text-primary/90">{title}</h3>
          </div>
          <div className="flex gap-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsCollapsed(!isCollapsed)}
              className="p-1.5 h-8 w-8 hover:bg-primary/10"
            >
              {isCollapsed ? 
                <ChevronUp className="h-4 w-4 text-primary/70" /> : 
                <ChevronDown className="h-4 w-4 text-primary/70" />
              }
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMaximized(!isMaximized)}
              className="p-1.5 h-8 w-8 hover:bg-primary/10"
            >
              {isMaximized ? 
                <Minimize2 className="h-4 w-4 text-primary/70" /> : 
                <Maximize2 className="h-4 w-4 text-primary/70" />
              }
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                setIsVisible(false);
                toast({
                  title: "Panel oculto",
                  description: "Haz clic en 'Mostrar Panel' para restaurar",
                  duration: 2000,
                });
              }}
              className="p-1.5 h-8 w-8 hover:bg-primary/10"
            >
              <X className="h-4 w-4 text-primary/70" />
            </Button>
          </div>
        </div>
        <div className={cn(
          "transition-all duration-300 overflow-hidden",
          isCollapsed ? "h-0" : isMaximized ? "p-6" : "p-4",
          !isCollapsed && "animate-in fade-in-50"
        )}>
          {children}
        </div>
      </div>
    </Draggable>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\LocationMarker.tsx
import { useMapEvents } from "react-leaflet";
import { useToast } from "@/hooks/use-toast";

interface LocationMarkerProps {
  onLocationSelect: (location: { lat: number; lng: number }) => void;
  selectingPickup: boolean;
  selectingDrop: boolean;
}

export const LocationMarker = ({ 
  onLocationSelect, 
  selectingPickup, 
  selectingDrop 
}: LocationMarkerProps) => {
  const { toast } = useToast();

  useMapEvents({
    click(e) {
      if (selectingPickup || selectingDrop) {
        onLocationSelect(e.latlng);
        toast({
          title: `${selectingPickup ? 'Pickup' : 'Drop-off'} Location Set`,
          description: "Location has been successfully set on the map",
          duration: 3000,
        });
      }
    },
  });

  return null;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapBottomControls.tsx
import { Button } from "@/components/ui/button";
import { Truck } from "lucide-react";
import { cn } from "@/lib/utils";

interface MapBottomControlsProps {
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
  onRequestTow: () => void;
}

export const MapBottomControls = ({
  pickupLocation,
  dropLocation,
  onRequestTow
}: MapBottomControlsProps) => {
  const hasLocations = pickupLocation && dropLocation;

  return (
    <div className="max-w-2xl mx-auto">
      <Button 
        className={cn(
          "w-full bg-gradient-to-r from-primary via-blue-600 to-primary",
          "hover:from-primary/90 hover:to-primary/90 text-white",
          "shadow-lg hover:shadow-xl transition-all duration-300",
          "py-4 sm:py-6 text-base sm:text-lg font-semibold",
          "group relative overflow-hidden",
          "active:scale-[0.98]",
          !hasLocations && "opacity-70 cursor-not-allowed"
        )}
        onClick={onRequestTow}
        disabled={!hasLocations}
        aria-label="Request tow truck service"
      >
        <span className="absolute inset-0 bg-white/10 transform -skew-x-12 
                     group-hover:translate-x-full transition-transform duration-700 ease-out" />
        <span className="relative flex items-center justify-center gap-2">
          <Truck className="w-5 h-5 sm:w-6 sm:h-6 flex-shrink-0 animate-pulse" />
          <span className="hidden sm:inline">Solicitar Grúa</span>
          <span className="sm:hidden">Solicitar</span>
        </span>
      </Button>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapContainer.tsx
import { memo, useEffect, useRef, useMemo, useCallback } from "react";
import { MapContainer, TileLayer, useMap } from "react-leaflet";
import { DraggableMarker } from "./DraggableMarker";
import { RoutePolyline } from "./RoutePolyline";
import { MapLocationHandler } from "./MapLocationHandler";
import { enterpriseIcon, pickupIcon, dropIcon } from "@/utils/mapUtils";
import { COMPANY_LOCATION } from "@/services/routeService";
import { Marker, Popup } from "react-leaflet";
import { getAddressFromCoordinates } from "@/services/geocodingService";
import { LatLngTuple, LatLngBounds } from "leaflet";
import { useToast } from "@/hooks/use-toast";

interface Location {
  lat: number;
  lng: number;
}

interface MapUpdaterProps {
  pickupLocation: Location | null;
  dropLocation: Location | null;
}

const MapUpdater = memo(({ pickupLocation, dropLocation }: MapUpdaterProps) => {
  const map = useMap();
  const { toast } = useToast();
  const lastToastTime = useRef(0);

  useEffect(() => {
    const now = Date.now();
    if (pickupLocation && dropLocation) {
      const bounds = new LatLngBounds(
        [pickupLocation.lat, pickupLocation.lng],
        [dropLocation.lat, dropLocation.lng]
      );
      map.fitBounds(bounds, { padding: [50, 50] });
      
      if (now - lastToastTime.current > 3000) {
        toast({
          title: "Ruta actualizada",
          description: "El mapa se ha ajustado para mostrar la ruta completa",
        });
        lastToastTime.current = now;
      }
    } else if (pickupLocation) {
      map.setView([pickupLocation.lat, pickupLocation.lng], 15);
    } else if (dropLocation) {
      map.setView([dropLocation.lat, dropLocation.lng], 15);
    }
  }, [map, pickupLocation, dropLocation, toast]);

  return null;
});

MapUpdater.displayName = 'MapUpdater';

interface MapContainerComponentProps {
  pickupLocation: Location | null;
  dropLocation: Location | null;
  selectingPickup: boolean;
  selectingDrop: boolean;
  onLocationSelect: (location: Location) => void;
  setPickupLocation: (location: Location | null) => void;
  setDropLocation: (location: Location | null) => void;
  onRouteCalculated: (distance: number) => void;
  isLoading?: boolean;
}

export const MapContainerComponent = memo(({
  pickupLocation,
  dropLocation,
  selectingPickup,
  selectingDrop,
  onLocationSelect,
  setPickupLocation,
  setDropLocation,
  onRouteCalculated,
  isLoading = false
}: MapContainerComponentProps) => {
  const { toast } = useToast();
  const lastToastTime = useRef(0);
  
  const handleLocationSelect = useCallback(async (location: Location) => {
    try {
      const now = Date.now();
      const address = await getAddressFromCoordinates(location.lat, location.lng);
      
      if (now - lastToastTime.current > 3000) {
        toast({
          title: selectingPickup ? "Punto de recogida seleccionado" : "Punto de entrega seleccionado",
          description: address,
          duration: 3000,
        });
        lastToastTime.current = now;
      }
      
      onLocationSelect(location);
    } catch (error) {
      const now = Date.now();
      if (now - lastToastTime.current > 3000) {
        toast({
          title: "Error",
          description: "No se pudo obtener la dirección",
          variant: "destructive",
          duration: 3000,
        });
        lastToastTime.current = now;
      }
    }
  }, [onLocationSelect, selectingPickup, toast]);

  const handleMarkerDragEnd = useCallback(async (latlng: L.LatLng, type: 'pickup' | 'drop') => {
    const location = { lat: latlng.lat, lng: latlng.lng };
    if (type === 'pickup') {
      setPickupLocation(location);
    } else {
      setDropLocation(location);
    }
    await handleLocationSelect(location);
  }, [handleLocationSelect, setPickupLocation, setDropLocation]);

  const defaultPosition: LatLngTuple = [25.6866, -100.3161];

  return (
    <MapContainer
      center={defaultPosition}
      zoom={13}
      className="w-full h-full rounded-lg shadow-lg"
      zoomControl={false}
    >
      <TileLayer
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        className="brightness-95"
      />
      
      <MapLocationHandler
        selectingPickup={selectingPickup}
        selectingDrop={selectingDrop}
        handleLocationSelect={handleLocationSelect}
      />

      <MapUpdater pickupLocation={pickupLocation} dropLocation={dropLocation} />

      <Marker 
        position={[COMPANY_LOCATION.lat, COMPANY_LOCATION.lng]} 
        icon={enterpriseIcon}
      >
        <Popup className="rounded-lg shadow-lg">
          <div className="font-semibold">Empresa de Grúas</div>
          <div className="text-sm text-gray-600">Ubicación Principal</div>
        </Popup>
      </Marker>

      {pickupLocation && (
        <DraggableMarker
          position={[pickupLocation.lat, pickupLocation.lng]}
          onDragEnd={(latlng) => handleMarkerDragEnd(latlng, 'pickup')}
          icon={pickupIcon}
          label="Punto de Recogida"
          draggable={!isLoading}
        />
      )}

      {dropLocation && (
        <DraggableMarker
          position={[dropLocation.lat, dropLocation.lng]}
          onDragEnd={(latlng) => handleMarkerDragEnd(latlng, 'drop')}
          icon={dropIcon}
          label="Punto de Entrega"
          draggable={!isLoading}
        />
      )}

      {pickupLocation && dropLocation && (
        <RoutePolyline
          pickupLocation={pickupLocation}
          dropLocation={dropLocation}
          onRouteCalculated={onRouteCalculated}
        />
      )}
    </MapContainer>
  );
});

MapContainerComponent.displayName = 'MapContainerComponent';


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapControlPanel.tsx
import { MapControls } from "./MapControls";
import { RouteStreetInfo } from "./RouteStreetInfo";
import { showLocationNotification } from "@/utils/notificationUtils";
import { motion } from "framer-motion";
import { Card } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";

interface MapControlPanelProps {
  selectingPickup: boolean;
  selectingDrop: boolean;
  setSelectingPickup: (value: boolean) => void;
  setSelectingDrop: (value: boolean) => void;
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
  pickupAddress?: string;
  dropAddress?: string;
  isLoading?: boolean;
}

export const MapControlPanel = ({
  selectingPickup,
  selectingDrop,
  setSelectingPickup,
  setSelectingDrop,
  pickupLocation,
  dropLocation,
  pickupAddress,
  dropAddress,
  isLoading = false,
}: MapControlPanelProps) => {
  const { toast } = useToast();

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      className="fixed top-4 left-0 right-0 px-4 sm:px-6 flex flex-col items-center gap-6 pointer-events-auto max-w-3xl mx-auto w-full z-10"
    >
      <ScrollArea className="w-full max-h-[calc(100vh-6rem)] overflow-visible">
        <Card className="relative w-full bg-white/95 backdrop-blur-sm shadow-lg rounded-xl p-4 sm:p-6 border-blue-100/50 hover:shadow-xl transition-all duration-300">
          {isLoading && (
            <div className="absolute inset-0 bg-white/50 backdrop-blur-sm flex items-center justify-center z-50 rounded-xl">
              <Loader2 className="w-6 h-6 animate-spin text-primary" />
            </div>
          )}
          <MapControls
            selectingPickup={selectingPickup}
            selectingDrop={selectingDrop}
            onPickupClick={() => {
              setSelectingPickup(true);
              setSelectingDrop(false);
              showLocationNotification('pickup', { lat: 0, lng: 0 });
              toast({
                title: "Seleccionando punto de recogida",
                description: "Haz clic en el mapa para seleccionar el punto de recogida"
              });
            }}
            onDropClick={() => {
              setSelectingDrop(true);
              setSelectingPickup(false);
              showLocationNotification('drop', { lat: 0, lng: 0 });
              toast({
                title: "Seleccionando punto de entrega",
                description: "Haz clic en el mapa para seleccionar el punto de entrega"
              });
            }}
          />
        </Card>

        {(pickupLocation || dropLocation) && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            className="w-full mt-4"
          >
            <RouteStreetInfo
              pickupLocation={pickupLocation}
              dropLocation={dropLocation}
              pickupAddress={pickupAddress}
              dropAddress={dropAddress}
              isLoading={isLoading}
            />
          </motion.div>
        )}
      </ScrollArea>
    </motion.div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapControls.tsx
import { Button } from "@/components/ui/button";
import { MapPin, Navigation } from "lucide-react";
import { cn } from "@/lib/utils";

interface MapControlsProps {
  selectingPickup: boolean;
  selectingDrop: boolean;
  onPickupClick: () => void;
  onDropClick: () => void;
}

export const MapControls = ({ 
  selectingPickup, 
  selectingDrop, 
  onPickupClick, 
  onDropClick 
}: MapControlsProps) => {
  return (
    <div className="flex flex-col sm:flex-row gap-4">
      <Button 
        variant={selectingPickup ? "secondary" : "outline"}
        onClick={onPickupClick}
        className={cn(
          "flex-1 flex items-center justify-center gap-3 h-14 text-base font-medium",
          "bg-white/95 backdrop-blur-sm border border-gray-200",
          "hover:bg-primary/10 hover:border-primary/50",
          "active:scale-[0.98] transition-all duration-200",
          "shadow-sm hover:shadow-md",
          selectingPickup && "bg-primary/10 border-primary text-primary"
        )}
      >
        <MapPin className={cn(
          "w-5 h-5 transition-colors",
          selectingPickup ? "text-primary" : "text-gray-600"
        )} />
        Seleccionar Punto de Recogida
      </Button>
      <Button 
        variant={selectingDrop ? "secondary" : "outline"}
        onClick={onDropClick}
        className={cn(
          "flex-1 flex items-center justify-center gap-3 h-14 text-base font-medium",
          "bg-white/95 backdrop-blur-sm border border-gray-200",
          "hover:bg-primary/10 hover:border-primary/50",
          "active:scale-[0.98] transition-all duration-200",
          "shadow-sm hover:shadow-md",
          selectingDrop && "bg-primary/10 border-primary text-primary"
        )}
      >
        <Navigation className={cn(
          "w-5 h-5 transition-colors",
          selectingDrop ? "text-primary" : "text-gray-600"
        )} />
        Seleccionar Punto de Entrega
      </Button>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapHeader.tsx
import React, { useState } from 'react';
import { Truck, MapPin, Phone, Menu } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";

export const MapHeader = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="absolute inset-x-0 top-0 z-50 bg-gradient-to-r from-white/95 via-blue-50/95 to-white/95 shadow-lg backdrop-blur-sm border-b border-blue-100">
      <nav className="px-4 sm:px-6 py-4 max-w-7xl mx-auto flex items-center justify-between">
        <div className="flex items-center gap-2 sm:gap-3">
          <div className="bg-primary/10 p-2 sm:p-2.5 rounded-xl shadow-inner">
            <Truck className="w-6 h-6 sm:w-7 sm:h-7 text-primary" />
          </div>
          <div>
            <h1 className="text-xl sm:text-2xl font-bold bg-gradient-to-r from-primary to-blue-700 bg-clip-text text-transparent">
              Tow Truck Service
            </h1>
            <p className="text-xs sm:text-sm text-gray-600">Professional Assistance 24/7</p>
          </div>
        </div>
        
        <div className="sm:hidden">
          <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild>
              <Button 
                variant="ghost" 
                size="icon"
                className="relative z-50"
                aria-label="Open menu"
              >
                <Menu className="h-6 w-6" />
              </Button>
            </SheetTrigger>
            <SheetContent 
              side="right" 
              className="w-[300px] sm:w-[400px] z-[60]"
              onOpenAutoFocus={(e) => e.preventDefault()}
            >
              <div className="flex flex-col gap-4 mt-6">
                <div className="flex items-center gap-2 bg-green-50 px-4 py-3 rounded-full border border-green-200 shadow-sm">
                  <MapPin className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium text-green-700">Available in your area</span>
                </div>
                <div className="flex items-center gap-2 bg-blue-50 px-4 py-3 rounded-full border border-blue-200 shadow-sm">
                  <Phone className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium text-blue-700">24/7 Support</span>
                </div>
              </div>
            </SheetContent>
          </Sheet>
        </div>

        <div className="hidden sm:flex items-center gap-4">
          <div className="flex items-center gap-2 bg-green-50 px-4 py-2 rounded-full border border-green-200 shadow-sm">
            <MapPin className="w-4 h-4 text-green-600" />
            <span className="text-sm font-medium text-green-700">Available in your area</span>
          </div>
          <div className="flex items-center gap-2 bg-blue-50 px-4 py-2 rounded-full border border-blue-200 shadow-sm">
            <Phone className="w-4 h-4 text-blue-600" />
            <span className="text-sm font-medium text-blue-700">24/7 Support</span>
          </div>
        </div>
      </nav>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapLayout.tsx
import { ReactNode } from "react";

interface MapLayoutProps {
  children: ReactNode;
}

export const MapLayout = ({ children }: MapLayoutProps) => {
  return (
    <div className="relative h-screen w-full overflow-hidden bg-gradient-to-br from-gray-50 to-gray-100">
      <div className="absolute inset-0 bg-grid-pattern opacity-5" />
      <div className="relative h-full w-full lg:pl-96 transition-all duration-300">
        {children}
      </div>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapLocationHandler.tsx
import { useMapEvents } from "react-leaflet";
import { getAddressFromCoordinates } from "@/services/geocodingService";
import { useToast } from "@/hooks/use-toast";
import { useCallback } from "react";

interface MapLocationHandlerProps {
  selectingPickup: boolean;
  selectingDrop: boolean;
  handleLocationSelect: (location: { lat: number; lng: number }) => void;
}

export const MapLocationHandler = ({
  selectingPickup,
  selectingDrop,
  handleLocationSelect
}: MapLocationHandlerProps) => {
  const { toast } = useToast();

  const handleClick = useCallback(async (e: L.LeafletMouseEvent) => {
    if (selectingPickup || selectingDrop) {
      const location = {
        lat: e.latlng.lat,
        lng: e.latlng.lng
      };
      
      handleLocationSelect(location);
    }
  }, [selectingPickup, selectingDrop, handleLocationSelect]);

  useMapEvents({
    click: handleClick,
  });

  return null;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\MapMetrics.tsx
import { MapPin, Navigation } from "lucide-react";

interface MapMetricsProps {
  distance: number;
  price: number;
}

export const MapMetrics = ({ distance, price }: MapMetricsProps) => {
  return (
    <div className="flex justify-between items-center">
      <div className="flex items-center gap-2">
        <MapPin className="text-green-500" />
        <span className="font-semibold">Distance:</span> {distance.toFixed(2)} km
      </div>
      <div className="flex items-center gap-2">
        <Navigation className="text-primary" />
        <span className="font-semibold">Estimated Cost:</span> ${price}
      </div>
    </div>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\RouteDisplay.tsx
import { Card } from "@/components/ui/card";
import { Route, Shield } from "lucide-react";
import { useTowing } from "@/contexts/TowingContext";

interface RouteDisplayProps {
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
}

export const RouteDisplay = ({ pickupLocation, dropLocation }: RouteDisplayProps) => {
  const { totalDistance } = useTowing();

  if (!pickupLocation || !dropLocation) return null;

  return (
    <Card className="p-4 space-y-4 bg-gradient-to-br from-white/95 via-blue-50/95 to-white/95 backdrop-blur-md shadow-xl border border-blue-100/50">
      <div className="flex items-center gap-3 py-2">
        <Route className="w-4 h-4 text-gray-500" />
        <div>
          <p className="text-xs font-medium text-gray-900">Total Distance</p>
          <p className="text-base font-semibold text-primary">
            {totalDistance ? totalDistance.toFixed(2) : '0.00'} km
          </p>
        </div>
      </div>
    </Card>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\RoutePolyline.tsx
import { useEffect, useState } from "react";
import { Polyline } from "react-leaflet";
import { decode } from "@mapbox/polyline";
import { showRouteNotification } from "@/utils/notificationUtils";
import { useTowing } from "@/contexts/TowingContext";
import { getRouteDetails } from "@/services/routeService";
import { COMPANY_LOCATION } from "@/utils/priceCalculator";
import { useToast } from "@/hooks/use-toast";

interface RoutePolylineProps {
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
  onRouteCalculated?: (distance: number) => void;
}

export const RoutePolyline = ({ pickupLocation, dropLocation, onRouteCalculated }: RoutePolylineProps) => {
  const [companyToPickupRoute, setCompanyToPickupRoute] = useState<[number, number][]>([]);
  const [pickupToDropRoute, setPickupToDropRoute] = useState<[number, number][]>([]);
  const [dropToCompanyRoute, setDropToCompanyRoute] = useState<[number, number][]>([]);
  const { updateTowingInfo } = useTowing();
  const { toast } = useToast();

  useEffect(() => {
    const fetchRoutes = async () => {
      if (pickupLocation && dropLocation) {
        try {
          // Calculate route from company to pickup
          const companyToPickup = await getRouteDetails(COMPANY_LOCATION, pickupLocation);
          setCompanyToPickupRoute(decode(companyToPickup.geometry).map(([lat, lng]) => [lat, lng]));

          // Calculate route from pickup to drop
          const pickupToDrop = await getRouteDetails(pickupLocation, dropLocation);
          setPickupToDropRoute(decode(pickupToDrop.geometry).map(([lat, lng]) => [lat, lng]));

          // Calculate route from drop back to company
          const dropToCompany = await getRouteDetails(dropLocation, COMPANY_LOCATION);
          setDropToCompanyRoute(decode(dropToCompany.geometry).map(([lat, lng]) => [lat, lng]));

          // Calculate total distance including return to company
          const totalDistance = 
            companyToPickup.distance + 
            pickupToDrop.distance + 
            dropToCompany.distance;

          // Update global towing context with total distance
          updateTowingInfo(totalDistance);
          onRouteCalculated?.(totalDistance);
          showRouteNotification(totalDistance);
        } catch (error) {
          console.error('Error calculating routes:', error);
          toast({
            title: "Error al calcular la ruta",
            description: error instanceof Error ? error.message : "Por favor, intente nuevamente en unos segundos",
            variant: "destructive",
          });
        }
      }
    };

    fetchRoutes();
  }, [pickupLocation, dropLocation, onRouteCalculated, updateTowingInfo, toast]);

  return (
    <>
      {companyToPickupRoute.length > 0 && (
        <Polyline 
          positions={companyToPickupRoute} 
          color="blue" 
          weight={3} 
          dashArray="10, 10" 
          opacity={0.7}
        />
      )}
      {pickupToDropRoute.length > 0 && (
        <Polyline 
          positions={pickupToDropRoute} 
          color="green" 
          weight={3} 
          opacity={0.9}
        />
      )}
      {dropToCompanyRoute.length > 0 && (
        <Polyline 
          positions={dropToCompanyRoute} 
          color="red" 
          weight={3} 
          dashArray="10, 10" 
          opacity={0.7}
        />
      )}
    </>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\map\RouteStreetInfo.tsx
import { Card } from "@/components/ui/card";
import { MapPin, Navigation, Loader2 } from "lucide-react";
import Draggable from "react-draggable";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";
import { useRef } from "react";

interface RouteStreetInfoProps {
  pickupLocation: { lat: number; lng: number } | null;
  dropLocation: { lat: number; lng: number } | null;
  pickupAddress?: string;
  dropAddress?: string;
  isLoading?: boolean;
}

export const RouteStreetInfo = ({ 
  pickupLocation, 
  dropLocation,
  pickupAddress,
  dropAddress,
  isLoading = false
}: RouteStreetInfoProps) => {
  const { toast } = useToast();
  const nodeRef = useRef(null);

  if (!pickupLocation && !dropLocation) return null;

  return (
    <Draggable
      handle=".drag-handle"
      bounds="parent"
      nodeRef={nodeRef}
    >
      <div ref={nodeRef} className="absolute z-[1000] max-w-md">
        <Card className={cn(
          "p-4 space-y-3 bg-white/95 backdrop-blur-sm shadow-lg transition-all duration-300",
          "hover:shadow-xl border-blue-100/50"
        )}>
          <div className="flex items-center justify-between border-b pb-2 mb-2 drag-handle cursor-move">
            <div className="font-semibold text-sm text-primary/90">Detalles de Ubicación</div>
            {isLoading && <Loader2 className="w-4 h-4 animate-spin text-primary" />}
          </div>
          
          {pickupLocation && (
            <div className="flex items-start gap-2">
              <MapPin className="w-5 h-5 mt-1 text-green-500 flex-shrink-0" />
              <div className="flex-1">
                <div className="font-semibold text-sm">Punto de Recogida</div>
                <div className="text-sm text-gray-600 break-words">
                  {pickupAddress || "Cargando dirección..."}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  Coordenadas: {pickupLocation.lat.toFixed(6)}, {pickupLocation.lng.toFixed(6)}
                </div>
              </div>
            </div>
          )}
          
          {dropLocation && (
            <div className="flex items-start gap-2">
              <Navigation className="w-5 h-5 mt-1 text-red-500 flex-shrink-0" />
              <div className="flex-1">
                <div className="font-semibold text-sm">Punto de Entrega</div>
                <div className="text-sm text-gray-600 break-words">
                  {dropAddress || "Cargando dirección..."}
                </div>
                <div className="text-xs text-gray-500 mt-1">
                  Coordenadas: {dropLocation.lat.toFixed(6)}, {dropLocation.lng.toFixed(6)}
                </div>
              </div>
            </div>
          )}
        </Card>
      </div>
    </Draggable>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\payment\PaymentWindow.tsx
import React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import { CreditCard, Calendar, CheckCircle, Shield } from "lucide-react";
import { cn } from "@/lib/utils";
import { processPayment, validatePaymentDetails } from "@/utils/paymentProcessor";

interface PaymentWindowProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentSubmit?: (result: { success: boolean; error?: string }) => void;
  amount: number;
}

const PaymentWindow = ({ isOpen, onClose, onPaymentSubmit, amount = 0 }: PaymentWindowProps) => {
  const stripe = useStripe();
  const elements = useElements();
  const { toast } = useToast();
  const [isProcessing, setIsProcessing] = React.useState(false);
  const [cardComplete, setCardComplete] = React.useState(false);

  React.useEffect(() => {
    if (isOpen) {
      setCardComplete(false);
    }
  }, [isOpen]);

  const handleClose = () => {
    if (isProcessing) {
      toast({
        title: "Pago en Proceso",
        description: "Por favor, espere mientras procesamos su pago",
        variant: "destructive",
      });
      return;
    }
    onClose();
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!cardComplete) {
      toast({
        title: "Datos Incompletos",
        description: "Por favor, complete todos los datos de la tarjeta",
        variant: "destructive",
      });
      return;
    }

    setIsProcessing(true);

    if (!stripe || !elements) {
      toast({
        title: "Error",
        description: "Sistema de pago no disponible. Intente más tarde.",
        variant: "destructive",
      });
      setIsProcessing(false);
      return;
    }

    const cardElement = elements.getElement(CardElement);
    if (!validatePaymentDetails(cardElement)) {
      setIsProcessing(false);
      return;
    }

    try {
      const { error, paymentMethod } = await stripe.createPaymentMethod({
        type: 'card',
        card: cardElement,
      });

      if (error) {
        throw error;
      }

      const result = await processPayment(amount);

      if (result.success) {
        toast({
          title: "Pago Exitoso",
          description: `Transacción completada. ID: ${result.transactionId}`,
        });
        onPaymentSubmit?.({ success: true });
        onClose();
      } else {
        throw new Error(result.error);
      }
    } catch (err: any) {
      toast({
        title: "Error en el Pago",
        description: err.message || "Ocurrió un error al procesar el pago",
        variant: "destructive",
      });
      onPaymentSubmit?.({ success: false, error: err.message });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md bg-gradient-to-br from-white to-gray-50 border-gray-200">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-xl font-semibold">
            <CreditCard className="w-5 h-5 text-primary" />
            Pago Seguro
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="space-y-4">
            <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
              <CardElement 
                onChange={(e) => setCardComplete(e.complete)}
                options={{
                  style: {
                    base: {
                      fontSize: '16px',
                      color: '#424770',
                      '::placeholder': {
                        color: '#aab7c4',
                      },
                    },
                    invalid: {
                      color: '#9e2146',
                    },
                  },
                  hidePostalCode: true,
                }}
              />
            </div>

            <div className="flex items-center justify-between text-sm text-gray-600">
              <span className="flex items-center gap-1.5">
                <Shield className="w-4 h-4" />
                Encriptación SSL Segura
              </span>
              <span className="flex items-center gap-1.5">
                <Calendar className="w-4 h-4" />
                {new Date().toLocaleDateString()}
              </span>
            </div>

            <div className="flex items-center justify-between px-2">
              <span className="text-sm text-gray-600">Cargo por Servicio</span>
              <span className="text-lg font-semibold text-primary">
                ${amount.toFixed(2)}
              </span>
            </div>
          </div>

          <div className="flex gap-3 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={isProcessing}
              className="border-gray-300 hover:bg-gray-100"
            >
              Cancelar
            </Button>
            <Button
              type="submit"
              disabled={!stripe || isProcessing || !cardComplete}
              className={cn(
                "bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary text-white min-w-[120px]",
                isProcessing && "opacity-80"
              )}
            >
              {isProcessing ? (
                <span className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  Procesando...
                </span>
              ) : (
                <span className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4" />
                  Pagar ${amount.toFixed(2)}
                </span>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default PaymentWindow;


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\accordion.tsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\alert-dialog.tsx
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\aspect-ratio.tsx
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\avatar.tsx
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\breadcrumb.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        metallic: "metallic-effect text-gray-800 hover:scale-105 transition-transform duration-200",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\calendar.tsx
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\carousel.tsx
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\chart.tsx
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\checkbox.tsx
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\collapsible.tsx
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\command.tsx
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\context-menu.tsx
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\copy-button.tsx
import { Button } from "@/components/ui/button";
import { Copy, Check } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";

interface CopyButtonProps {
  text: string;
  onCopy?: () => void;
  className?: string;
}

export const CopyButton = ({ text, onCopy, className }: CopyButtonProps) => {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      toast({
        title: "Copiado",
        description: "La información ha sido copiada al portapapeles",
      });
      onCopy?.();
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Error",
        description: "No se pudo copiar al portapapeles",
        variant: "destructive",
      });
    }
  };

  return (
    <Button
      variant="outline"
      size="sm"
      className={className}
      onClick={handleCopy}
    >
      {copied ? (
        <Check className="h-4 w-4 text-green-500" />
      ) : (
        <Copy className="h-4 w-4" />
      )}
      <span className="ml-2">{copied ? "Copiado" : "Copiar"}</span>
    </Button>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\drawer.tsx
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\dropdown-menu.tsx
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\hover-card.tsx
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\input-otp.tsx
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\input.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-lg border border-input bg-background px-4 py-2",
          "text-sm ring-offset-background transition-colors duration-200",
          "placeholder:text-muted-foreground/60",
          "focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none",
          "disabled:cursor-not-allowed disabled:opacity-50",
          "file:border-0 file:bg-transparent file:text-sm file:font-medium",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 transition-colors duration-200",
  {
    variants: {
      variant: {
        default: "text-foreground",
        secondary: "text-muted-foreground",
        primary: "text-primary"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, variant, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants({ variant }), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\menubar.tsx
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\pagination.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\progress.tsx
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\radio-group.tsx
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\resizable.tsx
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\sheet.tsx
import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '@/lib/utils'

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className,
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm',
      },
    },
    defaultVariants: {
      side: 'right',
    },
  },
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className,
    )}
    {...props}
  />
)
SheetHeader.displayName = 'SheetHeader'

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className,
    )}
    {...props}
  />
)
SheetFooter.displayName = 'SheetFooter'

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\sonner.tsx
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\switch.tsx
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\tabs.tsx
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\textarea.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[100px] w-full rounded-lg border border-input bg-background px-4 py-3",
          "text-sm ring-offset-background transition-colors duration-200",
          "placeholder:text-muted-foreground/60",
          "focus:border-primary focus:ring-2 focus:ring-primary/20 focus:outline-none",
          "disabled:cursor-not-allowed disabled:opacity-50",
          "resize-none",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\toast.tsx
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col p-4 sm:right-0 sm:top-0 md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\toaster.tsx
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\toggle-group.tsx
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\toggle.tsx
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



// C:\Users\israe\Documents\GitHub\recentmap\src\components\ui\use-toast.ts
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };


// C:\Users\israe\Documents\GitHub\recentmap\src\contexts\SidebarContext.tsx
import { createContext, useContext, useState, ReactNode } from 'react';

interface SidebarContextType {
  isOpen: boolean;
  toggle: () => void;
  setIsOpen: (isOpen: boolean) => void;
}

const SidebarContext = createContext<SidebarContextType | undefined>(undefined);

export const SidebarProvider = ({ children }: { children: ReactNode }) => {
  const [isOpen, setIsOpen] = useState(true);

  const toggle = () => setIsOpen(!isOpen);

  return (
    <SidebarContext.Provider value={{ isOpen, toggle, setIsOpen }}>
      {children}
    </SidebarContext.Provider>
  );
};

export const useSidebar = () => {
  const context = useContext(SidebarContext);
  if (context === undefined) {
    throw new Error('useSidebar must be used within a SidebarProvider');
  }
  return context;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\contexts\TowingContext.tsx
import { createContext, useContext, useState, ReactNode } from 'react';
import { TollLocation } from '@/data/tollData';

interface LocationInfo {
  pickup?: { lat: number; lng: number; address: string };
  drop?: { lat: number; lng: number; address: string };
}

interface TollInfo {
  tolls: TollLocation[];
  totalTollCost: number;
}

interface TowingContextType {
  totalDistance: number;
  totalCost: number;
  detectedTolls: TollLocation[];
  totalTollCost: number;
  truckType: "A" | "B" | "C" | "D";
  requiresManeuver: boolean;
  selectedVehicleModel: string;
  tollInfo: TollInfo | null;
  updateTowingInfo: (distance: number) => void;
  updateTollInfo: (tolls: TollLocation[], tollCost: number) => void;
  updateTruckType: (type: "A" | "B" | "C" | "D") => void;
  updateManeuverRequired: (required: boolean) => void;
  updateSelectedVehicleModel: (model: string) => void;
  updateLocationInfo: (info: LocationInfo) => void;
}

const TowingContext = createContext<TowingContextType | undefined>(undefined);

export const TowingProvider = ({ children }: { children: ReactNode }) => {
  const [totalDistance, setTotalDistance] = useState(0);
  const [totalCost, setTotalCost] = useState(0);
  const [detectedTolls, setDetectedTolls] = useState<TollLocation[]>([]);
  const [totalTollCost, setTotalTollCost] = useState(0);
  const [truckType, setTruckType] = useState<"A" | "B" | "C" | "D">("A");
  const [requiresManeuver, setRequiresManeuver] = useState(false);
  const [selectedVehicleModel, setSelectedVehicleModel] = useState("");
  const [tollInfo, setTollInfo] = useState<TollInfo | null>(null);

  const updateTowingInfo = (distance: number) => {
    setTotalDistance(distance);
  };

  const updateTollInfo = (tolls: TollLocation[], tollCost: number) => {
    setDetectedTolls(tolls);
    setTotalTollCost(tollCost);
    setTollInfo({ tolls, totalTollCost: tollCost });
  };

  const updateTruckType = (type: "A" | "B" | "C" | "D") => {
    setTruckType(type);
  };

  const updateManeuverRequired = (required: boolean) => {
    setRequiresManeuver(required);
  };

  const updateSelectedVehicleModel = (model: string) => {
    setSelectedVehicleModel(model);
  };

  const updateLocationInfo = (info: LocationInfo) => {
    // This function is used to update pickup and drop location information
    // The actual state updates will be handled by the map component
  };

  return (
    <TowingContext.Provider value={{ 
      totalDistance, 
      totalCost, 
      detectedTolls, 
      totalTollCost,
      truckType,
      requiresManeuver,
      selectedVehicleModel,
      tollInfo,
      updateTowingInfo, 
      updateTollInfo,
      updateTruckType,
      updateManeuverRequired,
      updateSelectedVehicleModel,
      updateLocationInfo
    }}>
      {children}
    </TowingContext.Provider>
  );
};

export const useTowing = () => {
  const context = useContext(TowingContext);
  if (context === undefined) {
    throw new Error('useTowing must be used within a TowingProvider');
  }
  return context;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\data\tollData.ts
export interface TollLocation {
  name: string;
  lat: number;
  lng: number;
  cost: number;
  description: string;
  type: 'highway' | 'urban';
  operatingHours: string;
  acceptedPayments: ('cash' | 'card' | 'tag')[];
  vehicleTypes: ('car' | 'truck' | 'motorcycle')[];
  lastUpdated: string;
  status: 'active' | 'maintenance' | 'closed';
  direction?: 'outbound' | 'return';
}

export const TOLL_LOCATIONS: TollLocation[] = [
  {
    name: "Autopista Monterrey Cadereyta",
    lat: 25.6603,
    lng: -100.2142,
    cost: 385,
    description: "Cuota de peaje estándar para vehículos ligeros. Tarifa variable según tipo de vehículo.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Periférico de Monterrey",
    lat: 25.6767,
    lng: -100.3165,
    cost: 385,
    description: "Cuota de peaje urbano con descuentos en horarios valle. Sistema automatizado disponible.",
    type: "urban",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Cadereyta – Reynosa (40D)",
    lat: 26.0292,
    lng: -99.8537,
    cost: 385,
    description: "Autopista federal con sistema de telepeaje. Descuentos disponibles para usuarios frecuentes.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Monterrey – Saltillo (40D)",
    lat: 25.4506,
    lng: -100.9447,
    cost: 385,
    description: "Carretera interestatal con múltiples carriles y servicios de asistencia vial 24/7.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Monterrey – Colombia (2)",
    lat: 25.7833,
    lng: -100.5667,
    cost: 275,
    description: "Carretera internacional con acceso a la frontera. Servicios aduanales disponibles.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Monterrey – Nuevo Laredo (85D)",
    lat: 25.8941,
    lng: -100.1824,
    cost: 450,
    description: "Autopista principal hacia la frontera con Estados Unidos. Vigilancia las 24 horas.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Libramiento Noreste",
    lat: 25.7459,
    lng: -100.1559,
    cost: 320,
    description: "Vía de circunvalación para tráfico pesado. Conexión con principales carreteras.",
    type: "urban",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Monterrey – Monclova (53)",
    lat: 25.8667,
    lng: -100.7833,
    cost: 295,
    description: "Ruta industrial con servicios especializados para transporte de carga.",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2023-11-15",
    status: "active"
  },
  {
    name: "Peaje Nuevo León Norte 1",
    lat: 26.339940,
    lng: -100.072232,
    cost: 385,
    description: "Peaje principal en carretera Nuevo León",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2024-03-19",
    status: "active"
  },
  {
    name: "Peaje Nuevo León Norte 2",
    lat: 26.340124,
    lng: -100.070719,
    cost: 385,
    description: "Peaje secundario en carretera Nuevo León",
    type: "highway",
    operatingHours: "24/7",
    acceptedPayments: ["cash", "card", "tag"],
    vehicleTypes: ["car", "truck", "motorcycle"],
    lastUpdated: "2024-03-19",
    status: "active"
  }
];



// C:\Users\israe\Documents\GitHub\recentmap\src\data\vehicleData.ts
export const vehicleBrands = [
  'Toyota', 'Honda', 'Ford', 'Chevrolet', 'Nissan', 'Volkswagen', 'BMW',
  'Mercedes-Benz', 'Audi', 'Hyundai', 'Mazda', 'Subaru', 'Kia', 'Lexus',
  'Volvo', 'Tesla', 'Porsche', 'Jaguar', 'Land Rover', 'Acura', 'RAM',
  'GMC', 'Jeep', 'Dodge', 'Chrysler',
  'Mitsubishi', 'Ferrari', 'Lamborghini', 'Bentley', 'Bugatti', 'Alfa Romeo'
].sort();

export const vehicleModels: Record<string, string[]> = {
  Toyota: ['Corolla', 'Camry', 'RAV4', 'Highlander', 'Tacoma', 'Tundra', 'Sienna', 'Prius', '4Runner', 'Land Cruiser'].sort(),
  Honda: ['Civic', 'Accord', 'CR-V', 'Pilot', 'Odyssey', 'HR-V', 'Fit', 'Ridgeline', 'Passport'].sort(),
  Ford: ['F-150', 'Mustang', 'Explorer', 'Escape', 'Focus', 'Ranger', 'Edge', 'Expedition', 'F-250', 'F-350', 'Bronco'].sort(),
  Chevrolet: ['Silverado', 'Malibu', 'Equinox', 'Traverse', 'Camaro', 'Tahoe', 'Suburban', 'Colorado', 'Silverado 2500HD'].sort(),
  Nissan: ['Altima', 'Rogue', 'Sentra', 'Maxima', 'Pathfinder', 'Murano', 'Titan', 'Leaf', 'Titan XD'].sort(),
  Volkswagen: ['Jetta', 'Passat', 'Tiguan', 'Atlas', 'Golf', 'ID.4', 'Arteon', 'Taos'].sort(),
  BMW: ['3 Series', '5 Series', 'X3', 'X5', '7 Series', 'M4', 'X1', 'X7'].sort(),
  'Mercedes-Benz': ['C-Class', 'E-Class', 'GLC', 'GLE', 'S-Class', 'A-Class', 'GLA', 'GLS'].sort(),
  Audi: ['A4', 'A6', 'Q5', 'Q7', 'e-tron', 'A3', 'Q3', 'TT'].sort(),
  Hyundai: ['Elantra', 'Sonata', 'Tucson', 'Santa Fe', 'Kona', 'Palisade', 'Venue', 'Ioniq'].sort(),
  Mazda: ['Mazda3', 'Mazda6', 'CX-5', 'CX-9', 'MX-5 Miata', 'CX-30', 'CX-3', 'CX-50'].sort(),
  Subaru: ['Outback', 'Forester', 'Impreza', 'Crosstrek', 'Legacy', 'Ascent', 'WRX', 'BRZ'].sort(),
  Kia: ['Forte', 'Optima', 'Sportage', 'Sorento', 'Telluride', 'Soul', 'Stinger', 'Seltos'].sort(),
  Lexus: ['RX', 'ES', 'NX', 'IS', 'GX', 'UX', 'LS', 'LC'].sort(),
  Volvo: ['XC90', 'XC60', 'S60', 'V60', 'XC40', 'S90', 'V90', 'C40'].sort(),
  Tesla: ['Model 3', 'Model S', 'Model X', 'Model Y', 'Cybertruck', 'Roadster'].sort(),
  Porsche: ['911', 'Cayenne', 'Panamera', 'Macan', 'Taycan', 'Boxster', 'Cayman', '718'].sort(),
  Jaguar: ['F-PACE', 'XF', 'E-PACE', 'I-PACE', 'XE', 'F-TYPE', 'XJ', 'XK'].sort(),
  'Land Rover': ['Range Rover', 'Discovery', 'Defender', 'Evoque', 'Velar'].sort(),
  Acura: ['TLX', 'RDX', 'MDX', 'ILX', 'NSX', 'RLX', 'TSX', 'RSX'].sort(),
  RAM: ['1500', '2500', '3500', 'ProMaster', 'ProMaster City'].sort(),
  GMC: ['Sierra', 'Yukon', 'Terrain', 'Acadia', 'Canyon', 'Savana', 'Sierra 2500HD'].sort(),
  Jeep: ['Wrangler', 'Grand Cherokee', 'Cherokee', 'Compass', 'Renegade', 'Gladiator'].sort(),
  Dodge: ['Charger', 'Challenger', 'Durango', 'Journey', 'Grand Caravan', 'Ram 3500'].sort(),
  Chrysler: ['300', 'Pacifica', 'Voyager'].sort(),
  Mitsubishi: ['Outlander', 'Pajero', 'Lancer', 'Eclipse Cross', 'Mirage', 'ASX'].sort(),
  Ferrari: ['488', 'Portofino', 'Roma', 'SF90 Stradale', 'F8 Tributo', 'GTC4Lusso'].sort(),
  Lamborghini: ['Huracan', 'Aventador', 'Urus', 'Gallardo'].sort(),
  Bentley: ['Continental GT', 'Flying Spur', 'Bentayga'].sort(),
  Bugatti: ['Chiron', 'Veyron', 'Divo', 'Centodieci'].sort(),
  'Alfa Romeo': ['Giulia', 'Stelvio', '4C', 'Giulietta'].sort()
};



// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\base.ts
PK
     �kY���(�#  �#     apple-touch-icon.png�PNG

   
IHDR   �   �   =�2   sRGB ���    IDATx^�]�wUս��$$!�	�@B�)�"���(��U[�S�u������������V��u��U fdT�!adb	�����7���&w�}�=1��Z,W�}�����޽��׀��m3�1���i �1L� �6�D�Q���Q�
�@�T(0
��0q4�%�<iTɒː��v3��ϘV �
 @�̷���hP��abc\
�xc�Ql�ze��bb~��u ��M��ݣ@)P�bbM��]�W-ݭ�-C��h�hn�o
�H�F��=
�R��4�ZT+�{�Fq��2��\3�Z �<�B���8�(@Q� �5�W;�م�ۘ��	��mڠ��G
����Tg����׼g�h�� stV��(`3�E��q񣃡� �&~gx�3l>o9]
���`��m����Џ�7�<�)������%
�F�|�*c'��t�_
�)��)oY��0QV]���/t� +s���,yEF�K��K�����W��o�	���q�@�n�[ݣ@0���k��k͉��`x�y�z�]
(�h�bce���{��t���[ݣ�6L#k�Д�)C{�Q�OS�0�
z��}o�|�G�.0̣�GP��] ��x(����Ц�����
x휳�0��λ�=>p<�v�iz�x7��΢�wC;�<]���Юgg�chg������,�,x���t=6C���E ���u����ch׳���1������x�zp<�v�y���]��"����:O�c�1��Y�Y��Y��zl<�v=8� C;�<]���Юgg�chg������,�,x���t=6C���E ���u����ch׳���1�����؄��k����-<r<"��ز��"-͍�*)�kDD�CbjV@z\;f/�5�#"QQ���ATLD�ĉ��+.,m�����ͨ(�S؊��q� ~�(�	��ee�Y����67�q�硫���~�������PS�[^z�����,� ����#�Ec��aHH���lD��L��04o�S[�B]�=7���0d�Te���Akk��Z��W�½T�����!��G�������M��#ԅ���S0h�XLIG��a�����
57pb�����H�tFL�g�RJk������l�3n C�r����ן����J����k�0���FBj��ͻ��0t��oQ����#)}2g=l�z2�u���hm�G�{2L]�"��n�bsc=���E�����`ǐ�gLBڤ����Y:AX����p�����CF`�=Oٳ��*|��oŕ�� ����8��<�e�u�Wpv�4ֲ�{߇؁IH�<I�&���[�p����J5j�9�e�=-V�:�x���@ʸ;0*gq����rv��0[[04�b##�߃acg�2��7tei!��^o�~����o\iP�Tc0⳻rQ}��������;�GH1��$�'����W���@���/m�����C�����jQQ���g��a���
S�������N���q�[����8,���F���]��LjU�y��7Mw�%2*c�D�Бbf��������f��T����Z���4n�10�wmѴ�RV����f��h��_�蟘�I#0 )����4�W�ף��%P���n��G��{���ADT4""#a�0��óoijD����~�0�ާѯ���2�?��Hc�M4����+Qvꠥ��9{y@%��C�����(��g�7�0�?q��c@�p�
JAT� ���Y�s*��4f&S��X}�Oh17E�A#' >ib��/�����㤝�[���
h��č⳨,) �*?K�a����$��½X��s���UA�H*��߼����n��b�ع+���.�
zl�_�+�
���T�����UeB�]�ġ3we�0t٩�tl�����L���`�B��
(J���
Q��u������s�s��B������Ci�>��}�sD�P�m���$���*.���|�i����p�b.ڤ���w��	Ț��Vt�]8�7i)�yK���Nm5!X������Д����ȟ8<�w���R�Px����]h%��Y�a��rʞ�2M\:�e��V^��фEO���LV�y_���0��b�
M��Ԏw-���l3���i���*>�%|*-6��_��S�
S��ES��CT�*O�0<K�&4������Y/̋: BS����'���c:���Z���Z�Xۄ�e����b[;-���Tt�U�57ԉ�Q��L7��-�$���KG�^��umeh
�G?�?a���T;o�m���������n�4�	5׊���m��&s�CHJ�l�v������lehڟ)o�h�;����(3�@����t���.߉Ҽ��K&��<bZc^,?�
��l��aq�24�	W`Ǹ�k�Ȼp_��;ע��4,K�[��j���Ӗ�
㜺��=�(��)b�i����Jǹ���p�����0lt���7�?L��i��N�k*ql��ZKt�5--G����A�ύ�(�nh*�w�CC�u���|�1s��9����=�BfK�c|��]r�'R��z���?U�����TēX�QЃL��p����W/	�3��wL�b:V8���6��9�-����Q�ɈȨ`C-���o��j�����L}��,7�q|˫������iC_>�����S���Yӑq����U��(C�ַB�9�f�Ļ0b�}��-M�8��?ET�*$�fc���U?�v�0�~���|t}�����6a���W��L�S !5K�D^ޞ��y+|`��Ȥ���E�Z��5gv�j݊��o�'�D^z	��[eC�V�#��ץ΄���M=�1�<'��꠫��⷟�7��00����1��Igv�SƋ"��;��XM
�8�џ��b������%y{Q||��f�B���Nj�� ����f53ݎwQ{�\jjf'��
��4m�/a��\rr�p߫���Z$�&|�>۵�b���®RЧu�����F�Z���Ԙ�迋l	+A��NӔ���30%C+�EU`e'0�FG~�0�}��i{g�z_[��?(?����X�h�	�@n���)�;����=iɳ�zΘ��9��a 9k:j+JPs]��~�HP$F�n:c�����Z�N�n�~��QF��Q��KaKN!����}J-6a(&��,�)��w>��à ��Z��(�ec����y�8�k��L����S�M7~s��i���Vљ�yK� e��Y��Ҽlp}��ʓ{��:r�"ЖH�Ee��q}��{�2�v���
bc�W�K�936��K��*��0��U?i��C���Q������!��hn�G���3}��,���2:P�ȑ��m�,�L2&���E���Tt��T,���wEf��Kŧ�J�wZ�Th����Ԥ�0n����ʨ::�tk �/A_���д���R�'�KR�gLm(�-����J}G�8�{�
����E�=
�8iS�nS{|ݍran��Q�#m�|�0G�;�JN�Aq�o|�ߞ�+�kC���E�})�xʘ�1jƽb��gP���R�u$���4�`s��
X���X�7��%��ٯ6(k�a2�X�!S�ֳb���[��Kq����u@$���C��Zz�d�V��#+�zCS����)n��Ѿ%C�}!��L���$L���ҁ�q_�
rf::s���zݘ�MY0��B9���b�S�̩BCm%.�"�e�4�f��Yj�}�G�hC�
ᗗ�Na�$���
4
��#�+��EǩW��tm�6+Cp7��l[=�����U��x���|k\U�Q����C�
Tzi�mBS�|0W�8o�(4��9m!�fv��>g�nhַc+����`�������T�b��<X��c��(�y�A�"~���Qy��(�V�.v\R��{*����cɀ��	�#T���H���.�k�yx)�as�� 5W/���!$��H�X�>�����0�i
M_6���:j��p��A�EX�޶vC���e�����R~f�d��0���X�܁�q��I�%�X�in���h��Zˑ���Ϧ	��hi�C}U��䩫,W~���E�ѳ�#qxf�=����h�h�l%�@EJtm�,�5{���T��1�ר��KC4r2�|����^�������Ce�:c�]�]��J�N�gX��:����s(�����6�tU��?�}�*�Q~d�^����ؓc��EeɎ�9+~m[�/���gmϜ�:�dLF��%J��0t��<�H

�L����P�%i��P���ٵN�j(0TLh���4&�̚�X���篅$φs��#�HΚ���#����4���yt�tʢ�Iu@�+_���IW�G��'��-��:M��g���g��}?<�wn��^D�C�xiS�!q��.����r�f3�e:�ҴF#}��Zޚ�w�ӺITR�n\:�s>JM0��9�a���?Pg���Mi���t�͜lik�n��ȉ�fƐg��F�vR�d$��
!ֽ����bt��ztsi��Z2�m��Z+���,*Z���>se3ѓ2�`�Ko�����Ҟ��}�R"B��۪%g������Y2_���Ӹ⒆[��n9C�(W�E�ϠM�+�O8S�t�o������p��j��d�~��yd��}��`��f�Cɮ�0�e�����'Be��߳3,_<&6X�24ōf_�$�?fwg^c7Z��t'�BL� LYJ�I�@� �$��p
C�$�'����RxE�7Tt����ͮ����B�@z�3�'*^Y��eq�5hʽ2�*��rV�ԭI�Q`�e���S�6o=sX�[ؤgҒ�u�x��^=ܕ��t΄^�S��N�w�u�A#�w�����Ԉ��Z�߸�چ�gf��}c,��}��F)
z�	"b�;����zxԁ��/��:����+���[4�/���t��4�oOh��O�|�&���ς�Sx��� Ƙ&�^8�K��*�\�k����LK��d�ˎ��M"���x0=�R�,��{�B|����GD6	���	�=�8��Zq'v��c(��O_�7��܎����@t`�rz)z遁���B���ږ14�:�	=P�^hod2+�z�!�9�����&J����Tn��H�sO�CXM�m�U��8=���B�z/���'D���t?�M�H�z��`U�e-�ƒ�t��uףAc�ucvI�@ �����VH��:�w��m�^��/��)�mX2F�r��3��_7:�L7���D�F�ÿ�k�e�b�c�đ�
A�Zx��L�@��*�<�t��=237Ɩ��K�����T����Rg�)c�R��	����BOV/�9-ah���2	�>o�r�R,�@K���K"�CeIa�\�E
z��Gv��	��yE����)?3��&PY���S�#u�\� �a\G���:z2f.�9�o,ah�Ȟ
R6]�fh#��(	%�։��FXĄ}|���h�b}
����.:z)ڟ������I��qe�9a1�I�����X.]礩�&��� b�u@�7�"�DK�A9�1L�0�M��E��
tz�-�g�Y�+�R����!�/x���/����
o���
t��C(�Ƥ:�����e7[�⑤o�>Z�
���ˎƂP��X�о�R9�
�>-R`�����kr��̆���/ߔ.;*g1�f!�+H۫�Ce2F�dLH�
����.�l�?s<iᠣJBQ�U����c	C���oR�+��T�)��������FY�.��OHW�����2�@�x���
V�U�i�֖��{�t(��u�6��r]�6!34{���d�&�c��'�peu�J�FC��� ��2�3�L�����AÄZ��Q��Aw7�0v@(�5M��Ī��oҚb��xh���"�^��Z$������1UfOͮH�҄e���O5ӵB}u��,!��3�'��S�dE]��?	]�s(�Z�d�:c@�<3�u���Z4y��*k����
�R�-.j�~�ߏ��r�=O"f@��geX�W(�O]���X�:w��l�w��׵J��
�c�UB���"���v���M^_+sK��
��U+�T��N�po���1l�L�%t{��Y��e ��؅GLY�ԉ��h�>�f\���B(6��Z����B�?d����+E� ̧�
�GM��t2v���&�o~E�d��l0/��Q��?�_�͖J�P�`|KS}����d'�fh�6X���iS� yU qNl��V*��ZYsVt��E�c����#c�����-a��M\>��y���b�_Sf�� C�uȶ!�Fg/����n_��Q�&?�3eq���d�lK��{�~�]�Ъ�2g,��
tT�J� �oY8^�~���bF��o?����#g�/skf�ݴ��谠�b�b����jO��U4�'���+�C��dA%�Gq�.Ù��b?:��Ei��Cʤa��Gل>x�L \���i���e����mRt��7�	3��Le�?�a@��uf�z-ϛ�]bk���v�5�T�<�yڿ�_��Ź�녫���f[�dE�I*�+�R������A�n=��"��S���1b�e�J��2�F�I���{��6�i��
LY�s%f ��N�7�UY!m��N�l���RK��bh�SQ��2E_��k*\�=W�XT\P��毖.����T"��e~c�]�i[d~l�c؊��'Q���iV�|��B78����v؂o�T.���*Qf��YȚ�HH��P^:3�p�������>[����̏�m��QԜ��L:�x�y=�lx�CG�U_ve��Ltn�Ǩ��/E/�:c�I(�ۙ��*u^�����{UtKЦKۮn���~��?��?U��m�!
�˄��L���h��i1|�,��:�(3��޳A�9�C����΃}� >����i!+Z�1��e��j��rv0E��N)b�7d�
e��t���ъ���4R<Ti��ݹ���iQ��O:����B�r3����y�:�M` �*0рz�����3�;�A������s������3۞զ(n���Z+k�^S�;f��U�觶�
Vl�*���g�s������XYZ���B�/���$���TC{�?��'��ABJ�2ssm��� k'�j*+��bSU�y�,?/��C�/��������$�u��S�C�g�~���Y������_k3��,s�]�0���׌tc����L$�I��[ �)*�'�Dr�mB���`h���w��j�^�*���`�d�Ը!i�<q�S�h>c�Uw�����!� �h[
d"�,]�XW%Z��~[w�,l�v���IJ�G���Ӣ=dmJ+�n
5h����%��^���+�?pU��X��MH�Txf2!�W��e�+�]v�G��cuف�F�k��3�`h�Gٽ���F�iT���͒�ٖ������2h�E��������:祷�z�ND���}#h'(��G;nE����S�a�LoE�~�q`^$Ł`������P��TO�r� �3s|���. ���\v�@�ъ"	S�zҮO~��T��[�`���D�V Y����5�-3p0�/�I�Ӈ���Sr	v"2$s*F߱,����X<f>�d]�$��4�f<�n�����{h��x�3=z����
X�LЖ�����{�l�uCK�(k��KÉ-SN�
e}�o��<
vgY�A��M���e�aǳ1C�oT���mgl�����i=��c;P������p���S�WG�o|U���ՎmzY�S��Qי��H����nG���-�KTL���[��Ʋ��M&{�D�Y���	e"���?���LѪ��ٿ;���i�OamU��Ҙ�=�hY�q,?4�Łb�,PGc���@3#�ߘ`,��C&]���OO��{�3X���w���L�\��M��U��C[�R�� �u�iU �yI��90u�\��t��׭͍�䰮ɳ��y��/嚬��[��,fh�c��`@���2ü'(;sH��!�t�,{Ql��,�Wc��3�q$��V�V(���-D���ĘQ5  �IDAT�?����ٛ� �ΐ����d� �A�1��BQ�T:A��C���EE"���75f
�'�1���6:������fa9�ξi�w�H$?3�+<`:gX����D���
���+y#�*�C_=wL8c�43�:P���z޾��@�bhkP�fq2<�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��]x�NF�ch'��q�څ��d�=�v��7��\�� b\�����(`
��uf9$;7wR��"�:�r'����~2�+ ^pb:.��a�c�s�ي�l*�Bx(;�f��5��	ͭ� �9�y���ŭXl,}�L���Z�X�B"x(;�&��1����2פMY��}�F^�}�xU0��Mf��j\0�[�r�IԼM��&ʪː��%��C||���0�@���!ܗ)P`��U�N"���+s�H���/���z{w
ZM4���UF�-�&K������hq
G�iDM쏌�ckW��xt�=��3#��2�y}Yo�Φ��]0���U�ED:SV��p��%��f���]�� ����]D�V�i ~�YOQ�kg���V&^3
�n�*�r ,{twSQ0&���Lz�e�����2X
`O�����<�[�gL� ȁ�^��~�F�{4�8b��j5���Q%�\�k&H3"�L� d�@��$����{���*��;MG \^����/���˾Ǝi    IEND�B`�PK
     �kYB�"�       favicon-32x32.png�PNG

   
IHDR           szz�   sRGB ���  �IDATXG�WkL[e~N[ZhiK)��[���k�¦(�m�&l��͙h�D��.N�.����?���4������ 7��A)��Z��b�B��c����F��?x�&��{����������#�w�'�m�Pa-�������$s�<����Xw�,���?�f )� � �.�����
8�l v� G�Qd�Yu�[rcaz|U��x��#���-S"ZO� .����<H������a�����u��dc��=\�ُ<�@p�-�s��YZ�'����s�Nb�凰?1����t����s�-,X�hNF�ӈ���e��e�6��&�q'���3��K��[j�?J�gY�g�O�}�UG!��8@�n��-I�PT�V8fh�n��Z@�	�Z�*���[Ȭ��0v^�GEKP���6�G��O�{��U�̲�p\�kx6�120��,tA��_�!��#�%k�o�����������)�*��� X�"��j(3�h�9k�`Kp�I���7�����t;0��B5��Pj��]M�w"I[���N�e�.������lh�T�
�+�>
�X��4Fn�cٽ Ql�w����8q�R-�9r*����-�.�U��X�����-��R*����U�,%�P�B��@�PQ�<� ���dm�KE�9��㽸�WE�]1#�=�{���)8R����n�q����W�_ �/b�5G��|z�B�0�~���<vq�\t���߇8����u\�,%���i����(��D���C5Eі��`x|�!�̀����y���.E�w�4��vD��-��q�p���*h�H˔���l����7u7af���m��2$�T. ��[~�4)yO�H������ŉ���z�����ҧ���p���<�6�c
4/M��y�\ S}7a6�!��I�l�F�c�/�f��dȐy@(�Ob��Bp7�^��/d��_�̲gih�=��+_��T-�m��/�ٹ�a،��\���!W�!AS�)����̩8 2pH.��F�RSiR��EF���Ċd*����Rܽ\n����[
&��S�k�C!Q�n�1̌�	SWd)Y�V� C�N.���'ңE�B�y(eӎ��Ԝu� �o!Q(A�y ;!�����Ym_@]��� :��Y@�2���S��������4,��qJ?��q�a��~�ZX�u���C�4��]    IEND�B`�PK
     �kY�i$6  6     favicon-16x16.png�PNG

   
IHDR         ��a   sRGB ���  �IDAT8O���jSQ��srr{���4QLs��*	���T��D)5��� t���39(t�'��`��D�ib�ͥ%F�65=�]�8�e�ֆk�k�-EG�������J�Q}u��R57 �����@km��o^t�/���'�_�S1;<'X�'��7�t����@�������B8?����%�����8H5�07E���Tr	V�- dbc|+���s�+�iQ���#8tK �I�=g��)9-4�}����Xxh�5�IO<�dُ,�G�����Q�64��j6�w`hP/�)��A���?��
 �2�/Y��Gp�j�$��Ξ~*��
���r���h� +F
�I�6���O`�6g7�b��맄.�f!6��h�F�����f����h�D/��/	+K��#W1[���4je���y��Y�\)2�J_o�B�
tx�,/��9��
�·��(��f�.�Í�b#���S��6��&��3��;�z�	Y� �    IEND�B`�PK
     �kYg:$.<  .<     favicon.ico         h  6          (  �  00     h&  �  (                                     ��U~��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U~��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U��~;��{9��}:��N�À;��I��{9��{9��;�˅?��{9��{9�׎D��L��{9�׍D��J��a)�ЉA�ېF��U"�ӋB�͆?��U"�ېE��M��q3��a)��M��;��\&��M���U��|9�ʄ>�ψ@��X$��b*���R��W#�ߓG���U�ېE��X$���S��l0��q3���U���U���G��l0��~;��d+��}:��;��g-�Ɓ<���U���R��V"��|9��X$�·@���U���U���T��\&��r3��m0���S��a)��m0��o2���U���U��f,��l0��;��]'���H���U���U��o1��X$��v6���U�ՌC��W#��]'���U���U��{9��k/���U��~:��`(���U���U��;��U"��;���U���U��i.��U"��I���T�͆@��X$��L��y7��Z%���U���R��p2��p2�ݒG���U���U��L��p2��p2�ڏE��p2��p2��p2��u5��I���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U~��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U~                                                                (       @                              �� ��T|��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T|�� ��T|��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T|��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U��P��P��P��P��P���Q���U��N��I���S���U��P��P��P��P��P��P���Q���Q��P��P��P��P��P��P���T���U���R��P��P��P���T��`)��U"��U"��U"��U"��\&���U�̆?��U"��m0���U��f,��U"��U"��U"��U"��U"��d+��y8��U"��U"��U"��U"��U"��U"��J���U��q3��U"��U"��U"��I���H��z8��\&��U"��n1�Ј@���T��}:��U"��U"�ُE��J��}:��c*��U"��U"��u5�ӋB��N�ǂ=��n1��U"��U"��f,�ȃ=��O���U��^'��U"��X$��|:��O���U���U��~;��U"�ȃ=���U���U��s4��U"��U"��`(���S���U�؎D��U"��U"��J���U���U���U���T��X$��U"��v6���U���U��O��U"��U"��p2���U���U���U���U��I��U"��k/���U���U��j.��U"��U"��U"��~;���U��O��U"��U"�̆?���U���U���U���U��l0��U"��`)���U���U�֍C��U"��U"�ʄ>���U���U���U���U���T��[%��W#���R���U��a)��U"��c*��_(��W#��N���U��]'��U"��t5���U���U���U���U�Ɓ<��U"��U"��O���U��z8��U"��U"��J���U���U���U���U���U��q3��U"�ېE���U��X$��U"��o2�׍C��U"��m0���U��p2��U"��b*���U���U���U���U��I��U"��U"�ӋB���U��c*��U"��X$���T���U���U���U���U���U�ҊA��U"��x7���Q��U"��U"��x7���U��j/��U"�ڏE�ǂ=��U"��U"���Q���U���U���U���T��X$��U"��\&��`)��U"��U"��r3���U���U���U���U���U���U��P��U"��`(��K��U"��U"�Ɓ<���U��L��V#��`(�ܑF��U"��U"�ߒG���U���U���U���U��l0��U"��V"��g-��b*��U"��U"��j/��P���U���U���U���U���U��e+��U"�Ʉ>��U"��U"�ӊB���U���U��y7��U"��z8��V"��U"�ŀ<���U���U���U���U�Ɓ<��U"��U"��O���U��K��_(��U"��a)���R���U���U���U���U��}:��U"��c*��U"��U"�ߓG���U���U���Q��\&��X#��Z%��U"��n1���U���U���U���U��I��U"��U"�ӋB���U���U��I��U"��U"��z8���U���U���U���U��H��U"��U"��U"��U"��M���U���U���U�ψ@��U"��U"��U"��]'���U���U���U���U���T��X$��U"��v6���U���U���U��b*��U"��[&���U���U���U���U���T��Z%��U"��U"��U"���R���U���U���U���T��f,��U"��U"��U"��O���U���U���U���U��l0��U"��`)���U���U���U��g,��U"��U"���U���U���U���T��J��c*��U"��U"��Y$���U���U���U���U���U��I��U"��U"��U"��x7��H���S���T��I��m0��U"��U"�͆@�ڏE��}:��U"��U"��i.���U���U���U��J��U"��U"��U"��U"��b*���U���U���U���U���U���U��t4��U"��U"��U"��U"��w6�ُE��U"��U"��U"��U"��U"��U"��U"��U"��h-��O���U���U���U���T�ՌC�ՌC�ՌC�ՌC�ޓG���U���U���U���U���U���U���Q�ՌC�ՌC�ՌC�ՌC�ߓG���R�ՌC�ՌC�ՌC�ՌC�ՌC�ՌC�ڏE��M���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T|��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T|�� ��T|��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T|��                                                                                                                                                                                                                                                                 (   0   `                                  ��[��S\��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T���S\��U    ��[��T���T���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T���U��S\��T���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���S\��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���S���S���S���S���S���S���S���S���T���U���U���Q���P���S���U���U���T���S���S���S���S���S���S���S���S���S���T���T���S���S���S���S���S���S���S���S���S���T���U���U���U���S���S���S���S���S���T���U��|9��v6��v6��v6��v6��v6��v6��v6�ʄ>���U���U��|9��i.��u5��L���U��I��y7��v6��v6��v6��v6��v6��v6��v6��v6�ՌC��H��v6��v6��v6��v6��v6��v6��v6��v6��v6�щA���T���U���R��}:��v6��v6��v6��v6�ψ@���S��m1��U"��U"��U"��U"��U"��U"��U"��[%���T���U��k/��U"��U"��n1���U���H��\&��U"��U"��U"��U"��U"��U"��U"��U"��i.��I��V"��U"��U"��U"��U"��U"��U"��U"��U"��j/���Q���U��K��]'��U"��U"��U"��U"��h-���P�ݑF��l/��a)��Y$��U"��U"��[%��e,��x6���R���T��c*��U"��U"��U"�ԋC���Q��}:��f,��_(��W#��U"��U"��U"��^'��h-��|9���Q��z8��e+��_(��X$��U"��U"��U"��^'��f,��~:���R���U�ԋC��Y$��U"��U"��W#��b*��z8���R���U���T��P��;��U"��U"��u5���S���U���U���P��a)��U"��U"��U"��c+��M���U���T��N��j/��U"��U"��U"�ېE���T���U���U���U���T��M��q3��U"��U"��V#�ُE���T���U���U���T��;��V"��U"��U"��m0���P���U���U���U���U���U��L��Y$��U"��f,���S���U���U��M��_(��U"��U"��U"��V#��~;���T���U���U�ŀ<��U"��U"��U"�·@���U���U���U���U���U���U�˅>��W#��U"��U"�̆?���U���U���U���R��r3��U"��U"��U"�χ@���U���U���U���U���U���U���P��h-��U"��^'��K���U���U��I��]'��U"��U"��U"��U"��^(��L���U���U��H��U"��U"��U"��s4���U���U���U���U���U���U�ߓG��[&��U"��U"��m1���U���U���U��P��e,��U"��U"��X#��L���U���U���U���U���U���U���S��x7��U"��X$�щA���U���U�ېE��[%��U"��U"��\'��V"��U"��p3���T���U���R��X$��U"��U"��d+���S���U���U���U���U���U��P��`)��U"��U"��Z%���S���U���U��M��Z%��U"��U"��c+��O���U���U���U���U���U���U���U�ψA��X$��U"��z8���T���U�ҊA��X$��U"��U"��r3��p2��U"��V#�ӊB���U���U��h.��U"��U"��^(��L���U���U���U���U���U���U��m0��U"��U"��U"���H���U���U�֍C��U"��U"��U"��o2���R���U���U���U���U���U���U���U��J��]'��U"��j.���Q���U�Ʉ>��V#��U"��U"��~;��L��]&��U"��a)��O���U��|9��U"��U"��Z%�ڏE���U���U���U���U���U���U�ʃ>��U"��U"��U"��|9���U���U��t4��U"��U"��U"��}:���T���U���U���U���U���U���U���U���S��f,��U"��[%��L���T��}:��U"��U"��U"�ЈA���S��|9��W#��W#��~;���S�ېF��U"��U"��W#�Ƀ>���U���U���U���U���U���U��L��U"��U"��U"��d+�؎D�ЉA��Z%��U"��U"��Z%�ُE���U���U���U���U���U���U���U���U���U��{8��U"��U"�ЈA���S��w6��U"��U"��U"�ޒG���U��M��_(��U"��^'��M��M��[%��U"��U"��x6���S���U���U���U���U���U���T��_(��U"��U"��V"��Z%��X$��U"��U"��U"��c*��M���U���U���U���U���U���U���U���U���U��I��U"��U"��n1���R��q3��U"��U"��V"��L���U���U�˄>��V"��U"��r3��O��g,��U"��U"��k0���Q���U���U���U���U���U���U��u5��U"��U"��U"��X$��[&��Z%��W#��U"��U"��]&�͆?���R���U���U���U���U���U���U���U���T��^'��U"��Y$��M��k/��U"��U"��[&��N���U���U���S��k/��U"��V"�·@��s4��U"��U"��_(��O���U���U���U���U���U���U�֍C��U"��U"��U"��r3�ܑF�ُE�Ȃ=��h-��U"��U"��U"��t5��O���U���U���U���U���U���U���U��v6��U"��U"�ʅ>��e+��U"��U"��a)��O���U���U���U��J��[%��U"��b*��t4��U"��U"��V#��J���U���U���U���U���U���U��M��[%��U"��U"��r4���R���U���U���P��p3��U"��U"��V#��z8���S���U���U���U���U���U���U�ېF��V"��U"��h.��^'��U"��U"��g-���P���U���U���U���S��x7��V"��W#��a)��W#��U"��U"�˄?���U���U���U���U���U���U���P��h.��U"��U"��d+��O���U���U���U��O��d+��U"��U"��Z%��J���U���U���U���U���U���U��N��_(��U"��W#��W#��U"��U"��m0���Q���U���U���U���U��J��_(��U"��U"��U"��U"��U"��p3���U���U���U���U���U���U���S��v6��U"��U"��X$��K���U���U���U���T��;��V#��U"��U"��u5���U���U���U���U���U���U���R��o1��U"��U"��U"��U"��U"��s4���R���U���U���U���U���T�ŀ<��U"��U"��U"��U"��U"��]'���U���U���U���U���U���U���U�˅>��W#��U"��U"�ˆ?���U���U���U���U�ڐE��Z%��U"��U"��Z%���U���U���U���U���U���U���T��;��V"��U"��U"��U"��U"��y8���T���U���U���U���U���U���T��d+��U"��U"��U"��U"��U"��N���U���U���U���U���U���U�ߓG��[&��U"��U"��m1���U���U���U���U���G��\&��U"��U"��U"���U���U���U���U���U���U���U�ُE��Z%��U"��U"��U"��U"��;���U���U���U���U���U���U���U�ݒF��Z%��U"��U"��U"��U"�҉A���U���U���U���U���U���U��P��`)��U"��U"��Z%���S���U���U���T�ŀ<��W#��U"��U"��_'���U���U���U���U���U���S�ݑG��u5��X$��U"��U"��U"��W#�̅?���U���U���U���U���U���U���U���S��t5��U"��U"��U"��U"��_)��x7�ԋC��O���U���Q�ڏE��y7��Z%��U"��U"��U"��m0��|:��}:��m0��Z%��U"��U"��U"�Ɓ=���U���U���U���U���U�̆@��U"��U"��U"��U"��U"��U"��Y$�ԋB���U���U���U���U���U���U���U���U��I��]'��U"��U"��U"��U"��U"��U"��a*���R��w6��U"��U"��U"��U"��U"��U"��U"��U"��U"��U"��U"��U"��Y$��t4���Q���U���U���U���U���U��M��a)��a)��a)��a)��a)��a)��f,���H���U���U���U���U���U���U���U���U���T��}:��a)��a)��a)��a)��a)��a)��i.��L�ڐF��a)��a)��a)��a)��a)��a)��a)��a)��a)��d+��j.��v5�ӋB���Q���U���U���U���U���U���U���U��O��O��O��O��O��O��O���S���U���U���U���U���U���U���U���U���U���S��O��O��O��O��O��O��O���S���S��O��O��O��O��O��O��O��O��O��O���Q���S���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���S\��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T���S\��U��T���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���T���T���[    ��U��V\��U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���U���V\��[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    PK
     �kY�!��       site.webmanifest{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}PK
     �kY�KK�&  �&     android-chrome-192x192.png�PNG

   
IHDR   �   �   R�l   sRGB ���    IDATx^�}gtUG��w�2
� !I r�
c�c;��n�Ӥ�z�ߛ�׿f���ͯ~aM�{޼yϡ�vc�#јd�
"
!��D��	�z�˥��{u��	�9����S�kW�:U{{o�HXe�0LX�i	,���B�DXȵ� ��&��F�$ �b	\�,�`���1��]!4�,���M�-V!�gV`Lj�Kaa>��bW�y�c	p��`g����!|��Y��J�

 ��+�3K�7 �H�x0�y#'hpLX���2���kW^~Y�*'�$%��
�I'�w��C�ag�u�~}�e�+q`�J�%�/ � �� L�F%�E�[X��Ue��
PV!��/�0�		4���rkUOf�}x�98	o��?����C^�r 뢏C�`�
1)9���s�cӔ��@����v����֑C���B| ��͙�̗��e	tY�G����@�l
~�N��r��9#��(���,�4��/@Y�(�	�i�[Ó���������Uk�Z��ɲ��a'���6m
P	�ZI�Ǌ��w��B� x���]Ö��X��s��Đ��(��Ӧ��@�� N[i��*[-���6�����B����e�vd�6���V��X< 94L	x(��K�)@b�
	M�� � dm�f�F�p�
@ȨB`����m'��2�Ґ�@0%` ��nF}SF�R��z�����5h	����0k �0
��7�7
`�@�%` ��oo���@K�(@����(�Y���Q�@O��Q �-� ��~3x� f
ZF=�f�F���z�����5h	����0k �0
��7�7
`�@�%` ��oo���@K�(@����(�Y���Q�@O��Q �-O@���˾
8)5
ɩ���ә��D{�5PF~R(9�i�`Y�KB��\�������}�d�b�
+$��B!X�d���`��\��Sh�܄�/W�¨j#���B��ERX�.�9�S{֣�톯l�*Ũ����M�m�ٲ
�W.��O��ºi�e�'qѧ )%
�iHN�DJF&R3#-3��C�7=O�l�78U��W�揝��9��`_�H�Yg{+N���NU��w��i�Q8eA��@�/�A͖�hoeŬ�YBI�HJNERJ:2�"o�dd���u�7"�@��p��rF�`ܝ�#)5��nm�u����x��թ�#�c�|�E�zuz��~�~��:��cȃ�Rec��y�-*E�����O�) Ϸ�7�	7�/y0��Mf
-����!%}`��komF����z�����{���C�	P�.���
g����īő�=C��ʟ�̜��x� WΞ��?@Ǎ������|L\\N�@$Gw�k���(���^��ζV��1.�������A9�0j��:*f7�)��#�pj�&���'q�/]�"Ҳr��V����u8��=tܸ����LY���Kz5KK]���q�߯�����x�C2f��LG�'
��ف�=��t�ү1�ꇃ���ϐ�=����갳�
�����ڃ�Ϧ�_��{���b�Zc����(t��^#&݅����$�( Ϲ��5���o����/=^9sG���KfRJ*f=�kXIɽ�p��V4�ҟ��o��E�c��;��azR'Xܸv��Ǖ���z�<:;n���G��w=��1�}�J']m���Z.7�<��~��S��05�y�)���Q��?���s'q���N��F��E�v�*�<�2���r���m�@��f�^>��+�h�҄��Mh�R��:��X
��N[�BOڶ�(=��a���BIH�̕������o:��r���c�k�
���Ei��q����wG��
����a�Vrj��dY���~mץr�m����	��r�^z�:�-WΝ��^��M:~�����Mj�������W����"m�4ef��f�Ay�K*w��[>S\|�pΨ�ȟ?�G~�u(95�cgJ�=��P2,B�$���$��Dtu����/�����p��N��^�%P8��.�_����P���|�d�����&*����h<Jc�{���a�0��g��濯�c�|�_�թ�0�єGT❲~�&4�?��h��?R~|�DΣ��C�����s&}��k����s����/$��}��I�U��4F�Α��hw5n���9�Km�/�~��5��4����S ~RO���<M^s����8�
~x�[h��༱�x�9m1
���j�����܈��;U���ea֓��hT'�#s��?��J��f�I�߾ ^;_f?����_�h!p��[��t�x�����/����
o��9�]eʃ?�y��;��J��<ՠ��� W�Ǒ-+=s
My���;�a�m��Σ[�x��J��Bɢ����M4g��B�B_8�n��~�+l�J���2�	�I��P�{��|�0b52a�s�Y�Y���	�~�f�=�'�M���~"�>~��S�qrק�"�Cn:(y	�ݽVZ��P�( /��?�w�De���<��%�Tu���Ϣf�Ji���e��p�M�ݦh8�-��Ѐr���/d��A��_�����^��p�( �������^Q:_F>�It"������Q��JL���]�䷟�b]�V�9��1��'A?�[��O%�Q��� 
�7;��DB2z
�-x*�c�����^�~���f�h&'?�2��t�o��ڮ_E�Wғ�C#J�Bь%	T�}�ධ8 ���$q1N./*㥗t��/�<��3^[��$ͻ���/�zzUϣ-@:X.B跠��-�A<�6��a�h�=�����K<#���$^	�����O.�Ӈ��L��ZD���Ë1i�󪏻��;�4ͺ)�Y���Y��`x�[��h7I���
�[;oﺮt�Ѧe�b��d� ��zG������.FN�����l��W+qE3���yi�JNu��0��]\k��n3�h��
����ލ8w�;�gD\�%��@䟗�O�o>����;�&..qN~�c���2�M�O�1�N��g?��߸�c�(���/���>��cF@�9����_����NC���Ę�#�+��u����1O����(�����^=���oj;R�VB�|y1R��i��gy��Ѡ��9����-?<G�G������)��M�<�4x�h�����x���>S�gFb�u�nn:Æ����z�wx�9{x��gб�$��C�LØ�L���9Z�������KS�����
�1�!��`�BN]��DY��*1N�M��R�?�_���1hd�{%��b��ѭ�e��21�CË�@��S���b��T�_�A".����on�� 7���>���~E��3(Ƿ/ =�����CI��#�!g�3�K�H�U�D��mF���٣��k9H�J�%~	��=�Go����	�C�awt�Gft�I�/xJ�S|S��u�pl���0z��H��������� C#G�~P���$^�o���nίш��q�� nhd��Ep��vt%y8���C��ݠ��N���Q�|Io"@�7*���Mh)�PwHI����}h�ڃe&�1w<�*rR'�Q���0��~=mp&���vd%��xH�v}����GF�1۠���=�[��E����ٌg4^W�C�j4x���s�tKZB�����.D۸
�J�=�ə,L�$+�gy���:m�yg �:�o���e4�H7��c�)���'tX�\���7�e�2ݔ}�)��ty�A�G%�S�$�>�wI���?��:T4��~	�t��IN�������g�N^O~�9����Gt�h�����;A���_�/g?��e���52-�1A��^p
��@�3�v(_|���v��5{?��v�}��vk��\�.�U�u���!���V4�|��Ս%'U�����s��a�(���x�+�nn���!����3�N[��o|��i̝�b��h�z>��n��5��p�"��L���@]�F4�cK�=�ƒY����^t�� 1ڑU���#�˟_��kR	�rj=!G����y�&*��v�	0�P���P�#�;�c��X[��*N�ۄ��j��x���o��'�/@,�\d����({Ki-a��V� �b�y��5H��@Ӊ���ϱ
�ǰ�A7���:n��+�9��c�/�Qj䑧�|�#��'��q:^Q=��~ߗ8S�s��F�t"��I^�Q���Iw�u�)i���.��W����F%f~R
�;i��?j'����~�vc�7�f�����!�%g���K�-���,�I(L_~ o@��U�FL�:��湥Ӄ`,]����wHA��B4�������.���?�G87�0v����;B�qb�`�Ȯ.ЩET@[�5�����i��H�;�WS�p@>U�j+�-/�'��\���S蹣J1��g����g�e^�l��!��Ͼ�?�'4�2�Tɢ�\3�
�)���H�J��;�E��\��1�*��>��ѓ�BG=U }xR%:)r
't{�U&O|��v��I�������SF����tv��,\�M����q��������~ �����X7����F�5(�c�|�@KT2�g
�	'f[�JL<��?m]�mC籊�(����è�V}��0��"#*���g=�4g�٥��0_\n����<*�K?z�R��q=S �g�x�}��1D;�ֲ0g�?�
���.y)S!��]�Ik�/\����ʹ�*�t{� �����i�;}9}�F:Yo�x+��.y� <�����
�S�F��޻33���8"�i��mL'H<a5�D��/�ϦD;�A��*S���j"@#�u����y��'}�y�Ɔ�S�Av�XGX/O ���K1�B}U0ga��k_G�%���IK~�T�a��xU����	#φM�۫yڱ�6���f�Ӓ�w����|���,$��K �;�c�)]r���=Bp�"�� �l]���%����xf�W��I�(4^�Y�>��ԫ�s�ߠ�rC�nc��
˪�8��h
T�%^hJ� +�����q���TB6@�f�ɮ�n-�~� �؏�C
+��������ݙ�+�+c��m��R}u�nc���t��M���b���Ւ,���-J~=Q �0 F�x�#:1����R���{ǣ}�λ��XSD�*+������
1�>zE;K4���ï(1��S��F��^����nf��D��x_9�0?o����6�B]����R���r�苤�m�gʨCFi��Z���Ls����2��[��������,zq�{��J�,y�z]�=~b{*��c.%p]X ����);Q��d�c�&�ѵ�
8��M����3S�9h��E�4�}͖��x.=���NDӱJ�N\�厐yM�&������Mw����P�N�tj�F�\�7fP�
���q׎B�+ =�L�J*�Nt�����&{=G�!ֱB#�g�ч��$���Q��;?�u���{��y2(�Or��R�)��O�Qwh��w�X��RR1y鏑��N�+��ǈ�㬋���4bՐD��y�hG���#P,PY�����v�_�Y��s��[��-�qL�7��"xN�?��v��ed�R�4U�wU:�[Q�A�|%a�Y����?�?��0�i᳽-Ϧ��sA]$.d-/��Dь�߈��]��Bu�%����v_u��3��%72��Mލ�qRB��j��* �_�nga��J�!>�yHɅ͠���Є���t6��'z�h�c�%�<JɋoNߋ��$� �(&ggSP��C�?v���ub�G�@����z�O�=��rJ�* �(�\��ݧ��5���Q!�2�P�$�f�#�3��뜈#_� v��j�=z�������Y˘J�MgO��9��3An0*6zg�Ă"�ɭ8���D������� ]7�V*�l�/F�If�ԃ
+�R�r�S{	�P�T�)��Y����k�J*�֡���o�s�m��i3�;N�?,H(����N�-r<C�͔IϜ�k
@
�?�;����Ee[7�	���Rtu���	v�����?����� �J	�;N����tP�v�±�D����P�Y�K���B��ܨ���j0s��}]��y���屄fOy�R�/�]m��y��h�'o��Y��m[>�Ș�Wq�Ӡ��Or������5Bq#ҥp����D��� v�[���)T��N3Q�*��X�R<UfX&��_*��4����MD�Yuxӟ���g[�jI� ��E���CkU���=,>�l8)��7�8�,���.)���_T5���YO�ZiG��JO"kB�)�C��1������3<��ί��E�|���)��u(\ڕ����:����S�-y:��.5��~��/3��8!W�F�%��?��yE���^�:/j�[z����g��Q�R}�^|�'�����!��e�Or��7�))�b�eB��~�������8W��v�U¸����n;��z�fY�Sv^��l�%��(<��l'�M|{?���x�C�1�t����3��_�F:��
�Dñ�w#��c�װ��Y���s�ۭvH/33��u&��;���̓Y�T.����i`�jW�dRO�
���n�e���0��o�O_�0X�AC�ċ0kA��Riױ���W�@'��Z�kjw��yMg�
o�g(Pfu�[c������s;]�z���i���ֻ�/����ǟ�{���K� �xp� �NU�@U�
Ϲ�YU�&����.
�'=���9?��G�P�W0;VR0'cPy�/�O<^Z�^@Ն7�`$]�Zb-8]r� a���>�]��G�K}�=�G'mI�`��3�1��X\�t��L��>�t]����#�'s���h�j=����ce>&]r� v�Ma�E���Edp2�Y���Jt�L��\n�w!-hR��E'ղۿ�������ٶ��R�vD�v0�_)*c��Hh�{=�`���3�G�ȬD��9,��z�J�^��k^|#m0���t�2��W�N7��o�O�q��64���n'�MO>)��[eL�9�չu�p�c�ՃW��#/��i��ܯ߷Y��[�ȉG��1�~��ͅ���lw��5c�����#8�ͧh:�Q���/��?����aVa�iԬ�o���
#@ׁG4��3���2���7�'�,=U�e�����f-B��ei+@���{�����y`д��e���Y��G/7)kX�,gd����>^i��'�o؄9v_u�|�b1�##��"�K2��"-k��&��uoy�W���G���|�;�����aun��bn��۳o�w����$�����>������'_���x�s�@�m��q�kyѵ�T�z��ޥ4g��3ѓj~ξ% N5�z"�$Թd�M��=4ct۲ڗ�)@�R8-��rU鿿�?�x#*T��8��<N[���w���h)@8����u����Z7�,���l=	NͲ�������� =�l��TY���O�O,�Z.���/^s2$�7����ɳ쐖�#�xqiV�+o�d���NҔ���!ZZ�Tmw���ҋ�NKFj��-b:D�=�~�)��U��}O���b�S�'?���|ALT M�
F�yPV B���ʥ�òt(������������j�m�y<�%��k癔��vQ�j���%:��2a���!L�N�81�5\����ճU_k/61M_�Ԭ\ۻm_<:�И�5�l����,jO�T ��~�4���EsS����u����q�Dxqjf6��Y�K���q�l�Pѻ��0{�Q3ն*��ͰO����?���פ,��GB]�W1)%)������|-��r�77������g�~�]�m��hW޸b��-)5Cf�`
G�of
��A9�����;���ot,捞f�H��B* F@Rg�
�5_���:Yև�IN��	��1{�9����dݗb0����zIg�8��0E3��4{�=O�X%�n���S�NGv?ӁK�/��q�X,�[�Y!�NN��[��|��da��9~�s�_*Ġ�$���/�<�+�
���s�b$�Rna�Ğ��5ֳ��T Nn����ocȡ�5CWprM�BH�̓q��/�B����y�)er���.��{E�  �IDAT^�F����s'd2W��NN��.M��;�L��s�����e
��^8�����ٳy5�>P扈��Ꝕ��b�����ј+� ��Y��;�Y��G�]��{���uŐC
!֮D [��6;���Y�����\In��W;���dX�ſe�ĺ�����|E�`6�sG�#s������i��"a^�C�^w?���_�ҥ/Žl�>~|Ǉ�D���}�8*�"tx�[��v;s�y;�O<�Ⱥr�ju�t�K�ʕ��Ry_�Iֲ����BY26㱿KxfԱ�3�=-/��H��ǔ��:����L\��[�~���(*
/�+a����jXO�vQ𳯃cw[����%�����R&˒X��}$�m�:����}��`jfx��T�az�c��s�u����8^�1�&W��5#�Xw-��b=���Ib���?�$�{�+��/�������F�S�_�������� ���	hY}F}��*_ܞ|pu��"N��p��;k��(�T}�L��&���_�YĢ��qlۻ�<ͼ����hE�*k�:�OUf���d,�,���)��i��$���"R�ld�G����8�����E����jM��W��"�nM }��R��Z�Q���Q���L|�B�z&��zBQZ����1F:�&��g��+��!=�nM�L���0��e3����/�̌�h��a�M`���ZV���"�F��3�3�6*y=�,���"�AH�Rd��6��v��z���I�%}R���7Xi��A�X �9r�`30U!�5t�����a�w������К���m"��p�3
y(�$?i�<���'����6�C3�^*���W��I�(�Y���Q�@O��Q �-� ��~3x� f
ZF=�f�F���z�����5h	����0k �0
��7�7
`�@�%` ��oo���@K�(@����(�Y���Q�@O��Q �-� ��~3x� f
ZF=�f�F���z�����5h	����0k �0
��7�7
`�@�%` ��oO�2���B����B4[��Jf��m'\�4X@�m7:3 #��h���[`aQ�g�F���X��W��_�vC32H a��|�xNta����0	�.�2Z�J �2�Ȁ	�7�h��%T� �x6��0c�V��_Y���W��D'�',�Lf�A��@+,���r�oYY��B��'�Dy�1K8`��,�jåՅ������k��m@%���x�DXnRy��@ �T0fط��,��r��0�)�s���P'V����[ft���]x��Y�1��E��T<�� �THfط��^��k_~�" TR�/@�?�*�r 0Jp{�� �������U=�S�P�;����0Ǌ�(���K��w�����"�q�ǡ��(I	�x��5ní��ܵ?���)U��>�D�&�D?TV!~�7 & �Yf׀�@� �Z�oW�[�'�TI�'x�m����.�� , 0� �����'	 g!�#���6|���²��}��D��z�=䤴��?[XX�!J��\�0J�H���% �b	\�,�tY�g	|`O{
ξ�.�,���x�X:���    IEND�B`�PK
     �kY�<(��k  �k     android-chrome-512x512.png�PNG

   
IHDR         �x��   sRGB ���    IDATx^�wtW׵�;�z�
5@$�$��16ƀ
�P����8q�:�sN�{o�q�}�����ܜ'N����clc0`\(BB���$��~wn�������Z���sΉV�����5ךS!ȷ�W#�Bh�` MQT���T�(���(DQDM*E�Ba0*� � 8��J=�P;�U��!�*u���AT�EG_xX��DEF�lV�6�EJ ݦ�4S!�RW�A'  qT"UQ�:D�P ��O^�Oi���3K�z�&uB@?ݯ�:Ri��� � ����h7m�M����{1��]�: �6��D��J�V!|蛾�@ @@6�|JD�����FQ

q �mP�T��E���(T��@ @ �%�ӿ��F9n��: k_Sg)*�_�Jk�(�nc1� � HH`PQh����ܸ^9h�~�8 �6�i�J�R�ARq�Ϯ��<    �"�ыA�o�<���ZsK�u�@U��**�Dc�1@ @ ��@�"����ʠU�X� �}M�0D!�b��Ǹ     ��ѣ�+_Ya������T��Dl��@ @ \B�OU��|m��H��ib���;j|_7=��t�ib   p9U�wB����QZ�Ba��n�z#m"�L���8      ��T3H�m�_��&�8 �_S��Cڇ�Ja   ��ԩ�}��S����g`���C
��~_��A @ @@�~U�G^[�����(�|r ֿ��RU��	�z|Y�  ��B�/7�W��hGO{���7�����+o'F?   �(*�ۆ�>��r ֿ�>�������¡7� � �H�O��q���q; �oTW(*�EDAF'C{   �	�
�|m����Ȇ ���B�JF&A[   K	t�B#Yu; �_W��� )4�R08� � ��q
� �fo\�p-�qE��n��&�wD4   E`����Z=��r �����@��3 ڀ � � �#�*��k딧��`\�RU�=H�3J�@ @ � �GD7�w`L��75�|q�)L�      z�����7E����
�cD4�1�M�@ @ @�V?ݸ^��a`�f5%h��Q���b2   �	(D-*�ԍ�Ƒ��������� @ @ @@U������=���
�4"*C�_!�IA @ @�,CC4}ӃJ��x��U��B�5;�  C@Q�oF8��X�A�&����/f�0+� � �J@���!���7��+���[�|�     �T�~��:�Q�5�P�=�p?�&� � � 0��H���� W� ܿQ�����A@ @ @��\��*`��S���;�a� � ���J���ʂ�N �ۤ�j��       �G@%�܍땓�Q�K�n��_���������@ @ @����q��?�v ^U��B�@     ��6�Wf^v �ۤN�:�5�� � � �:Hi�ߧ��B �oT����
؀ � � �7E�6<�l����߫*�ԿM�u      �B�m��� �۠!B��@ @ \@@��|�E5�/��\`0L   ��P�Q־��
�/@@ @ @�5�*�6��K�1�� � ���	(*=� '��$@   w���7�/+*}���J   E���`�      .!���� |ED�]b2�  P�Kv ��(4@ @ @ \C�(; 
D���a(� � �@; �D      �!����sa(� � ��F  6� � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  p�08�G5�?�.0@ {��l���F���,5�8$�Z��'08��f�ᳮ��Rog���` ���� R��+�
��R`p��B��B(0$��C����_��@[�	:�k����%vM����d���z�:DG���z.6[?����C����ɲ��:��S�
�4:�C 0$�B�c($2�B#b)8"�B#�(,:�B��) 0�E,������t�j�X�w��[�SL�d�5��-;_�%���ϭ�μ̙�(�`�O��?CG?yŧ1�Y�B!��@��	�B����D�(�(9��v *?|�:/�I�H2)8i�
J�\$�J�E'���.*��
����f�(X�m��/RW�����e��� �x�D%fPL�d�H�@���k ���1���[I.��g,�	���R
��"p��-�t�TW[4��@`P�~B�#�"U;^���_�@_��0;�i���ã�����ņT����M��SB�s��b	t�4PŇ����a���^E *)�&N���b�@����=�	5T~&��c�Mϣ�k��[����lF�˗�G��z�;% ��oj�����C���)�u ��n�EĥR����3z	!�|��N}񮐹�iRs���R�������D (,�&L�GI��l{Y�J`h���:d�ҹg���H*Z��{v����}T�����t�%b��w�%&����x�������A�So���ٖ�\q����o�������*�4voﳇ>�sG�p/ �,积����_蹯/;3o��I3-{A�J ��~�f��
���m���@O�:��9R�p��+l�C�Vp�O����O�\ۙî���PtR��\� �B�o�h�⇴���	T��@ϝ�[I�hgF���|7���!CM��gPV�R
�4M5�9 Z��MNÉoE���(>�����g�ֺj:�{�
3��\��dՓZ�x_��W���/C���	����9�).c�)$\� \l8Iջ6�ϭ�d�,����n5_z������稷�Uz]����upP�x�k_	$N���p�A_�u ���l�ᾩS�Qf�"���h��K�e;-ۍ���o<C| �p!���Qx����\�  ����KȞF�����@�t}]�T��Y�7}l�hƝ~�_W���[��Uvsz��7���	�^M�* ����#�u�J΢��4g0�b*���I-5������L���
�+ XA �x1�N���Юr �7�?F�G3V�Ȝ�0�i8�'���G����Х�� ���F��@��[h´����@������D���Ws�(�ଖ����M�Ș���|�~ɕ�� �&��*�Ί^q�P�ы��\��
ڍA�x��F�h<~����&�6���9��=TW�����	��� �s��;�G����Ѽ"0��Me[������������O��������&�=�NJΝ5q �w/j�w�:�|%D<��_�OM'�W��4�I�D���*�����w%��o4���5 g��l����g���i�h�%.���Ĺ�)ir�w���4]��b�?�Tմ11Q`pe-����8��io<MM�Z��������,'�I��t{hdܨs������� u6�QG#;g4���u�>��8�72Z!P��ڇ�{A�B��("aE&L���������EM�h:�����l�d.
\�e������k����헒����y���?I9�ZNj�8�g��Ծw�)�ę��c)"!�"�Ӵ�����������Cs�/$Mg����J|��W+�%�Q6_�h>{�!��@��
2L�3O��r?p"08Чe����B#c�o�ڇ}:EħgO�Y84���p������EOxC@	�B#����(��e�|���4u��su�5<.����Nzhf6���;��r���:z�������G$�������u6�������,�m��n|_# 8Ts��BH!���A�L�U������w/bR'S���������%N���v
�Z��{.bqY�╏{I�|!���B��?��?��#��K��a�VG������\x���z�����^9d�L!�1C!���k��@�w�����j#v�zڛ��p� v�8 &����_(l<C�����uѤ��f�}�$%0P^�T�c��Fm���Ժ���oy�s"2�����ه�$�z��5`�0�Óݭ�~m�TK}�����s|
E'eQx\*EĥPXL"��n�p����V��N�eN
�*�㑫~o� X����}�Z�VY0�\Cθ���1V�}��Ա]�P�Laщ���#}7	���S�u�Ś��Z{TjC8�(W�Lʐ�~�
�Y㉃~W�)��5�1��~�`���=��o����]���-�J��w3����0��?� �Y
�|[���@��/i����q���竿Ԝȵqm%W8 &�:7��:�	Y�&�p�h��G��;��@%��o�&��Sҟg-����L�غ!8�֙��מ�;]�E@D\�f �W�M3�o��)7�LÍD���q������G��K���&�f��s��z競���DK��u�.�ĩ��c:w��US���E4q�
8 V����]�q��N��2���T�6���6]8sD�V+��7��g�a�4����Nj��+���l�d��\�3D����7��96($��V�\c� �v��tR�ۿ3qD����*���Vɭ�h�1\��A&�p7%N��S-���_������e���E��P A7�,��_n1qD����|b>v����Ky&��G���/��+ �o������gKwй*g&��R�\2��������7��l����oƉWf��c�"�|��/�A8�)n0�R���6�������i�g��#8 f-o��__�YCJ?g隽�����T9�T��g\�>:uMY��S�K*���g9��S��/:�`�=?�`�6��U�h�p��x���&ߺl����F��Ȧ�e��̧��-�M#�o�j���=⋁N���V�0k���vQ}���s�8\�3�A�%�5��E�?$�K&w�}����9ڍB �{�F��f*�/�Nj�l)ys� ��Q�b�?��~.	̥�!�8�����Tc�Vt�c)������kT�k]l8i��>���
�~���vѡ��6c(Ǎ�=g%�8No�n�����)����C3�����q@���_�ֺct|�&�'�aFv��
����ͧ�����0��0m�O��y�K���`?�my����%����3�R�����Q������O9.9 ��[�����ʴ�&�t�ue;��B��mV,���[a��c"�o6Q��q�e�8I� ��Z�����]�T�Z\1i9�/i%/_����}�mT��Y�}�0�ӔERtr�C�z���-��u��q�h�@?z��Q��=<6����=� ���wo�ֺj�4�IE���OJQ�&�-���Ў;���wY�nPd7Օ��(��΅%�Wq�6�/����G�'�<�U�HM��
h�H�i9�燧�=��T��Y�� �����?��Yf��������bG���z�/�0�s���9k�H����9Z4���������~e5k���ׁ�n-��d-#ᚱ��Iww���g}�ZxJj��;��`���0��%���� ~����Jq}v~�v�.�w ��.��
�y?��{��E ��ϫ��p��zB�E�r����@_�cL���R����v�<�^JȞ�v^���=L%k����6����	�$�Y�5��a~��?��q���a���=]>��]�5�g���	�Jʤ���j�~?>��r,��w�H}]�PF�p t@�	׀��������U�(P�b�3k�2s�ƩSn����f�ʱ��c����wNIx8 ^��#{��|�����Ҹ_Ϧ��t��-�;�Y���VQ|V��Ye�9����|��z��u)����꣗��������[db,~ȿ��К��^*��q)��̻~L!��n����������"�����8v ���=ķ=���σ�܌m����c_�䇭�B#�x����2{MB��^ޣ���v��l������NPW6k9[I'���\�X��� ���߼ �.���b�ߤO�b��Ħ�Qނ�vL��s �/����{^�CZ(�(���uM8v�1\����}���4dlG?y��ϟ&"J�q+M(�,|$���� M�~�j�-�a�h���̥o���{:���}
�~�"����>3k���{�0c(�#�z�I����4������i_c3�� �:]���g�y���M��k).=ϛ�����A˷>�7�V/��bR�	 ��=;�{r=��F���l<>}� �x*?��ß���ͳg�Iɹ���P/-t{��k��F'Ќ�zI�<��c/h/ �x�Q��n����S��e�h�1���ۧΧ���No��`���IEB���H����4i�=F�����c[8���V��� �>�~����^nӈMf�M�4�&�p�Y���8���?�kY%K)%��H��㗨�I�|$�r��m��ԕJ|��	���+~�Ȃ����z�a�6_�ƤN����:���o?��~�O���W�
?L���Y�W6z�
�k�β!�,ZD�S��5ˑ�*?|�:/�;F���b�8g9 #+v����t␑.�i�Dӗ}�5��1��0�~��� 獘��_��!C�'��c�%Sd��:{��t譧�H�~1m��'2|2�K�������j7��=M�C�d���1X��竿����h�&�a�
� ��?�z_8]N'?Ǭ�,�Kps�? 0�^��mMtd�sz��ưw�    IDAT�ݬ���xsA��{��|�3��F WHɛCY�������G�&u?��m�p�I�Y?L\z>�.�O�' :y����Ζ~���;�M_�(�E%���k�vZR;mҍ�P���vN�ws���K:44H�o=�(G���4���-���BdtSn�E�Lt=������yG�	�sѦ/�¢�(���_�׷���N|椺0
����i�q�c/p��Co��ԡ!�����׾����B�{7��㮈9��s8�:��ݛ�����?&u"�/����� �@�ZWM�wo����M2f�Fi7�B��2:����f0��x.j��@�����2��M�o��Q_snZI�Y�p �,���ۨ��#]Lk�ߘ�r��헻���|�3���i����@����:��F�"J�����}E5����6�AEw����Gp�����D}�m:Z�߄��r>�Z�1�rn^m��ߴ?{�#:w����
CP4�w�������T�ʶ>K�->e� 쌱Sv���~O{3�o��]kt�<So�U�|�y�#ө`񷅱9qO��(�
�+NA�"���ss12.J&��Pɪ'HQ���)��FusbX�S�r
`8 V����7;���\2��8�����{~*��9�I�of��	�D��̻D>pD�B�ݲ�GK��^���h<#���h6��� ���ջ6�ņ�B:>s*��_��w�D��g��%)�"���I��ѱO7���򼡑q���*\����*���VI��sJ�ߟ��w�4P��8a�\�1����6�:�� ����/���oP�bO����&i���v�d��i�T5EG.�{����rb���O	���ff��:�F=M�f�����;7��sb�zc}D�*%�6�1����c���
sS���3
�"'��<,}�"����ǵ�P��j�v����F���ߗ;U��ERTr��f��#��P�j���;������H�@p ����O<���	�M�iw~O����~:s�j��sLs�i7H_w;�oy�8-�Hɞ}��(J��BQh��_P@jE��W���%���GqZ�߈�T*\��Q����l˟��CLL��J�Ȕ�I7N�g�Aɹ���w�:�N|���T����|���vJ}3<<6�����PVN���+輴�����Q�ߺ/��7�oRtJ�6��[�!�N8 g�wio���;^n&?���՟��.J\�")��&�Y&���@�_��q2����B���08sD\*�1���(P�WE5�dy
�7����iǙ�8�$q��t��NP�kUU���F�m�^�aF��I3i�
w�J�x�8��re2Yu�]/�k�wNd������z�/|����X`:�>�Hm�'�e�S���|ʽy�^�&�J�7����F��N�HS�(6a��S�rfF�� R��ߌ�jIuz.6I���9 � ��޳�gG�Y���O�T_���olz�-X;�p F@���7��}/{�2J�-�J3����EW4�I���~`����r��������zgϺ���fi:4�*��_l��X��ſ�տp]~3�3i����r���l������Q��`D��� �Ζ�YӮ���_"�De_�Z����Z���ߧ����oFǈ�*X����g�z�O��i,���?�xO�1�?{|����t��'�g�)�x��x`B5?���b���E'���������x���s�����c�u������=
��QI��������x�i��\1'������
:��[���3���8���0%ν��]DHʔ(�x�uS�-�A���P��|�ġ b�__��;|4�k⋉�J�M�)>k���9B/��x�b'���.��>�~9I<�c���R��mT�ޟ��3�]����z}����_R��M�ϊ�,|��ǹ}jżV�y��:��m+�wl�ꧯx��C#/��h��tAi�������'NI����&�%�?��a�Kԗ@o�(?�z�C������������%4���])-g����7�����g���_dp�O��(�
p�����7�*��>���K��_)p	`���_�0E&8;
8_���k�͵�/������/m�\��R=8 �,ֱݛ��%$���fgsU~���N�1s!��7�M����wPC���Kx\
.��u���)d�PV�Kϣ\ϑd�_���g8�v|���VWmτ&�b���35�+���q�?Qq��YK)�ox���ک��?��e��SsJ`��EvDU��0����?�����]Z��3҄B�qE�F��꧿z��$~M3��	y�{��o�G��
*�J�S����=��MU���~%��6�{�sP��p5H�
)R'N�I7�s�
N��'�H��ύ��6�������a���LpX$M[�}

	�
�+�q,�c�"$42�f���1�>���+��.\��;]�Nб]���]�[����~���Վ,e���O�~�$��tC��Z�|���w�/�:Q�o]O1i�_�k�+Hy�9���)9o6e��ؼ����B�޵�.8,�������͘�����C "%�d)��_}�ϣ�w�b��9/�	��*�����b���xo����;~r�;�r�R��O�:���ɸ��� \���u�J���v���[p?Ŧ�9�=oPK���.+�(4{�/��J�
U���t��klt���d���hX�~�
��?ctX�ڻ�0��0���0�ώ��L|�ډ�9�r��(>��>����@DW����3},�< ��	Rt�O)8"�	�^�#?�+����ˠ�8}.��I���W �� �h���;��{�m�^��|������h?��O�Rk��y�g|8 �(q,�c�"�K6�e��D�o�������N���2��c�gʅ���=�&ͻ��G).E|d�_��8��K����F+~��I��)�&�^�
�����)ѯz����׈a�#�	�fL8 Z��!:��o��S�8�s��э�����WS\��ҿ��|I�������W�p�_򦓥t�Ky+ ���!�@��;n#���h�S_�G�5�
j�H|!x��(<&ɴ�� Q{�:��Ӡ��q�YԎƳT�C쇓^�ƺ��w�۩��������̒Ŕ�?�C(���Ȅt*X�m�?w�G/J��N�����æ�e�Hp��{@�&>:e��6� ���O���3S����t8W�]�@���6i�(c�"#]��咺\ZW���&Q��G�kz�%|��a Y�Zqb+�w�����^����;��z.6�8���B�o������ "YN5)��&�Y�ka9n�%r�$L��mZ��@_�o}�z���<��?�b|���OI�J��5q�P�N��/W�?��R}�n�d������VR�E�T�; �=T��������ro^CqSt�{譧i��Kw{Q
���iʢo����g|@����gf��'ϻw�!E���U�H{��y  �pD������S���d)����݊_�+ 0�r��j�X%�w D^��N��
eJ�����c�z6cXT�V��	�ݨ��oB�Qk�8�_xԸ�d
�=k�xO ������ņ��Q?p�x��H@P��r?E���,;]� �����LP�ƛ�|���j�F�d�u�}�j����2$����!�|��g�85)�(�xG ��ѹu�5�����Z\� �O��ف��;J+��В�h��z��M��WF�"J�:��(g�o#~��qB���J:�ٛBq��$Ҵ;�7��?����Е�2a�͔>�VYՓ^/���_�0q�+�����:ۨ�bu�6RW�y�n=O}b��Xa�c������ �l�����{���y7"�{��l��.���}�(J���*���KSn����=���T���e��nYK��D-���-�I
r��g�
o&�6����Ѐ������6�K���V��M�IhT��z?�F�\�
�v D&��`N�2:�ŻV����w�1��W�2]�k�+�E�{��f���
i�M+u��r��N�}Cw{
�V���C#DL�s:!��_��Ȉ��|�t�=b�V�v *����Z�$}I�TDoXax��ϟ�����p?&�p%N�)b�q��o�[���sy��.�鯙p�t���7�}��D��̻~,jz������A�b��P��E�:�F!����Co�Nt�4�U�U`x�����$}ƭ�Ǆ
Wk���Yf����x��%Ng�Y@9�W	���ɝ���Ɍe�=(4B��N���k���et�sAG�B�+���0�?4�O6���~":$�΢��w��z�9e�de��ėV��k�U
ǂk�5�tC����_L�W!21�r�2t�g�Ѯu N�{�Z�TX�t�1�3�����7��B���m���Gy��6�����Б��#>I)F.�y��[�Z��e��ߢ��L�5�[5'�������q����R�r����8���'%�D��Jy+�����J�K�뭙��;w�:{�#K��;(�~��Ϩ�P�`,�E��5����`���=�v��)���m;���L������,�J����*?zA���~�z�F��pB��z'�7�E�>�����8](?��\��ě�]��/g��U"�R���GdUOz���~��V0)��8<�?eW: u廨����_A��T|�Ͻ?KD���JM'ɴ�F�e��ӝ��j�N}�/\�x��ɣ�m�gB�U�����z!�/��5s�~�%ӷ�+-u�P����y�ޚg�ĉ3hҍw�4w���TW��Oc�ՙK�їh}���sq�iw~�+��	 �x3ir��v����;v�S���O����,�(�a�s ��롷�V�eҼ{(1۷2�"��|ّ/=��*��@�-b�>����}�bR&z��	����=
�M��>�w���o>E���q�r�ޤ�Ŕ>�

�?���g���}o�ٛ����ǈ��"\�z�_���/�	��"E��ۋn
�{�3W�*|��d�/�/B���i�q���2E���3(m�
��u�9 ���s ����	T��a���80ǃ� Y%K(%�0U���l˟�<㢄o�s�ߐ����U��Ec�JΦ���)
���E�ߡK�(��5����?ھ�f�r��������Ί���|�^�υ� �S�Qf�"a��=�!���R��<q���(��&�t(}�wįd��,+�z!������ċ��S�f�Z��l�]� p�r��f3�=^��Qd�9���sF8q�����=�&ϻWosS�u_l��m��:4:��{y�����"~����1{����)>s��úb<��y�u��w�b�D�h���?08�	*���� ~��O EH`p�zܴ)���NǨ�,���A=MMoS��U�تH�_���O�Z�V҉�o�4cܹey�1��6pҝ	�Y���Kϣ�IE�6ٴ��+�cW9 "�l�z	�ڵ���t��iK,�	����⇶+�z�(�����^9a\�Tʝ��g8s!g0�UdK�$+���B�_��L�@���(q�t

	�SI�r�0��C�����f���!���������UOS��
P�ֿP_W�ich���LɁP��K��t֨
���Kϧ���6��M���\+�:�&�Y����t�p���N~����|�Wt��(8,��q<Ԗ�������g�@��Ӄ�!Q��xM8/�A��18`��4v�̅�V0ߧ1�����\yN�>�9�3Q+�8 "�1�ǥ�4�s�7?@g�o3q+X7��	b��ߏ���a���8����Z�Q��nqLٌ{&���!��w���;��,�q D>��b#����79bo�ݺ�b�rl����7��l�-s�6I����:���蕬~�/nD��`A�� 0��s�vN���
���Ul�-jʢoRtr��{�	�=�}�a4�2�ˍ˘B�7�1m�E�\�1",&��/����h3����|�7e�į��Q\� 4T~F�i�.
Q��	R� S���v��z��1��ciS�R8V�o����(��3���-�/�s�Y�I�Λ8iM����V�N�
�w���Gӌ�'��7q�P��e�h��vf#�҈��~E�Р��LjG����_Q���F�2�-gy�l�f�2>fϺ���f�e���A��9˝:��,^��uj�� �=��o�e�˞���sJt.��fe���z;[�u�:vB.��r�e3�iHٖg��Z��y��c�
�,�EƧ����y�w��)
M[�]���$~� ��0�&J�̐&�d�O+^A\9��/�R��CFT2���+�R]�� ��@�� Mx�`��8`@���HW��eͧ.��O�K�w N���N��p�IҞ�Y%\֘��.\��x��-Q����*>|^X�'6*.#�ro6?αݛ���%��42!�
�|ی�\7�S����LI���]���b�������V	����f�h�%�{�dɻe-�N�s�	W���@�;��6��:nt�t���'�4�sξ�����������BM���aė<E�1o��(J֬��5��G ������P�I!uh���й���⹓��������������HG��U�ZY� E��oz�μ��i��x���t���]�*X�.}���ߒ̖��6*{�Ofk�x�o��&N3uL���?W�~�d��7e��lN������'�~��~� �c��,B8|	��X��cOk�Q:�Gl��l���-�J���|�v�}T���Q��F�Ѵ�ߧ�� �Uh���SW�1��<��G�qN���Q7y[%'?{�.��¼����9�U�'_~� ��v�$B����6u^��J�;@&ߴ��
M��l���Q�H���Ǟ�C�y�+ �py�'D�w��N��g�NiSo���N�7���_�s�s�x���}����u���ǝD���n�qp��Z�a���_�#۞��lClF��lݷ#�w�[���ʿu�x����1�?�Fh<�����q���F�Nr���*�@k]5߽Y�͸�G�G�V���t���b�#��y!�خ���p������go��?�֗����&U�
�|��?@�p{��Jb����{���v� ���W�%������ާ����E9>j�~����d>��0��"C$�SkO���WT����N�'�����ɻ��&C�n��EE���h7���� ����QN�c»�/ �E@_��-�o���������[q����	Ǣ��c��73d7����T�/^Tu��R��`���0A*��*� O�"*�$�u;���oR��JQ��742�f��c��Gj�P��jg��]���ҭM�O����G3�����I���#/�谞7�&}�B�P8ߛ����K���/�졏�@��p��'���!g~D窿�c*��`.�����1��۩|˳B3�Ŧ�R��jx��o}�����bV8GV�������6�,��_n���cǤN"���d�K�z�ąTDHL�dʿվLQ�~Ng},�T�s�rl,:��v�o�(4�ڋ�N� h���M&y�_w0���<�[`����h��{����� Z���O8���9 Z�M{�'�Lnf�bJ�7繛��ej*��	c<vL����i�7���/��aY.���~�N�Z�s����4��I�|R�A��{�D�m�v9�w�����ct��Mޮ�����XXt�������,U}����B�yss��:Vl�;u����v�o�( ������Q9M���iaK���-,de�^���M�I��=�8���9 g�o�������Pp�{;���"~�vN��\�,���C�y-yME
W��vȱO_����vL��q�Tx�w����N�����b ��q�Ħ�gu���p��?Q_g���HΝEٳ�un�t����uNo'�0m�z��q��������]LogwƻCo���nY%9����,�U=��r]�����@"�o���H?��`�7���W ߜ�Ԣ$w�}�n�7�+m,}�wB����4��&�]�����_�i+9|�������l����������~��c��ǋ_�� '��w�d�ѯ �1$% @+�b��r�8�'��6�	a    IDAT�z^�����V8�2f,�
�3G�_;�,Ӗ}��c�dVQJ��׷,N���Ȏ�/��o�W@���tQP����l����W����l���jF�v���d�v��tMR�����T����B"b��~�q�ϣ���|��V�cʘ���~Ғ��((� ���[��ޮ��'���@��o>EC�
�d-�ԩ�l[����ce�%de�&�{��˘b+�ʏ^���:[�42YtJ6M�M��kDO�ʾ��̎�zֆ/�@���������8��(�o��
W�4T~F�
�	2��[��`?�my��Ա(1�0KG��y�����B���(s�"=M��
���"�����3��	���x�]X?�q jn'� BD{�ͧ�����0��\%��%�&��J��ǹ���Ѱ�::t^������R\����P�ͧ"�5of������И�D9�WQ|f��n���� 2����f�z��3t��W�֒�,z����F������N�ം�(c�m��>֠�}E5��>��	���)GD邶D�����,2=g��j����Af\����_9���/ �ϧr毦�̩�֞?8���	2y޽��=mDU���DmuǄ��]��A�r��Г��CN��}���â��^��?�N+~���q�"�ז(2!�
�|ۛ�B����x|?���������'��E	_|<��?DMohތ�E�6�eI�w8؈��k(.�ދx���#'�p&DΈ1F �c�<�ew����?J����WCޑ���_8 ���k ����L��E�r>)�s)�d�U��pS���R���"K{��С7#z�9?�E8<1F �c�<�O$��$�z�C���$���������1s!����G���������C%2�R��Qm��C��N��w��(,:����(���xzN���2q�f��5��nKt_l�#�?�]gA��X&����s��z竂���p�w(">M����e/"��321�
?t�?�+���Q�(u��co���TW��(�u�[��I�a.]JJ������
���bT���Bʹi��nB�;��9��?���A�T���B�vR����v3���e�O}�.5�.�0$"��/{T��?��"3X����D�#���1^׶vʗ�ޡ��4��j��&� ����\�5*q��t�ݾ��)��+�P]��u�=Fr̈́����HQ���,U}��)�{;H�M�(>K��]���= Y%q�L�t�]��'�^����4NJp汔��C���O ��.��%c=i�[�擇�ԗ��=�W��|��C"��C.btΫ1��$��G��} ����wPr�l3��j��}[���:��e���w�-�k)��"�v ��3��U*����p)�Z�]#
�~�:[����g;Z�?A�<���??y�Yd��"3��tC�߷���_�5��o��{´�)}��6���T�v DV��L�@K�����9��'Ȥ�>���na�r.�I Z8�g�U�� ����D?�����%���4�N���ɔ�p�S�u� ~;~�����@���-����{�I�4o�	I�=��T
��\�W@ƿk���ܵ�6�-��&F�ߜ��D��VrB8~1�q�	������M���R�3; �@�& ��?�phh�n���35.e^��	�k|����HO���J:�ٛz�J�f��G����p�p��c:W��^;Mm>��OQL���D���Uw��s2Nj#�t6�ǉe�.���麓��^ ^_�%6=����YE��n���8�0��bN�: G������0N�*��&|��H|22��g��I����/��8e�+~D�Qq2�(�n����$� �#�IΛMٳ�p���t 8{\�;�x�
wS�$�<�S_�Gͧ�"�ĩSo�̢ۥQ�侷�k��*A!aT��	YՓV/���]p(�)a��đ@��R:��a|�w졑��m�ڲ]�P�G:�dP(8<�f,���<<ʶ��z;Ze�3��i9�w�:i��U1���]�sG����>2wPG��$�_VܨY�t N�}�Z�V�Ք�����e'Vв���y+)!�Ю�Ɲg��������D6�W.��b� ���5^k'ܕ�ֆ)�?H�IY�&��s 8)����Otᘱ�n�?N�?r5�.�y4s�Z�>��'���~Vz[�CCt���$~��qJ�l�9 ���O��A��Գ�j;O����[����w<B�1I�̧w����d��U��x��'���~VFZV~�"u6��"�m\z>�.�O�z&w�P{x'5T��c��m8��Q�5+�@_�v:���l�<�U��@�a!���~ 1F �c���Y�U��W���R�X�;�������*��L|�Tʹy�7���>�7�����'�D�aQ4c�\�<���0��5��|ob� ���x�m��@zIk�(��ǖ��;c��z�唔Sl��U����h1`�(k���T��Y��f�,�����Q6���nEDW~�Ʋ�sWP��"o����Q �q�螟瑗Y��x���Ȭ�-�E%g��E�2��I�O�ѩ��5�����?D�I�������v�˟�"F�K�4�&�p��n��w�p⳷����V@���c�iڲ�	��Ȥ\Z�K̺Y��F��]��əP���.��(T��_( 0HZeT�kW���ש������8zhT���Y� ��J���-
���)�e�ka8Ꮠ���?��$.`S�����`5�Ǐ�K��;��u�Q6ttF�?��n�;��hK�P��jKwذ��MQt�ψ�"�*�q :�k���q�2��\v�o��
ӭ¥����!�H�`hp���k�ͲJr�,ʞ}���I����/KGc
U�x���L�A�ʣ���@�i�_��	RM���Z[M��l�fp�:i�=��=]ZME;�z�pܒ������ۖC��t������9ERrgS�ly9����y�P/dݝP6������ٍ"��?�z8!���eߧ0�'ɾ��z�c���J���SW��g��0�M�*��*�p D�M��P>u��~*)����4���,L=��ȪG������z�����ϥ�[�w���ٿ��p�
�tqeM� �j����d�]?���XQ��WUi��_Ic6f��ֲ_��Xq��?Q_g�>����n� ��D��.�;�	���.XKq�y>�mUgG8 "릇E'���Z�ߒqe��1�蠰H�����<��>���]�bWz��������P��g�Є�R��@�ŋM��!�w ����O�@o�����)�,�4��㗈�&�E&�x7%N�!���u����MR�{��˘"���)����+��N��S$">�
�~GJu�w :/�S����Ē��Ǚ�\̨��z�Cfi�X"Y�5J�w�z�����v�&��9��v�pb��OP`P�t*K� ��Cu廄��Lh%��$%P��W:{�c:w�s!�l��!�<L�w�Jϝ����8�5����'���~Vf����Kue;�Ζq��e�\[�22���H�:&-��o]g��m����P)ys(k�R3��a����+ �gL��������@����l?��~�O�'�aFY3�J� ��h�IU}@�}׬����?���l9[I'��)hv{��z��ſ`���F"�s������=p��%c�"J+��eowvC���u�#.�-�s��#Ҩp�|� �v .�T�����)}��?�p�8!ۜ�L���Nt%K=����M�N���m.yB�w���������ȶ�Rw[�^���=�UOH��Ej�K��OK3�����}�Ӊ��������O`�]TzR���F���m���7~#}jZ~��O��IN����t�I\�)v�\� �v ��;����N.�f8����t/��hOj�b���⃿SW��)L�c�hڲ�;	�p]/6���]��1���K|�x��s'��]T�| �: ���>���k�k 8UJ��=�ww8U�Q�NΛMٳ�-�1���EL~M\�ZVI�<�&ͽKV����q���~�ʷ>+N/f��O�¥r�ٖ�h��K�nZ�(��?��T��	�C���i�<�9)'g�Y�g/����U�N��_��u��u�B����約@D|�q
��.����lv1))��oH��=�r���N��G�k樟�7T���4���Af)�㻎�����H��s�t����
d˴)�0��K�݉���Y|;�N�����״��v:�+��R�Ȅt*X���Wʔ�d��LYEKx���(��(�^���_���ψ�0N���9�]"O�) ����2_�r�4T����N6�k�z��c��w�H�2CVq�
�,��D�g��W�+b@���$�.�e[)��_n�������48"���v~:�g�WQ�q���N*}�wR/�����FD���_��4�r_��Rѽ�QpX�x�|��n�|W�E�`O�)��s�K�8�(��XCU;^�e)�j��?*��#`Z�����F���v�M+)!���y�:!���\��PWK�<
��d�{)!{����7���j;O��f������9'�ӥ���ʶ���f�Ĺ+(ir�c�p�Q�?�Ш8�2�[q���&>�|N��4��&Ε�K�t@C�>�=,&v͗���t�!��p/5��~�eo9�E&L��%ˡ��ZT�O�x�������',�+n�D~4��:�����y�f�l�����iK3$�2+��	k��tG�Yj����1	l"�'P�Rg�\�!��4
�vy�G���Kv\3���\���n=G�����Ѐx��h�0�8Eip�1IA�NΩ��RO]����N2g��<�
�N�YM�usj�s�gN%�8˯pD�� gC�"��~���/�
���0�[�QI���-T	�>>�+{�ٱ�KʝEg���Vw���v6�Cu\����6���d�Шx�J̠�D��ķ�����H ف��o���li��܌�
	�H�{vim���3l�v��w�@���Vm��A!��'����3��uڇ=������S�Y�[��!�J�tL����2x_��ӌ�?�����o��Csu��'����J���_x$�;f��]�7�����+ӗ�vi�YN��ư���9��QF�����y6�vr).c*qG;5����6�Ծ��jG�Z�F��]���)
EĦPT2�di�D�<�VY�+Ѝ�
�
�_c��7�+?��ý�Px\��}x$f8��vZ�r��zb�Bs��ӂ��dG%�:_�%��Я����s�@X��� p�>>�h�f���z���юO���?���E'�2�i}�+�R]��z
��]�[�m"//�Cw�ym�r����{;[�5�5���eg�O
x��7K;����Oe�0ㅺ����ik�Yt<}e�y`P�����R��/�*|"ǵO�U4g -�kg��5������N�b��-��� W
��h>^c� )��cS��S�O�ѩ/�u���t�o�(����>�աA�p�TS�+×�4G�҇��c�J=��ڇ|�f.4h�)��KI�o�
�M�|��wD�K�,�'bG��% �Or(.s*�M��`ݘ@oG˥�|���R��F�k�}�G���9��]q�ϝ��;_��&+��}�@_�v:�����}-��(ߊ�}��ȸ�'��r�x���i|2�7�?�먳�
9�N��������j��/9{	i �4'=��gn>m����� �����ۉ�W�8�	�Q
6��oJ��6>%���I5�������k����G�';�y�E���\���'�N���
��۽Y���D>�O.��S'�7H�Z���ڦ������	��t��������
�D�P7�MRN	M��̤Ѿ��3^�O�ǵb��9�(9Ǽz��ూ�����[%�����
syp�sL��
�K�M���ct��M��'�DA4a�-�6u޸j^� p�2�^���������G�7��
_�Z���?ٷ���+|O`�b.�<�8�2�x6��σB´,�v
�q	y�0���wQO�s ��vQ}Ş����&(��g���=��9�nk2Q[��[�|��,i:u�N�Y�a��Χ���z�t�ܩqۡ��2�)���lW�|�x�y���e?����@^� �Q�A�!��U��J�wm��
'���q���w��w��t�Ϻa k	�/|�bR'�9	����
7���m��Y%K(%�}^�IdyۍcB#�=�r �����{,���"0$L��Ǚ����ͤi�XZ�͓�Ϛ�����o娅w>�%K�[�N���s��gR�M+ua��h?w���D�_9�Y�g��?��#�M���a�Ʃ�������s~d#6;�-?+��?����w9�DW��N}���mM����WOVn#W�r ��rYF��ޟQp�u���N��_m�߰qf��K�*/�u��3�H��#*�Vpe̼m\e�~�Oj����������3_t�SQ��fv��������2x�������۵�^�t�f��?ϔ���/A����)&u� �/�BT!�d)���1�˼��vo���c�
谑8m�������l��
R��f�sC���� �D?���>�j� I��h��fyy,��-�jꠜ4�d�x�o*U9�����V7T����r������U' |���m�L����-�p�����K�02��ſG�o��-x�o6Qk�����k��Q9�g�ʟ��{Lr��Q#��� ��-��cآ{���0g��hS��;(9w�%���������?�����t@��6��'�F��W9 ��[��q��v��=�ʒ #<.�
�~��;��w{;[���)&
�o���/�d1��� \�ʏ^Ԋ~�M������� ��k�Q�sK({����G�E�oRSoH+�d� �oY��՛�������xټ�1��
��.EĥZ>�x�-���U}>^3��y|f��_e�.�@��3Ss���a����8q�L�t�]�����ehM��M�)�`|��x�㖝�1�������l��_�͞u%��j 'ڨ?���v��Qph�-S��I
�{m�k�I����?�`.�y�C�_���X����P{�Cc��82��=��vѡ��C��ӗ}��b�ͮ9 U;^��F��7D·�\��/k�%��Й����y��L�*{�w�����fw{���&n�|���=֖m}�z�[�1^�Y�������W�U���w�L#?װKZ����bjesM�¥ߵ�h�����v��b/�����;^�btE@�����S_�Gͧ��a���S)g�j��*�wJ����|�s�*��*�i#��Z�Q����bZ[���ﾭ�ގV*ۂ��V26cl��7��|cp��x��;�F,w[Jpo�W+��N���#��׶v��YWQ1�ĉ3hҍw��k��n�e��
��ta|TK������v��)<�X��Y)E?yQ��I{��׬RUڿ�?lM�]�[��-��N}�5�.�g1�����ktRw�,^L�SĿ���[
y�����'�z���rv��=�D.�ʵK�J�PJ�\[�C���>M���O���,[���-�����k�
�|G�zw��r�9E��e�UU;^���K�
����T-	��_|*�D�X2׵���Ŕ��̅I�'��!}ƭ�p��]8S1n;4���@�s�K����| ��G� e�|�,vB�W3\Uث��N�{�.�9⣮
�E�����?(4��q�@ @�np �&.h���;�\�>ݳs���$
�O�ȸ�C�����
A @ �% @޵1U���_Q������B(".E;��y�v���@@ @ ��  �\���X��=���>��f/���K� f� ��T� H��)×���/�A@ @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ���5A  ,IDAT�	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  ��=     .$ ����A @ @  � � � ��  .:L  8 �     �Bp \��0@ @ � `� � ��	�p��d  `���@ @ @�5��8GD)�1�� � ���	�D��8ND9.g�A @ @�M�+�oP)DEn��� � ���	��O�h��A�|  p�O��HD���j�
    n&���A��U�(
��n�A @ @�MT��;� |�_|�M��V  p3u�b�F"��f�@ @ �D`h�n` ��Z�d8l  7�(��۠��t7À�     �e�+35������~��a&����]�Tu���33�lY!�Me��e��	�]t�E��3j�i%XQ��Md!	�i�-�sfא��"� ��b��.J!2k�y�n������v���^����<�Y��Μ@ ��
�kG1o[���O�OdC @ ��iU1��� 0G�_�|φ  � ��RNs��۩�^�����8��2 � ȥC���)��NI���  � �pWg1o�� �����ix(H��L�  �@�\r�n�B;>" ��������ς�@ R �y��Cs�8�/(���J#"�  �*/ksq��+ ̖�\m�RaX@ �-�k��~5 �?��Ms=�l�C @ =��Q�ۖ�_t�P�y.�hR.=4L�  �@b��h~�
;1n ����nZ�X
C @ %��]�ۦ���A���4 �AWL�c"� $R�,iQ�@U��.@�ܵ1��  �@
ܴ��c��:��+�}n�����L�#"�  �4�ӒD���) �;JҎ��0 � )x2
�����3�.�̷�J�#P��  �@R��������Q�	�����rF$�H�
s �  �`�AIK������& �#�^��7��h � $B�M[��m�h��@\$(�~INT��#�  �@��G�=T���ْK�����  � M8>8C�?Zi���nU���,�����Vf@ h�@|���о�v��@\4��n*J�V��!�  �@��qӊb`ײB� .���-�w�\*�l�E @���G������@%��f�V��  � ux6
mRg�M: ĭF���4�nO$�@ �F�%=7��x�)��@X�u^�nI�j:f@ ���`ٵ�/o{�Re���q@���+�M��  � �
������T�� �&�{��l���jS<@ .�9~��B��6u q3k���RN����5@ @@���Y�߷�N�ˣ��Ҕ�����XP|� 7��3E@ �4
�]vu��]�����m� �[k��%ٌvJ��n�R@ ����Kz�o�}ӈ� �f��3G��l��r]Ո��  �@�N���:�N�Y�Q�54 5|��
rm�:�z�(�"�  �B���>>���(����)`X�]R��<�h�SK}@ �����de����[mG��sS��P��_��yI$]ڬaY@ �i$��+��Z�*;��Z ��\��ss%���V�����@ h��AIݥ���k�_[�~eɖ��C�����Y=�����V��. � 
8�n3�Bh@��KN� 0"��LY��t����t���� @ ���&}�f���с������� v����L��k��HZ(i�KW�t��Yr͒i�t�@ �	�����4�������騛�������>��,�G�W�    IEND�B`�PK
     �kY�P�#�   �   	   about.txtThis favicon was generated using the following font:

- Font Title: Manuale
- Font Author: undefined
- Font Source: https://fonts.gstatic.com/s/manuale/v28/f0Xn0eas_8Z-TFZdNPTUzMkzITq8fvQsONRH3zRdIWHYr8M.ttf
- Font License: undefined)
PK 
     �kY���(�#  �#                   apple-touch-icon.pngPK 
     �kYB�"�                 $  favicon-32x32.pngPK 
     �kY�i$6  6               S)  favicon-16x16.pngPK 
     �kYg:$.<  .<               �+  favicon.icoPK 
     �kY�!��                 h  site.webmanifestPK 
     �kY�KK�&  �&               Di  android-chrome-192x192.pngPK 
     �kY�<(��k  �k               N�  android-chrome-512x512.pngPK 
     �kY�P�#�   �   	             �  about.txtPK      �  .�    


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\use-toast.ts
import * as React from "react";
import { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 5000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | { type: ActionType["ADD_TOAST"]; toast: ToasterToast }
  | { type: ActionType["UPDATE_TOAST"]; toast: Partial<ToasterToast> }
  | { type: ActionType["DISMISS_TOAST"]; toastId?: ToasterToast["id"] }
  | { type: ActionType["REMOVE_TOAST"]; toastId?: ToasterToast["id"] };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) return;

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];
let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useProfile.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "./use-toast";

export const useProfile = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: profile, isLoading } = useQuery({
    queryKey: ['profile'],
    queryFn: async () => {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;

      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (error) throw error;
      return data;
    },
  });

  const updateProfile = useMutation({
    mutationFn: async (profileData: {
      username?: string;
      full_name?: string;
      phone_number?: string;
    }) => {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;

      const { data, error } = await supabase
        .from('profiles')
        .update(profileData)
        .eq('id', user.id)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['profile'] });
      toast({
        title: "Profile Updated",
        description: "Your profile has been updated successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return {
    profile,
    isLoading,
    updateProfile,
  };
};


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useServiceRequest.ts
import { useToast } from "@/components/ui/use-toast";
import { ServiceRequest } from "@/types/service";
import { useMutation } from "@tanstack/react-query";

// Mock service request function
const mockSubmitServiceRequest = async (data: Omit<ServiceRequest, 'id' | 'status' | 'createdAt'>): Promise<ServiceRequest> => {
  // Simulate network delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Create a mock response
  return {
    ...data,
    id: Math.random().toString(36).substr(2, 9),
    status: 'pending',
    createdAt: new Date(),
  };
};

export const useServiceRequest = () => {
  const { toast } = useToast();

  return useMutation({
    mutationFn: mockSubmitServiceRequest,
    onSuccess: () => {
      toast({
        title: "Service Request Submitted",
        description: "We'll notify you when a tow truck is assigned.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });
};


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useTowingCost.ts
import { useState } from "react";
import { towTruckTypes } from "@/utils/towTruckPricing";

export const useTowingCost = () => {
  const [selectedTruck, setSelectedTruck] = useState<"A" | "B" | "C" | "D">("A");
  const [distance, setDistance] = useState(0);
  const [requiresManeuver, setRequiresManeuver] = useState(false);
  const [tollCost, setTollCost] = useState(0);

  const truck = towTruckTypes[selectedTruck];
  const baseCost = distance * truck.perKm;
  const flagDropFee = truck.flagDropFee;
  const maneuverCost = requiresManeuver ? truck.maneuverCharge : 0;
  const totalCost = baseCost + flagDropFee + maneuverCost + tollCost;

  return {
    selectedTruck,
    setSelectedTruck,
    distance,
    setDistance,
    requiresManeuver,
    setRequiresManeuver,
    tollCost,
    setTollCost,
    totalCost,
    baseCost,
    flagDropFee,
    maneuverCost,
  };
};


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useVehicleForm.ts
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { FormData, formSchema } from "@/types/form";
import { useServiceRequest } from "@/hooks/useServiceRequest";
import { useToast } from "@/hooks/use-toast";

interface Location {
  lat: number;
  lng: number;
}

export const useVehicleForm = (
  pickupLocation: Location | null,
  dropLocation: Location | null,
  serviceType: 'standard' | 'flatbed' | 'emergency'
) => {
  const { toast } = useToast();
  const { mutate: submitRequest, isPending } = useServiceRequest();

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      vehicleModel: "",
      truckType: "A",
      issueDescription: "",
    }
  });

  const onSubmit = async (data: FormData) => {
    if (!pickupLocation || !dropLocation) {
      toast({
        title: "Missing Location",
        description: "Please select both pickup and drop-off locations",
        variant: "destructive",
      });
      return;
    }

    submitRequest({
      username: "guest", // Default value
      vehicleMake: "Unknown", // Default value
      vehicleModel: data.vehicleModel,
      vehicleYear: new Date().getFullYear(), // Default current year
      vehicleColor: "Unknown", // Default value
      truckType: data.truckType,
      issueDescription: data.issueDescription || "",
      pickupLocation,
      dropLocation,
      serviceType,
      requiresManeuver: false,
      tollFees: 0, // Default value
    });
  };

  return {
    form,
    onSubmit,
    isPending
  };
};


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useVehicleRequests.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "./use-toast";

export const useVehicleRequests = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: vehicleRequests, isLoading } = useQuery({
    queryKey: ['vehicleRequests'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('vehicle_requests')
        .select(`
          *,
          profiles:profiles(username, full_name, phone_number)
        `)
        .order('created_at', { ascending: false });

      if (error) {
        toast({
          title: "Error fetching requests",
          description: error.message,
          variant: "destructive",
        });
        throw error;
      }

      return data;
    },
  });

  const createRequest = useMutation({
    mutationFn: async (requestData: {
      vehicle_make: string;
      vehicle_model: string;
      vehicle_year: string;
      vehicle_color: string;
      requires_maneuver: boolean;
      truck_type: string;
      pickup_location: { lat: number; lng: number };
      dropoff_location: { lat: number; lng: number };
    }) => {
      const { data: userData, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;

      const { data, error } = await supabase
        .from('vehicle_requests')
        .insert([
          {
            ...requestData,
            user_id: userData.user.id,
            status: 'pending'
          }
        ])
        .select()
        .single();

      if (error) throw error;

      // Notify webhooks
      await supabase.functions.invoke('webhook-notify', {
        body: { requestId: data.id }
      });

      // Notify admin via email
      await supabase.functions.invoke('notify-request', {
        body: { requestId: data.id }
      });

      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vehicleRequests'] });
      toast({
        title: "Request Created",
        description: "Your towing request has been submitted successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const updateRequest = useMutation({
    mutationFn: async ({ id, ...updateData }: { 
      id: string;
      status?: string;
      requires_maneuver?: boolean;
      truck_type?: string;
    }) => {
      const { data, error } = await supabase
        .from('vehicle_requests')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vehicleRequests'] });
      toast({
        title: "Request Updated",
        description: "The towing request has been updated successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return {
    vehicleRequests,
    isLoading,
    createRequest,
    updateRequest,
  };
};


// C:\Users\israe\Documents\GitHub\recentmap\src\hooks\useWebhooks.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "./use-toast";
import { Database } from "@/integrations/supabase/types";

type Tables = Database['public']['Tables']
type Webhook = Tables['webhooks']['Row']
type WebhookInsert = Tables['webhooks']['Insert']
type WebhookUpdate = Tables['webhooks']['Update']

export const useWebhooks = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: webhooks, isLoading } = useQuery({
    queryKey: ['webhooks'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('webhooks')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        toast({
          title: "Error fetching webhooks",
          description: error.message,
          variant: "destructive",
        });
        throw error;
      }

      return data as Webhook[];
    },
  });

  const createWebhook = useMutation({
    mutationFn: async (webhookData: WebhookInsert) => {
      const { data, error } = await supabase
        .from('webhooks')
        .insert([webhookData])
        .select()
        .single();

      if (error) throw error;
      return data as Webhook;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['webhooks'] });
      toast({
        title: "Webhook Created",
        description: "Your webhook has been created successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const updateWebhook = useMutation({
    mutationFn: async ({ id, ...updateData }: WebhookUpdate & { id: string }) => {
      const { data, error } = await supabase
        .from('webhooks')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;
      return data as Webhook;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['webhooks'] });
      toast({
        title: "Webhook Updated",
        description: "The webhook has been updated successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const deleteWebhook = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('webhooks')
        .delete()
        .eq('id', id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['webhooks'] });
      toast({
        title: "Webhook Deleted",
        description: "The webhook has been deleted successfully.",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Error",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return {
    webhooks,
    isLoading,
    createWebhook,
    updateWebhook,
    deleteWebhook,
  };
};


// C:\Users\israe\Documents\GitHub\recentmap\src\integrations\supabase\client.ts
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseKey);


// C:\Users\israe\Documents\GitHub\recentmap\src\integrations\supabase\types.ts
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      payment_transactions: {
        Row: {
          amount: number
          created_at: string
          id: string
          request_id: string | null
          status: string
          stripe_payment_intent_id: string | null
        }
        Insert: {
          amount: number
          created_at?: string
          id?: string
          request_id?: string | null
          status: string
          stripe_payment_intent_id?: string | null
        }
        Update: {
          amount?: number
          created_at?: string
          id?: string
          request_id?: string | null
          status?: string
          stripe_payment_intent_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "payment_transactions_request_id_fkey"
            columns: ["request_id"]
            isOneToOne: false
            referencedRelation: "vehicle_requests"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          created_at: string
          full_name: string | null
          id: string
          phone_number: string | null
          updated_at: string
          username: string | null
        }
        Insert: {
          created_at?: string
          full_name?: string | null
          id: string
          phone_number?: string | null
          updated_at?: string
          username?: string | null
        }
        Update: {
          created_at?: string
          full_name?: string | null
          id?: string
          phone_number?: string | null
          updated_at?: string
          username?: string | null
        }
        Relationships: []
      }
      vehicle_requests: {
        Row: {
          admin_notified: boolean | null
          created_at: string
          dropoff_location: Json | null
          id: string
          payment_amount: number | null
          payment_intent_id: string | null
          payment_status: string | null
          pickup_location: Json | null
          requires_maneuver: boolean | null
          service_notes: string | null
          status: string
          truck_type: string
          user_id: string
          vehicle_color: string
          vehicle_make: string
          vehicle_model: string
          vehicle_year: string
        }
        Insert: {
          admin_notified?: boolean | null
          created_at?: string
          dropoff_location?: Json | null
          id?: string
          payment_amount?: number | null
          payment_intent_id?: string | null
          payment_status?: string | null
          pickup_location?: Json | null
          requires_maneuver?: boolean | null
          service_notes?: string | null
          status?: string
          truck_type: string
          user_id: string
          vehicle_color: string
          vehicle_make: string
          vehicle_model: string
          vehicle_year: string
        }
        Update: {
          admin_notified?: boolean | null
          created_at?: string
          dropoff_location?: Json | null
          id?: string
          payment_amount?: number | null
          payment_intent_id?: string | null
          payment_status?: string | null
          pickup_location?: Json | null
          requires_maneuver?: boolean | null
          service_notes?: string | null
          status?: string
          truck_type?: string
          user_id?: string
          vehicle_color?: string
          vehicle_make?: string
          vehicle_model?: string
          vehicle_year?: string
        }
        Relationships: [
          {
            foreignKeyName: "vehicle_requests_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      webhooks: {
        Row: {
          created_at: string
          description: string | null
          id: string
          is_active: boolean
          secret_key: string
          updated_at: string
          url: string
          user_id: string
        }
        Insert: {
          created_at?: string
          description?: string | null
          id?: string
          is_active?: boolean
          secret_key: string
          updated_at?: string
          url: string
          user_id?: string
        }
        Update: {
          created_at?: string
          description?: string | null
          id?: string
          is_active?: boolean
          secret_key?: string
          updated_at?: string
          url?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "webhooks_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type PublicSchema = Database[Extract<keyof Database, "public">]

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (PublicSchema["Tables"] & PublicSchema["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (PublicSchema["Tables"] &
        PublicSchema["Views"])
    ? (PublicSchema["Tables"] &
        PublicSchema["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof PublicSchema["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema["Tables"]
    ? PublicSchema["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof PublicSchema["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof PublicSchema["Enums"]
    ? PublicSchema["Enums"][PublicEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof PublicSchema["CompositeTypes"]
    | { schema: keyof Database },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof Database
  }
    ? keyof Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends { schema: keyof Database }
  ? Database[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof PublicSchema["CompositeTypes"]
    ? PublicSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never



// C:\Users\israe\Documents\GitHub\recentmap\src\integrations\supabase\types\base.ts
import { Tables } from './tables';

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: Tables;
    Views: {};
    Functions: {};
    Enums: {};
    CompositeTypes: {};
  };
}


// C:\Users\israe\Documents\GitHub\recentmap\src\integrations\supabase\types\index.ts
export * from './base';
export * from './tables';


// C:\Users\israe\Documents\GitHub\recentmap\src\integrations\supabase\types\tables.ts
import { Json } from './base';

interface ProfilesTable {
  Row: {
    created_at: string;
    full_name: string | null;
    id: string;
    phone_number: string | null;
    updated_at: string;
    username: string | null;
  };
  Insert: {
    created_at?: string;
    full_name?: string | null;
    id: string;
    phone_number?: string | null;
    updated_at?: string;
    username?: string | null;
  };
  Update: {
    created_at?: string;
    full_name?: string | null;
    id?: string;
    phone_number?: string | null;
    updated_at?: string;
    username?: string | null;
  };
  Relationships: [];
}

interface VehicleRequestsTable {
  Row: {
    created_at: string;
    dropoff_location: Json | null;
    id: string;
    pickup_location: Json | null;
    requires_maneuver: boolean | null;
    status: string;
    truck_type: string;
    user_id: string;
    vehicle_color: string;
    vehicle_make: string;
    vehicle_model: string;
    vehicle_year: string;
  };
  Insert: {
    created_at?: string;
    dropoff_location?: Json | null;
    id?: string;
    pickup_location?: Json | null;
    requires_maneuver?: boolean | null;
    status?: string;
    truck_type: string;
    user_id: string;
    vehicle_color: string;
    vehicle_make: string;
    vehicle_model: string;
    vehicle_year: string;
  };
  Update: {
    created_at?: string;
    dropoff_location?: Json | null;
    id?: string;
    pickup_location?: Json | null;
    requires_maneuver?: boolean | null;
    status?: string;
    truck_type?: string;
    user_id?: string;
    vehicle_color?: string;
    vehicle_make?: string;
    vehicle_model?: string;
    vehicle_year?: string;
  };
  Relationships: [
    {
      foreignKeyName: "vehicle_requests_user_id_fkey";
      columns: ["user_id"];
      isOneToOne: false;
      referencedRelation: "profiles";
      referencedColumns: ["id"];
    }
  ];
}

interface WebhooksTable {
  Row: {
    id: string;
    created_at: string;
    updated_at: string;
    url: string;
    description: string | null;
    is_active: boolean;
    secret_key: string;
  };
  Insert: {
    id?: string;
    created_at?: string;
    updated_at?: string;
    url: string;
    description?: string | null;
    is_active?: boolean;
    secret_key: string;
  };
  Update: {
    url?: string;
    description?: string | null;
    is_active?: boolean;
    secret_key?: string;
    updated_at?: string;
  };
  Relationships: [];
}

export interface Tables {
  profiles: ProfilesTable;
  vehicle_requests: VehicleRequestsTable;
  webhooks: WebhooksTable;
}


// C:\Users\israe\Documents\GitHub\recentmap\src\lib\utils.ts
import { twMerge } from "tailwind-merge";

export function cn(...inputs: any[]) { // Changed ClassValue to any[]
  return twMerge(inputs);
}


// C:\Users\israe\Documents\GitHub\recentmap\src\pages\Index.tsx
import { useState } from "react";
import { useToast } from "@/components/ui/use-toast";
import TowMap from "@/components/TowMap";
import Sidebar from "@/components/Sidebar";

const Index = () => {
  const [totalCost, setTotalCost] = useState(0);
  const { toast } = useToast();

  return (
    <div className="relative h-screen">
      <Sidebar />
      <TowMap />
    </div>
  );
};

export default Index;


// C:\Users\israe\Documents\GitHub\recentmap\src\providers\StripeProvider.tsx
import { Elements } from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { ReactNode, useEffect, useState } from 'react';
import { useToast } from '@/hooks/use-toast';

// Move Stripe key to a constant
const STRIPE_PUBLIC_KEY = 'pk_test_51OxpVXBIrjwXwQdF1HpkQABXYGqpWZBFGPvXVoYZtqxPZqQtQvtgWXxYGHuVZyXxWXwXwXwXwXwXwXwXwXwX';

export const StripeProvider = ({ children }: { children: ReactNode }) => {
  const [stripePromise, setStripePromise] = useState<Promise<any> | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    const initStripe = async () => {
      try {
        const stripe = await loadStripe(STRIPE_PUBLIC_KEY);
        if (stripe) {
          setStripePromise(Promise.resolve(stripe));
        } else {
          throw new Error('Failed to initialize Stripe');
        }
      } catch (error) {
        console.error('Stripe initialization error:', error);
        toast({
          title: "Payment System Error",
          description: "Unable to initialize payment system. Please try again later.",
          variant: "destructive",
        });
      }
    };

    initStripe();
  }, [toast]);

  if (!stripePromise) {
    return null; // Or a loading spinner
  }

  return (
    <Elements stripe={stripePromise}>
      {children}
    </Elements>
  );
};


// C:\Users\israe\Documents\GitHub\recentmap\src\services\geocodingService.ts
const NUEVO_LEON_COORDS = {
  lat: 25.5922,
  lng: -99.9962
};

const GEOCODING_DELAY = 1000;
let lastRequestTime = 0;

const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {
  const R = 6371;
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

const fetchWithRetry = async (url: string, retries = 3): Promise<Response> => {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(url, {
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'MRGruas Application (https://mrgruas.com)',
          'Referer': 'https://mrgruas.com',
          'Origin': window.location.origin,
        },
        mode: 'cors',
        credentials: 'omit'
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return response;
    } catch (error) {
      console.error(`Attempt ${i + 1} failed:`, error);
      if (i === retries - 1) {
        // On last retry, try the fallback coordinates
        return new Response(JSON.stringify([{
          lat: NUEVO_LEON_COORDS.lat,
          lon: NUEVO_LEON_COORDS.lng,
          display_name: 'Ubicación en Nuevo León',
          importance: 0.5
        }]));
      }
      await wait(1000 * (i + 1));
    }
  }
  throw new Error('Max retries reached');
};

export const getAddressFromCoordinates = async (lat: number, lng: number): Promise<string> => {
  const timeSinceLastRequest = Date.now() - lastRequestTime;
  if (timeSinceLastRequest < GEOCODING_DELAY) {
    await wait(GEOCODING_DELAY - timeSinceLastRequest);
  }

  try {
    lastRequestTime = Date.now();
    const response = await fetchWithRetry(
      `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=es`
    );

    const data = await response.json();
    return data.display_name || 'Ubicación seleccionada';
  } catch (error) {
    console.error('Error fetching address:', error);
    return 'Ubicación seleccionada';
  }
};

export const searchAddresses = async (query: string): Promise<Array<{
  address: string;
  lat: number;
  lon: number;
  distance: number;
}>> => {
  if (!query || query.length < 3) return [];

  const timeSinceLastRequest = Date.now() - lastRequestTime;
  if (timeSinceLastRequest < GEOCODING_DELAY) {
    await wait(GEOCODING_DELAY - timeSinceLastRequest);
  }

  try {
    lastRequestTime = Date.now();
    const enhancedQuery = `${query}, Nuevo Leon, Mexico`;

    const response = await fetchWithRetry(
      `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(enhancedQuery)}&limit=10&accept-language=es&countrycodes=mx&bounded=1&viewbox=-100.5,26.0,-99.5,25.0`
    );

    const data = await response.json();

    if (!Array.isArray(data)) {
      console.warn('Received non-array response:', data);
      return [];
    }

    const results = data.map((item: any) => ({
      address: item.display_name,
      lat: parseFloat(item.lat),
      lon: parseFloat(item.lon),
      distance: calculateDistance(
        parseFloat(item.lat),
        parseFloat(item.lon),
        NUEVO_LEON_COORDS.lat,
        NUEVO_LEON_COORDS.lng
      ),
      importance: item.importance || 0
    }));

    return results
      .filter(result => !isNaN(result.lat) && !isNaN(result.lon))
      .sort((a, b) => {
        const distanceWeight = 0.7;
        const importanceWeight = 0.3;

        const scoreA = (distanceWeight * (1 / (a.distance + 1))) + (importanceWeight * (a.importance || 0));
        const scoreB = (distanceWeight * (1 / (b.distance + 1))) + (importanceWeight * (b.importance || 0));

        return scoreB - scoreA;
      });
  } catch (error) {
    console.error('Error searching addresses:', error);
    return [{
      address: 'Nuevo León, México',
      lat: NUEVO_LEON_COORDS.lat,
      lon: NUEVO_LEON_COORDS.lng,
      distance: 0
    }];
  }
};


// C:\Users\israe\Documents\GitHub\recentmap\src\services\osrmService.ts
const OSRM_API_URLS = [
  'https://routing.openstreetmap.de/routed-car/route/v1/driving',
  'https://router.project-osrm.org/route/v1/driving'
];

const MIN_REQUEST_INTERVAL = 1100; // Slightly over 1 second to be safe
const MAX_RETRIES = 3;
const BACKOFF_FACTOR = 2;
let lastRequestTime = 0;
let requestQueue: Promise<any> = Promise.resolve();

interface Coordinates {
  lat: number;
  lng: number;
}

interface OSRMResponse {
  routes: {
    distance: number;
    duration: number;
    geometry: string;
  }[];
}

const wait = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

const calculateBackoffDelay = (attempt: number): number => {
  return Math.min(MIN_REQUEST_INTERVAL * Math.pow(BACKOFF_FACTOR, attempt), 5000);
};

const enforceRateLimit = async () => {
  const now = Date.now();
  const timeSinceLastRequest = now - lastRequestTime;

  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {
    await wait(MIN_REQUEST_INTERVAL - timeSinceLastRequest);
  }
  lastRequestTime = Date.now();
};

async function tryFetchWithUrls(urls: string[], coordinates: string, options: RequestInit, attempt = 0): Promise<Response> {
  const errors: Error[] = [];

  // Enforce rate limiting
  await enforceRateLimit();

  for (const baseUrl of urls) {
    try {


      const url = `${baseUrl}/${coordinates}?overview=full&geometries=polyline`;

      const response = await fetch(url, {
        ...options,
        method: 'GET',
        mode: 'cors',
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'TowingServiceApplication/1.0',
          'Referer': 'https://mrgruas.com'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Handle rate limiting
      if (response.status === 429) {
        const backoffDelay = calculateBackoffDelay(attempt);
        await wait(backoffDelay);
        if (attempt < MAX_RETRIES) {
          return tryFetchWithUrls(urls, coordinates, options, attempt + 1);
        }
      }

      return response;
    } catch (error) {
      console.error(`Error with ${baseUrl}:`, error);
      errors.push(error instanceof Error ? error : new Error(`Unknown error from ${baseUrl}`));
      continue;
    }
  }





  if (attempt < MAX_RETRIES) {
    console.log(`Retrying request, attempt ${attempt + 1} of ${MAX_RETRIES}`);
    const backoffDelay = calculateBackoffDelay(attempt);
    await wait(backoffDelay);
    return tryFetchWithUrls(urls, coordinates, options, attempt + 1);
  }

  throw new Error(`All routing services failed after ${MAX_RETRIES} retries. Errors: ${errors.map(e => e.message).join(', ')}`);
}

export async function getRouteFromOSRM(start: Coordinates, end: Coordinates): Promise<{
  distance: number;
  duration: number;
  geometry: string;
}> {
  const coordinates = `${start.lng},${start.lat};${end.lng},${end.lat}`;















  try {
    // Queue this request
    const result = await new Promise((resolve, reject) => {
      requestQueue = requestQueue
        .then(() => tryFetchWithUrls(OSRM_API_URLS, coordinates, {
          headers: {
            'Accept': 'application/json',
            'User-Agent': 'TowingServiceApplication/1.0',
            'Referer': 'https://mrgruas.com'
          }
        }))
        .then(response => response.json())
        .then(resolve)
        .catch(reject);
    });


    const data = result as OSRMResponse;








    if (!data.routes || data.routes.length === 0) {
      throw new Error('No route found between the specified locations.');
    }

    return {
      distance: data.routes[0].distance / 1000, // Convert to kilometers
      duration: data.routes[0].duration,
      geometry: data.routes[0].geometry,
    };

  } catch (error) {
    throw error;
  }
}


// C:\Users\israe\Documents\GitHub\recentmap\src\services\routeService.ts
import { Location, RouteResponse } from "@/types/service";
import { getRouteFromOSRM } from "./osrmService";

export const COMPANY_LOCATION: Location = {
  lat: 26.509672,
  lng: -100.0095504
};

export const getRouteDetails = async (
  origin: Location,
  destination: Location
): Promise<RouteResponse> => {
  try {
    const route = await getRouteFromOSRM(origin, destination);
    
    // Add traffic factor based on time of day
    const trafficFactor = calculateTrafficFactor();
    
    return {
      ...route,
      distance: route.distance * trafficFactor,
      duration: route.duration * trafficFactor
    };
  } catch (error) {
    throw new Error('Failed to calculate route details');
  }
};

const calculateTrafficFactor = (): number => {
  const hour = new Date().getHours();
  
  // Rush hour adjustments
  if ((hour >= 7 && hour <= 9) || (hour >= 17 && hour <= 19)) {
    return 1.3; // 30% longer during rush hours
  }
  
  // Night time adjustments
  if (hour >= 22 || hour <= 5) {
    return 0.9; // 10% shorter during night
  }
  
  return 1.0; // Normal traffic during other hours
};


// C:\Users\israe\Documents\GitHub\recentmap\src\types\form.ts
import { z } from "zod";

export const formSchema = z.object({
  userName: z.string().min(1, "Username is required"),
  phone: z.string().min(1, "Phone number is required"),
  vehicleMake: z.string().min(1, "Vehicle make is required"),
  vehicleModel: z.string().min(1, "Vehicle model is required"),
  vehicleYear: z.string().min(1, "Vehicle year is required"),
  vehicleColor: z.string().min(1, "Vehicle color is required"),
  truckType: z.enum(["A", "B", "C", "D"]),
  requiresManeuver: z.boolean().default(false),
  issueDescription: z.string().optional(),
  pickupLocation: z.object({
    lat: z.number(),
    lng: z.number(),
    address: z.string()
  }).optional(),
  dropoffLocation: z.object({
    lat: z.number(),
    lng: z.number(),
    address: z.string()
  }).optional(),
});

export type FormData = z.infer<typeof formSchema>;

export const vehicleFormSchema = formSchema;


// C:\Users\israe\Documents\GitHub\recentmap\src\types\location.ts

export interface Location {
    id: string;
    name: string;
    address?: string;
    city?: string;
    state?: string;
    country?: string;
    postalCode?: string;
    latitude?: number;
    longitude?: number;
    createdAt?: Date;
    updatedAt?: Date;
}

export interface LocationInput {
    name: string;
    address?: string;
    city?: string;
    state?: string;
    country?: string;
    postalCode?: string;
    latitude?: number;
    longitude?: number;
}

export interface LocationFilter {
    id?: string;
    name?: string;
    city?: string;
    state?: string;
    country?: string;
}



// C:\Users\israe\Documents\GitHub\recentmap\src\types\service.ts
export interface Location {
  lat: number
  lng: number
}

export interface RouteResponse {
  geometry: string;
  distance: number;
  duration: number;
}

export interface ServiceRequest {
  id: string;
  status: 'pending' | 'completed';
  createdAt: Date;
  username: string;
  vehicleMake: string;
  vehicleModel: string;
  vehicleYear: number;
  vehicleColor: string;
  truckType: string;
  issueDescription: string;
  pickupLocation?: Location;
  dropLocation?: Location;
  serviceType: 'standard' | 'flatbed' | 'emergency';
  requiresManeuver: boolean;
  tollFees: number;
}


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\addressUtils.ts


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\distanceUtils.ts
export const calculateDistance = (
  point1: { lat: number; lng: number }, 
  point2: { lat: number; lng: number }
): number => {
  const R = 6371; // Earth's radius in km
  const dLat = (point2.lat - point1.lat) * Math.PI / 180;
  const dLon = (point2.lng - point1.lng) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\downloadUtils.ts
export type TowTruckType = "A" | "B" | "C" | "D";

export interface TowTruckDetails {
  name: string;
  capacity: string;
  perKm: number;
  maneuverCharge: number;
  maxWeight: number;
}

export const downloadServiceInfo = (data: any, format: 'csv' | 'txt') => {
  const content = format === 'csv' 
    ? convertToCSV(data)
    : JSON.stringify(data, null, 2);
    
  const blob = new Blob([content], { type: format === 'csv' ? 'text/csv' : 'text/plain' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `service-info.${format}`;
  a.click();
  window.URL.revokeObjectURL(url);
};

const convertToCSV = (data: any) => {
  const headers = Object.keys(data);
  const values = Object.values(data);
  return `${headers.join(',')}\n${values.join(',')}`;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\mapUtils.ts
import L from "leaflet";

export const ENTERPRISE_LOCATIONS = [
  { lat: 26.510272, lng: -100.006323, name: "Main Service Center" },
];

export const enterpriseIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

export const pickupIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});

export const dropIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
});


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\notificationUtils.tsx
import { toast } from "@/hooks/use-toast";
import { Check, AlertTriangle, Info, MapPin } from "lucide-react";

const NOTIFICATION_COOLDOWN = 10000;
const notificationTimestamps: { [key: string]: number } = {};

const shouldShowNotification = (type: string): boolean => {
  const now = Date.now();
  const lastShown = notificationTimestamps[type] || 0;
  
  if (now - lastShown > NOTIFICATION_COOLDOWN) {
    notificationTimestamps[type] = now;
    return true;
  }
  return false;
};

export const showLocationNotification = (type: 'pickup' | 'drop', coords: { lat: number; lng: number }) => {
  if (!shouldShowNotification(`location_${type}`)) return;
  
  toast({
    title: `${type === 'pickup' ? 'Pickup' : 'Drop-off'} Location Set`,
    description: (
      <div className="flex items-center gap-2">
        <MapPin className="h-4 w-4" />
        <span>Coordinates: {coords.lat.toFixed(4)}, {coords.lng.toFixed(4)}</span>
      </div>
    ),
    duration: 5000,
    className: "bg-green-50 border-green-200"
  });
};

export const showRouteNotification = (distance: number) => {
  if (!shouldShowNotification('route')) return;
  
  toast({
    title: "Route Calculated",
    description: (
      <div className="flex items-center gap-2">
        <Info className="h-4 w-4" />
        <span>Total route distance: {distance.toFixed(2)} km</span>
      </div>
    ),
    duration: 5000,
    className: "bg-blue-50 border-blue-200"
  });
};

export const showRouteErrorNotification = (error: string) => {
  if (!shouldShowNotification('route_error')) return;
  
  toast({
    title: "Route Calculation Error",
    description: (
      <div className="flex items-center gap-2">
        <AlertTriangle className="h-4 w-4" />
        <span>{error}</span>
      </div>
    ),
    duration: 7000,
    variant: "destructive"
  });
};

export const showPaymentNotification = (success: boolean, error?: string) => {
  if (!shouldShowNotification('payment')) return;
  
  if (success) {
    toast({
      title: "Payment Successful",
      description: (
        <div className="flex items-center gap-2">
          <Check className="h-4 w-4" />
          <span>Tow truck request confirmed!</span>
        </div>
      ),
      duration: 5000,
      className: "bg-green-50 border-green-200"
    });
  } else {
    toast({
      title: "Payment Error",
      description: (
        <div className="flex items-center gap-2">
          <AlertTriangle className="h-4 w-4" />
          <span>{error || "Payment processing error"}</span>
        </div>
      ),
      duration: 5000,
      variant: "destructive"
    });
  }
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\paymentProcessor.ts
import { toast } from "@/hooks/use-toast";

interface PaymentResult {
  success: boolean;
  error?: string;
  transactionId?: string;
}

export const processPayment = async (amount: number): Promise<PaymentResult> => {
  try {
    // Simulate payment processing delay
    await new Promise((resolve) => setTimeout(resolve, 1500));
    
    // Simulate successful payment with 90% probability
    const isSuccessful = Math.random() < 0.9;
    
    if (!isSuccessful) {
      throw new Error("Payment processing failed. Please try again.");
    }
    
    // Generate a mock transaction ID
    const transactionId = `TRX-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    return {
      success: true,
      transactionId,
    };
  } catch (error: any) {
    return {
      success: false,
      error: error.message || "An unexpected error occurred",
    };
  }
};

export const validatePaymentDetails = (cardElement: any) => {
  if (!cardElement) {
    toast({
      title: "Error de Validación",
      description: "Por favor, ingrese los detalles de la tarjeta",
      variant: "destructive",
    });
    return false;
  }
  return true;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\priceCalculator.ts
import { towTruckTypes, TowTruckType } from "./towTruckPricing";

export const formatCurrency = (amount: number): string => {
  return `$${amount.toFixed(2)} MXN`;
};

export const calculateTotalCost = (
  distance: number,
  truckType: string,
  requiresManeuver: boolean,
  tollCosts: number = 0,
  requiresInvoice: boolean = false
): number => {
  const truck = towTruckTypes[truckType || 'A'];
  const baseCost = calculateBaseCost(distance, truckType);
  const maneuverCost = requiresManeuver ? truck.maneuverCharge : 0;
  const flagDropFee = truck.flagDropFee;
  const subtotal = baseCost + maneuverCost + tollCosts + flagDropFee;
  const tax = requiresInvoice ? subtotal * 0.16 : 0;
  return subtotal + tax;
};

export const calculateBaseCost = (distance: number, truckType: string): number => {
  const truck = towTruckTypes[truckType || 'A'];
  return distance * truck.perKm;
};

export const COMPANY_LOCATION = { lat: 26.510272, lng: -100.006323 };


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\routeCalculator.ts
interface Location {
  lat: number;
  lng: number;
}

const MEXICAN_ROADS_ADJUSTMENT = 1.15; // 15% adjustment for Mexican roads
const URBAN_AREA_THRESHOLD = 0.1; // 100m threshold for urban area detection

export const calculateRoadDistance = async (point1: Location, point2: Location): Promise<number> => {
  try {
    const response = await fetch(
      `https://router.project-osrm.org/route/v1/driving/${point1.lng},${point1.lat};${point2.lng},${point2.lat}?overview=false&alternatives=true`
    );
    
    if (!response.ok) {
      throw new Error('Error al obtener la ruta');
    }

    const data = await response.json();
    
    if (!data.routes || data.routes.length === 0) {
      throw new Error('No se encontró ninguna ruta');
    }

    // Find the most efficient route
    const bestRoute = data.routes.reduce((best: any, current: any) => {
      return current.duration / current.distance < best.duration / best.distance ? current : best;
    }, data.routes[0]);

    // Apply Mexican roads adjustment
    return Number(((bestRoute.distance / 1000) * MEXICAN_ROADS_ADJUSTMENT).toFixed(2));
  } catch (error) {
    console.error('Error calculando la distancia por carretera:', error);
    return calculateStraightLineDistance(point1, point2) * MEXICAN_ROADS_ADJUSTMENT;
  }
};

const calculateStraightLineDistance = (point1: Location, point2: Location): number => {
  const R = 6371;
  const dLat = (point2.lat - point1.lat) * Math.PI / 180;
  const dLon = (point2.lng - point1.lng) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return Number((R * c).toFixed(2));
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\tollCalculator.ts
import { TOLL_LOCATIONS } from '@/data/tollData';
import { calculateDistance } from './distanceUtils';
import { getRouteDetails } from '@/services/routeService';
import { COMPANY_LOCATION } from './priceCalculator';

interface Location {
  lat: number;
  lng: number;
}

const TOLL_DETECTION_RADIUS = 0.5; // Reduced from 1.0 to 0.5 km for more precision
const TOLL_BUFFER_DISTANCE = 0.1; // Reduced from 0.2 to 0.1 km for more accuracy

export const detectTollsOnRoute = async (pickupLocation: Location, dropLocation: Location) => {
  try {
    const routes = await getRouteSegments(pickupLocation, dropLocation);
    const routePoints = extractRoutePoints(routes);
    
    // Enhanced toll detection with direction-aware logic
    const outboundTolls = detectTollsForSegment(pickupLocation, dropLocation, routePoints, 'outbound');
    const returnTolls = detectTollsForSegment(dropLocation, COMPANY_LOCATION, routePoints, 'return');
    
    // Filter out duplicate tolls based on location proximity
    const allTolls = removeDuplicateTolls([...outboundTolls, ...returnTolls]);
    const totalTollCost = calculateTotalTollCost(allTolls);

    return { tolls: allTolls, totalTollCost, routeDetails: routes };
  } catch (error) {
    console.warn('Error detecting tolls:', error);
    return { tolls: [], totalTollCost: 0, routeDetails: null };
  }
};

const getRouteSegments = async (pickupLocation: Location, dropLocation: Location) => {
  const companyToPickup = await getRouteDetails(COMPANY_LOCATION, pickupLocation);
  const pickupToDrop = await getRouteDetails(pickupLocation, dropLocation);
  const dropToCompany = await getRouteDetails(dropLocation, COMPANY_LOCATION);
  
  return { outbound: pickupToDrop, return: dropToCompany };
};

const extractRoutePoints = (routes: any) => {
  const points: [number, number][] = [];
  if (routes.outbound?.geometry) points.push(...decodePolyline(routes.outbound.geometry));
  if (routes.return?.geometry) points.push(...decodePolyline(routes.return.geometry));
  return points;
};

const detectTollsForSegment = (
  start: Location,
  end: Location,
  routePoints: [number, number][],
  direction: 'outbound' | 'return'
) => {
  return TOLL_LOCATIONS
    .filter(toll => {
      // Enhanced proximity detection
      const nearStart = calculateDistance(start, toll) <= TOLL_DETECTION_RADIUS;
      const nearEnd = calculateDistance(end, toll) <= TOLL_DETECTION_RADIUS;
      
      // Check if toll is near any point on the route
      const nearRoute = routePoints.some(point => 
        calculateDistance({ lat: point[0], lng: point[1] }, toll) <= TOLL_BUFFER_DISTANCE
      );

      // Additional check for toll direction based on route angle
      const isInDirection = checkTollDirection(start, end, toll);

      return (nearStart || nearEnd || nearRoute) && isInDirection;
    })
    .map(toll => ({
      ...toll,
      direction,
      // Adjust cost based on direction and vehicle type
      cost: adjustTollCost(toll.cost, direction)
    }));
};

const checkTollDirection = (start: Location, end: Location, toll: Location): boolean => {
  const routeAngle = Math.atan2(end.lat - start.lat, end.lng - start.lng);
  const tollAngle = Math.atan2(toll.lat - start.lat, toll.lng - start.lng);
  const angleDiff = Math.abs(routeAngle - tollAngle);
  return angleDiff <= Math.PI / 4; // 45-degree tolerance
};

const adjustTollCost = (baseCost: number, direction: 'outbound' | 'return'): number => {
  // Return trips might have different rates
  return direction === 'return' ? baseCost * 0.9 : baseCost;
};

const removeDuplicateTolls = (tolls: any[]) => {
  return tolls.filter((toll, index, self) =>
    index === self.findIndex((t) => (
      calculateDistance(toll, t) < TOLL_BUFFER_DISTANCE
    ))
  );
};

const calculateTotalTollCost = (tolls: any[]): number => {
  return tolls.reduce((sum, toll) => sum + toll.cost, 0);
};

const decodePolyline = (str: string, precision = 5) => {
  let index = 0, lat = 0, lng = 0, coordinates: [number, number][] = [];
  const factor = Math.pow(10, precision);

  while (index < str.length) {
    let result = 0, shift = 0, byte;
    
    do {
      byte = str.charCodeAt(index++) - 63;
      result |= (byte & 0x1f) << shift;
      shift += 5;
    } while (byte >= 0x20);

    const latitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));
    
    result = 0;
    shift = 0;
    
    do {
      byte = str.charCodeAt(index++) - 63;
      result |= (byte & 0x1f) << shift;
      shift += 5;
    } while (byte >= 0x20);
    
    const longitude_change = ((result & 1) ? ~(result >> 1) : (result >> 1));
    
    lat += latitude_change;
    lng += longitude_change;
    
    coordinates.push([lat / factor, lng / factor]);
  }

  return coordinates;
};


// C:\Users\israe\Documents\GitHub\recentmap\src\utils\towTruckPricing.ts
export interface TowTruckType {
  name: string;
  capacity: string;
  perKm: number;
  maneuverCharge: number;
  flagDropFee: number;
  maxWeight: number;
}

export const towTruckTypes: Record<string, TowTruckType> = {
  A: {
    name: "Tipo A",
    capacity: "hasta 2000kg",
    perKm: 18.82,
    maneuverCharge: 1219.55,
    flagDropFee: 528.69,
    maxWeight: 2000
  },
  B: {
    name: "Tipo B",
    capacity: "hasta 3000kg",
    perKm: 20.62,
    maneuverCharge: 1336.73,
    flagDropFee: 607.43,
    maxWeight: 3000
  },
  C: {
    name: "Tipo C",
    capacity: "hasta 4000kg",
    perKm: 23.47,
    maneuverCharge: 1524.21,
    flagDropFee: 721.79,
    maxWeight: 4000
  },
  D: {
    name: "Tipo D",
    capacity: "hasta 8000kg",
    perKm: 32.35,
    maneuverCharge: 2101.65,
    flagDropFee: 885.84,
    maxWeight: 8000
  }
};

// Vehicle type detection logic
export const getTruckTypeForVehicle = (model: string): "A" | "B" | "C" | "D" => {
  const modelLower = model.toLowerCase();
  
  if (isTypeDVehicle(modelLower)) return "D";
  if (isTypeCVehicle(modelLower)) return "C";
  if (isTypeBVehicle(modelLower)) return "B";
  return "A";
};

const isTypeDVehicle = (model: string): boolean => {
  const typeDVehicles = [
    'f-150', 'f-250', 'f-350', 'f-450', 'silverado', 'sierra', 'ram', 'tundra', 'titan',
    'super duty', 'power wagon', 'sprinter', 'transit', 'promaster'
  ];
  
  const heavyKeywords = ['heavy duty', 'commercial', 'camion', 'truck', '2500', '3500', '4500', '5500'];
  
  return typeDVehicles.some(v => model.includes(v)) || 
         heavyKeywords.some(k => model.includes(k));
};

const isTypeCVehicle = (model: string): boolean => {
  const typeCVehicles = [
    'murano', 'pathfinder', 'highlander', 'pilot', '4runner', 'expedition',
    'tahoe', 'suburban', 'sequoia', 'armada', 'telluride', 'palisade'
  ];
  
  const largeKeywords = ['full-size', 'large suv', 'luxury suv', 'van', 'executive'];
  
  return typeCVehicles.some(v => model.includes(v)) || 
         largeKeywords.some(k => model.includes(k));
};

const isTypeBVehicle = (model: string): boolean => {
  const typeBVehicles = [
    'rav4', 'cr-v', 'rogue', 'tucson', 'sportage', 'equinox', 'escape',
    'compass', 'cherokee', 'forester', 'outback', 'cx-5'
  ];
  
  const mediumKeywords = ['suv', 'crossover', 'pickup', 'mid-size', 'compact suv'];
  
  return typeBVehicles.some(v => model.includes(v)) || 
         mediumKeywords.some(k => model.includes(k));
};


// C:\Users\israe\Documents\GitHub\recentmap\supabase\functions\notify-request\index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers':
    'authorization, x-client-info, apikey, content-type',
}

// Fetch environment variables and handle undefined values
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')
const supabaseUrl = Deno.env.get('SUPABASE_URL')
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')

if (!RESEND_API_KEY || !supabaseUrl || !supabaseKey) {
  console.error('Missing one or more environment variables.');
  Deno.exit(1); // Exit if essential variables are missing
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { requestId } = await req.json()

    const supabase = createClient(supabaseUrl, supabaseKey)

    // Fetch request details and profile
    const { data: request, error: requestError } = await supabase
      .from('vehicle_requests')
      .select(
        `
        *,
        profiles:profiles(full_name, phone_number)
      `,
      )
      .eq('id', requestId)
      .single();

    if (requestError)
      throw new Error(`Failed to fetch request: ${requestError.message}`)

    // Send email notification
    const emailResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${RESEND_API_KEY}`,
      },
      body: JSON.stringify({
        from: 'MRGruas <onboarding@resend.dev>',
        to: ['admin@mrgruas.com'],
        subject: `New Towing Request - ${request.vehicle_make} ${request.vehicle_model}`,
        html: `
          <h2>New Towing Request</h2>
          <p><strong>Customer:</strong> ${request.profiles.full_name}</p>
          <p><strong>Phone:</strong> ${request.profiles.phone_number}</p>
          <p><strong>Vehicle:</strong> ${request.vehicle_make} ${request.vehicle_model} (${request.vehicle_year})</p>
          <p><strong>Color:</strong> ${request.vehicle_color}</p>
          <p><strong>Truck Type:</strong> ${request.truck_type}</p>
          <p><strong>Requires Maneuver:</strong> ${request.requires_maneuver ? 'Yes' : 'No'}</p>
          <h3>Locations</h3>
          <p><strong>Pickup:</strong> ${JSON.stringify(request.pickup_location)}</p>
          <p><strong>Dropoff:</strong> ${JSON.stringify(request.dropoff_location)}</p>
        `,
      }),
    });

    if (!emailResponse.ok) {
      const errorText = await emailResponse.text();
      throw new Error(`Failed to send email: ${errorText}`);
    }

    return new Response(
      JSON.stringify({ success: true, requestId }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
    );
  } catch (error) {
    console.error('Error:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    );
  }
});


// C:\Users\israe\Documents\GitHub\recentmap\supabase\functions\webhook-notify\index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.7.1"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseKey)

    const { requestId } = await req.json()

    // Fetch request details
    const { data: request, error: requestError } = await supabase
      .from('vehicle_requests')
      .select(`
        *,
        profiles:profiles(username, full_name, phone_number)
      `)
      .eq('id', requestId)
      .single()

    if (requestError) throw new Error(`Failed to fetch request: ${requestError.message}`)

    // Fetch active webhooks
    const { data: webhooks, error: webhooksError } = await supabase
      .from('webhooks')
      .select('*')
      .eq('is_active', true)

    if (webhooksError) throw new Error(`Failed to fetch webhooks: ${webhooksError.message}`)

    // Send webhook notifications
    const notifications = webhooks.map(async (webhook) => {
      const payload = {
        event: 'vehicle_request.created',
        request: {
          id: request.id,
          created_at: request.created_at,
          vehicle_make: request.vehicle_make,
          vehicle_model: request.vehicle_model,
          status: request.status,
          customer: {
            name: request.profiles.full_name,
            phone: request.profiles.phone_number
          },
          locations: {
            pickup: request.pickup_location,
            dropoff: request.dropoff_location
          }
        }
      }

      const signature = await createSignature(JSON.stringify(payload), webhook.secret_key)

      return fetch(webhook.url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Webhook-Signature': signature,
        },
        body: JSON.stringify(payload),
      })
    })

    await Promise.all(notifications)

    return new Response(
      JSON.stringify({ success: true }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } },
    )
  } catch (error) {
    console.error('Error:', error)
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      },
    )
  }
})

async function createSignature(payload: string, secret: string): Promise<string> {
  const encoder = new TextEncoder()
  const key = await crypto.subtle.importKey(
    'raw',
    encoder.encode(secret),
    { name: 'HMAC', hash: 'SHA-256' },
    false,
    ['sign']
  )
  const signature = await crypto.subtle.sign(
    'HMAC',
    key,
    encoder.encode(payload)
  )
  return Array.from(new Uint8Array(signature))
    .map(b => b.toString(16).padStart(2, '0'))
    .join('')
}
